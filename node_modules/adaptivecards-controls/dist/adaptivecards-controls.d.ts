declare module 'adaptivecards-controls/constants' {
	/**
	 * @deprecated Use Constants.keys.tab instead.
	 */
	export const KEY_TAB = 9;
	/**
	 * @deprecated Use Constants.keys.enter instead.
	 */
	export const KEY_ENTER = 13;
	/**
	 * @deprecated Use Constants.keys.escape instead.
	 */
	export const KEY_ESCAPE = 27;
	/**
	 * @deprecated Use Constants.keys.space instead.
	 */
	export const KEY_SPACE = 32;
	/**
	 * @deprecated Use Constants.keys.up instead.
	 */
	export const KEY_UP = 38;
	/**
	 * @deprecated Use Constants.keys.down instead.
	 */
	export const KEY_DOWN = 40;
	/**
	 * @deprecated Use Constants.keys.delete instead.
	 */
	export const KEY_DELETE = 46;
	export class Constants {
	    static readonly keys: {
	        readonly tab: "Tab";
	        readonly enter: "Enter";
	        readonly escape: "Escape";
	        readonly space: " ";
	        readonly up: "ArrowUp";
	        readonly down: "ArrowDown";
	        readonly delete: "Delete";
	        readonly backspace: "Backspace";
	        readonly left: "ArrowLeft";
	        readonly right: "ArrowRight";
	    };
	}

}
declare module 'adaptivecards-controls/enums' {
	export enum DayOfWeek {
	    Sunday = 0,
	    Monday = 1,
	    Tuesday = 2,
	    Wednesday = 3,
	    Thursday = 4,
	    Friday = 5,
	    Saturday = 6
	}

}
declare module 'adaptivecards-controls/utils' {
	import * as Enums from 'adaptivecards-controls/enums';
	export class CalendarSettings {
	    static monthsInYear: number;
	    static daysInWeek: number;
	    static firstDayOfWeek: Enums.DayOfWeek;
	    static longDayNames: string[];
	    static shortDayNames: string[];
	    static minimalDayNames: string[];
	    static longMonthNames: string[];
	    static shortMonthNames: string[];
	    static getLongDayName(dayIndex: number): string;
	    static getShortDayName(dayIndex: number): string;
	    static getInitialDayName(dayIndex: number): string;
	    static getLongMonthName(monthIndex: number): string;
	    static getShortMonthName(monthIndex: number): string;
	}
	export function daysInMonth(year: number, month: number): 29 | 28 | 30 | 31;
	export function addDays(date: Date, days: number): Date;
	export function addMonths(date: Date, months: number): Date;
	export function areDatesEqual(date1: Date, date2: Date): boolean;
	export function getScrollX(): number;
	export function getScrollY(): number;
	export function getAttributeValueAsBool(element: HTMLElement, attributeName: string, defaultValue: boolean): boolean;
	export function getAttributeValueAsString(element: HTMLElement, attributeName: string, defaultValue: string): any;
	export function getAttributeValueAsInt(element: HTMLElement, attributeName: string, defaultValue: number): number;
	export function clearElement(element: HTMLElement): void;

}
declare module 'adaptivecards-controls/collection' {
	export class Collection<TItem> {
	    private _items;
	    onItemAdded: (item: TItem) => void;
	    onItemRemoved: (item: TItem) => void;
	    get(index: number): TItem;
	    add(item: TItem): void;
	    remove(item: TItem): void;
	    indexOf(item: TItem): number;
	    get length(): number;
	}

}
declare module 'adaptivecards-controls/inputcontrol' {
	export abstract class InputControl {
	    private _rootElement;
	    protected validateRootElement(rootElement: HTMLElement): void;
	    protected keyDown(e: KeyboardEvent): void;
	    protected get rootElement(): HTMLElement;
	    attach(rootElement: HTMLElement): void;
	}

}
declare module 'adaptivecards-controls/inputwithpopup' {
	import { InputControl } from 'adaptivecards-controls/inputcontrol';
	export abstract class PopupControl {
	    private _isOpen;
	    private _overlayElement;
	    private _popupElement;
	    protected abstract renderContent(): HTMLElement;
	    onClose: (popupControl: PopupControl, wasCancelled: boolean) => void;
	    keyDown(e: KeyboardEvent): void;
	    render(rootElementBounds: ClientRect): HTMLElement;
	    focus(): void;
	    popup(rootElement: HTMLElement): void;
	    closePopup(wasCancelled: boolean): void;
	    get isOpen(): boolean;
	}
	export abstract class InputWithPopup<TPopupControl extends PopupControl, TValue> extends InputControl {
	    private _labelElement;
	    private _dropDownButtonElement;
	    private _popupControl;
	    private _placeholderText;
	    private _value;
	    private _isEnabled;
	    protected keyDown(e: KeyboardEvent): void;
	    private updateLabel;
	    private updateLayout;
	    protected get popupControl(): TPopupControl;
	    protected abstract createPopupControl(): TPopupControl;
	    protected abstract getCssClassName(): string;
	    protected getButtonIconCssClassName(): string;
	    protected getValueAsString(): string;
	    protected valueChanged(): void;
	    onValueChanged: (sender: InputControl) => void;
	    attach(rootElement: HTMLElement): void;
	    popup(): void;
	    closePopup(wasCancelled: boolean): void;
	    get labelId(): string;
	    get isOpen(): boolean;
	    get placeholderText(): string;
	    set placeholderText(value: string);
	    get value(): TValue;
	    set value(newValue: TValue);
	    set isEnabled(value: boolean);
	}

}
declare module 'adaptivecards-controls/calendar' {
	import { InputControl } from 'adaptivecards-controls/inputcontrol';
	export class DayCell {
	    private _element;
	    private _isSubdued;
	    private _isSelected;
	    private selected;
	    readonly date: Date;
	    onSelected: (cell: DayCell) => void;
	    constructor(date: Date);
	    render(): HTMLElement;
	    focus(): void;
	    get isSubdued(): boolean;
	    set isSubdued(value: boolean);
	    get isSelected(): boolean;
	    set isSelected(value: boolean);
	}
	export class Calendar extends InputControl {
	    private _date;
	    private _days;
	    private _selectedDay;
	    private _rootContainerElement;
	    private _miniCalendarElement;
	    private _monthYearLabelElement;
	    private generateDayCells;
	    private get selectedDayCell();
	    private set selectedDayCell(value);
	    private initializeSelection;
	    private rebuildMiniCalendar;
	    onDateChanged: (calendar: Calendar) => void;
	    constructor();
	    attach(rootElement: HTMLElement): void;
	    focus(): void;
	    get date(): Date;
	    set date(value: Date);
	}

}
declare module 'adaptivecards-controls/dropdown' {
	import { Collection } from 'adaptivecards-controls/collection';
	import { InputWithPopup, PopupControl } from 'adaptivecards-controls/inputwithpopup';
	export class DropDownItem {
	    private _element;
	    private _value;
	    private click;
	    readonly key: string;
	    onClick: (item: DropDownItem) => void;
	    constructor(key: string, value: string);
	    toString(): string;
	    render(): HTMLElement;
	    get value(): string;
	    set value(newValue: string);
	}
	export class DropDownPopupControl extends PopupControl {
	    private _owner;
	    private _renderedItems;
	    private _selectedIndex;
	    constructor(owner: DropDown);
	    protected renderContent(): HTMLElement;
	    keyDown(e: KeyboardEvent): void;
	    render(rootElementBounds: ClientRect): HTMLElement;
	    get selectedIndex(): number;
	    set selectedIndex(index: number);
	}
	export class DropDown extends InputWithPopup<DropDownPopupControl, DropDownItem> {
	    private _items;
	    private _parentLabelId;
	    private itemClicked;
	    protected validateRootElement(rootElement: HTMLElement): void;
	    protected createPopupControl(): DropDownPopupControl;
	    protected getCssClassName(): string;
	    constructor();
	    attach(rootElement: HTMLElement): void;
	    popup(): void;
	    get items(): Collection<DropDownItem>;
	    get selectedItem(): DropDownItem;
	    set selectedItem(newValue: DropDownItem);
	    get selectedIndex(): number;
	    set selectedIndex(index: number);
	    get parentLabelId(): string;
	    set parentLabelId(value: string);
	}

}
declare module 'adaptivecards-controls/datepicker' {
	import { InputWithPopup, PopupControl } from 'adaptivecards-controls/inputwithpopup';
	export class CalendarPopupControl extends PopupControl {
	    private _owner;
	    private _calendar;
	    constructor(owner: DatePicker);
	    protected renderContent(): HTMLElement;
	    focus(): void;
	}
	export class DatePicker extends InputWithPopup<CalendarPopupControl, Date> {
	    protected validateRootElement(rootElement: HTMLElement): void;
	    protected createPopupControl(): CalendarPopupControl;
	    protected getValueAsString(): string;
	    protected getCssClassName(): string;
	    protected getButtonIconCssClassName(): string;
	    popup(): void;
	}

}
declare module 'adaptivecards-controls/checkbox' {
	import { InputControl } from 'adaptivecards-controls/inputcontrol';
	export class CheckBox extends InputControl {
	    private static creationIndex;
	    private static createId;
	    private _label;
	    private _isChecked;
	    private _checkboxElement;
	    private _spanElement;
	    private changed;
	    protected keyDown(e: KeyboardEvent): void;
	    onChange: (sender: CheckBox) => void;
	    attach(rootElement: HTMLElement): void;
	    get label(): string;
	    set label(value: string);
	    get isChecked(): boolean;
	    set isChecked(value: boolean);
	}

}
declare module 'adaptivecards-controls/radiobutton' {
	import { InputControl } from 'adaptivecards-controls/inputcontrol';
	export class RadioButton extends InputControl {
	    private static creationIndex;
	    private static createId;
	    private _label;
	    private _isChecked;
	    private _checkboxElement;
	    private _spanElement;
	    private changed;
	    protected keyDown(e: KeyboardEvent): void;
	    onChange: (sender: RadioButton) => void;
	    attach(rootElement: HTMLElement): void;
	    get label(): string;
	    set label(value: string);
	    get isChecked(): boolean;
	    set isChecked(value: boolean);
	}

}
declare module 'adaptivecards-controls/textbox' {
	import { InputControl } from 'adaptivecards-controls/inputcontrol';
	export class TextBox extends InputControl {
	    private _isMultiline;
	    private _lineCount;
	    private _maxLength;
	    private _placeholder;
	    private _editBox;
	    private editBoxChanged;
	    private recreateEditBox;
	    private get editBox();
	    onChange: (sender: TextBox) => void;
	    attach(rootElement: HTMLElement): void;
	    get value(): string;
	    set value(newValue: string);
	    get placeholder(): string;
	    set placeholder(value: string);
	    get isMultiline(): boolean;
	    set isMultiline(value: boolean);
	    get lineCount(): number;
	    set lineCount(value: number);
	    get maxLength(): number;
	    set maxLength(value: number);
	}

}
declare module 'adaptivecards-controls/popupmenu' {
	import { Collection } from 'adaptivecards-controls/collection';
	import { PopupControl } from 'adaptivecards-controls/inputwithpopup';
	import { DropDownItem } from 'adaptivecards-controls/dropdown';
	export class PopupMenu extends PopupControl {
	    private _items;
	    private _renderedItems;
	    private _selectedIndex;
	    constructor();
	    protected renderContent(): HTMLElement;
	    keyDown(e: KeyboardEvent): void;
	    get items(): Collection<DropDownItem>;
	    get selectedIndex(): number;
	    set selectedIndex(index: number);
	}

}
declare module 'adaptivecards-controls/adaptivecards-controls' {
	export * from 'adaptivecards-controls/constants';
	export * from 'adaptivecards-controls/enums';
	export * from 'adaptivecards-controls/utils';
	export * from 'adaptivecards-controls/collection';
	export * from 'adaptivecards-controls/inputcontrol';
	export * from 'adaptivecards-controls/inputwithpopup';
	export * from 'adaptivecards-controls/calendar';
	export * from 'adaptivecards-controls/dropdown';
	export * from 'adaptivecards-controls/datepicker';
	export * from 'adaptivecards-controls/checkbox';
	export * from 'adaptivecards-controls/radiobutton';
	export * from 'adaptivecards-controls/textbox';
	export * from 'adaptivecards-controls/popupmenu';

}
