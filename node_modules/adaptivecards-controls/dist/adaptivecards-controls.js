(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ACControls", [], factory);
	else if(typeof exports === 'object')
		exports["ACControls"] = factory();
	else
		root["ACControls"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/adaptivecards-controls.ts":
/*!***************************************!*\
  !*** ./src/adaptivecards-controls.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__exportStar(__webpack_require__(/*! ./constants */ "./src/constants.ts"), exports);
__exportStar(__webpack_require__(/*! ./enums */ "./src/enums.ts"), exports);
__exportStar(__webpack_require__(/*! ./utils */ "./src/utils.ts"), exports);
__exportStar(__webpack_require__(/*! ./collection */ "./src/collection.ts"), exports);
__exportStar(__webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts"), exports);
__exportStar(__webpack_require__(/*! ./inputwithpopup */ "./src/inputwithpopup.ts"), exports);
__exportStar(__webpack_require__(/*! ./calendar */ "./src/calendar.ts"), exports);
__exportStar(__webpack_require__(/*! ./dropdown */ "./src/dropdown.ts"), exports);
__exportStar(__webpack_require__(/*! ./datepicker */ "./src/datepicker.ts"), exports);
__exportStar(__webpack_require__(/*! ./checkbox */ "./src/checkbox.ts"), exports);
__exportStar(__webpack_require__(/*! ./radiobutton */ "./src/radiobutton.ts"), exports);
__exportStar(__webpack_require__(/*! ./textbox */ "./src/textbox.ts"), exports);
__exportStar(__webpack_require__(/*! ./popupmenu */ "./src/popupmenu.ts"), exports);


/***/ }),

/***/ "./src/calendar.ts":
/*!*************************!*\
  !*** ./src/calendar.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Calendar = exports.DayCell = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts");
var DayCell = /** @class */ (function () {
    function DayCell(date) {
        this._isSubdued = false;
        this._isSelected = false;
        this.date = date;
    }
    DayCell.prototype.selected = function () {
        if (this.onSelected) {
            this.onSelected(this);
        }
    };
    DayCell.prototype.render = function () {
        var _this = this;
        this._element = document.createElement("div");
        this._element.className = "ms-ctrl ms-ctrl-calendarDay";
        this._element.innerText = this.date.getDate().toString();
        this._element.tabIndex = 0;
        this._element.onclick = function (e) { _this.selected(); };
        this._element.onkeydown = function (e) {
            if (e.key == constants_1.Constants.keys.enter) {
                _this.selected();
                return false;
            }
        };
        return this._element;
    };
    DayCell.prototype.focus = function () {
        this._element.focus();
    };
    Object.defineProperty(DayCell.prototype, "isSubdued", {
        get: function () {
            return this._isSubdued;
        },
        set: function (value) {
            this._isSubdued = value;
            if (this._isSubdued) {
                this._element.classList.add("subdued");
            }
            else {
                this._element.classList.remove("subdued");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DayCell.prototype, "isSelected", {
        get: function () {
            return this._isSelected;
        },
        set: function (value) {
            this._isSelected = value;
            if (this._isSelected) {
                this._element.classList.add("selected");
            }
            else {
                this._element.classList.remove("selected");
            }
        },
        enumerable: false,
        configurable: true
    });
    return DayCell;
}());
exports.DayCell = DayCell;
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar() {
        var _this = _super.call(this) || this;
        _this._selectedDay = null;
        _this._miniCalendarElement = document.createElement("table");
        _this._miniCalendarElement.className = "ms-ctrl ms-ctrl-slide";
        _this._miniCalendarElement.cellPadding = "0px";
        _this._miniCalendarElement.cellSpacing = "0px";
        var miniCalendarHeader = document.createElement("div");
        miniCalendarHeader.className = "ms-ctrl ms-ctrl-calendarHeader";
        miniCalendarHeader.style.display = "flex";
        _this._monthYearLabelElement = document.createElement("div");
        _this._monthYearLabelElement.style.flex = "1 1 100%";
        miniCalendarHeader.appendChild(_this._monthYearLabelElement);
        var navButtons = document.createElement("div");
        navButtons.style.flex = "0 0 auto";
        var button = document.createElement("i");
        button.className = "ms-icon ms-ctrl-calendarNavButton ms-icon-chevronLeft";
        button.tabIndex = 0;
        button.onclick = function (e) {
            _this.date = Utils.addMonths(_this.date, -1);
        };
        button.onkeydown = function (e) {
            if (e.key == constants_1.Constants.keys.enter) {
                _this.date = Utils.addMonths(_this.date, -1);
                return false;
            }
        };
        navButtons.appendChild(button);
        button = document.createElement("i");
        button.className = "ms-icon ms-ctrl-calendarNavButton ms-icon-chevronRight";
        button.tabIndex = 0;
        button.onclick = function (e) {
            _this.date = Utils.addMonths(_this.date, 1);
        };
        button.onkeydown = function (e) {
            if (e.key == constants_1.Constants.keys.enter) {
                _this.date = Utils.addMonths(_this.date, 1);
                return false;
            }
        };
        navButtons.appendChild(button);
        miniCalendarHeader.appendChild(navButtons);
        _this._rootContainerElement = document.createElement("div");
        _this._rootContainerElement.className = "ms-ctrl ms-ctrl-calendar";
        _this._rootContainerElement.appendChild(miniCalendarHeader);
        _this._rootContainerElement.appendChild(_this._miniCalendarElement);
        _this.date = new Date();
        return _this;
    }
    Calendar.prototype.generateDayCells = function (baseDate) {
        var _this = this;
        this._days = [];
        var inputMonth = baseDate.getMonth();
        var inputYear = baseDate.getFullYear();
        var start = new Date(inputYear, inputMonth, 1);
        var end = new Date(inputYear, inputMonth, Utils.daysInMonth(inputYear, inputMonth));
        var startDateDayOfWeek = start.getDay();
        if ((startDateDayOfWeek - Utils.CalendarSettings.firstDayOfWeek) > 0) {
            start = Utils.addDays(start, Utils.CalendarSettings.firstDayOfWeek - startDateDayOfWeek);
        }
        var endDateDayOfWeek = end.getDay();
        var lastDayOfWeek = Utils.CalendarSettings.firstDayOfWeek + 6;
        if ((lastDayOfWeek - endDateDayOfWeek) > 0) {
            end = Utils.addDays(end, lastDayOfWeek - endDateDayOfWeek);
        }
        var endDate = end.getDate();
        var endMonth = end.getMonth();
        var endYear = end.getFullYear();
        do {
            var dayCell = new DayCell(start);
            dayCell.onSelected = function (clickedCell) {
                _this.selectedDayCell = clickedCell;
                if (_this.onDateChanged) {
                    _this.onDateChanged(_this);
                }
            };
            this._days.push(dayCell);
            var done = start.getDate() == endDate && start.getMonth() == endMonth && start.getFullYear() == endYear;
            start = Utils.addDays(start, 1);
        } while (!done);
    };
    Object.defineProperty(Calendar.prototype, "selectedDayCell", {
        get: function () {
            return this._selectedDay;
        },
        set: function (value) {
            if (this._selectedDay) {
                this._selectedDay.isSelected = false;
            }
            this._selectedDay = value;
            if (this._selectedDay) {
                this._selectedDay.isSelected = true;
                this._date = this._selectedDay.date;
            }
        },
        enumerable: false,
        configurable: true
    });
    Calendar.prototype.initializeSelection = function () {
        if (this._date) {
            for (var i = 0; i < this._days.length; i++) {
                if (Utils.areDatesEqual(this._days[i].date, this.date)) {
                    this.selectedDayCell = this._days[i];
                    break;
                }
            }
        }
    };
    Calendar.prototype.rebuildMiniCalendar = function (newDate, oldDate) {
        this.generateDayCells(newDate);
        var month = newDate.getMonth();
        Utils.clearElement(this._miniCalendarElement);
        this._miniCalendarElement.classList.remove("ms-ctrl-slide", "ms-ctrl-slideLeftToRight", "ms-ctrl-slideRightToLeft");
        var row = document.createElement("tr");
        var dayIndex = Utils.CalendarSettings.firstDayOfWeek;
        for (var i = 0; i < Utils.CalendarSettings.daysInWeek; i++) {
            var cell = document.createElement("td");
            cell.className = "ms-ctrl ms-ctrl-calendarDayHeader";
            cell.innerText = Utils.CalendarSettings.getInitialDayName(dayIndex);
            row.appendChild(cell);
            dayIndex++;
            if (dayIndex >= Utils.CalendarSettings.daysInWeek) {
                dayIndex = 0;
            }
        }
        this._miniCalendarElement.appendChild(row);
        for (var i = 0; i < this._days.length; i++) {
            if (i % 7 == 0) {
                row = document.createElement("tr");
                this._miniCalendarElement.appendChild(row);
            }
            var tableCell = document.createElement("td");
            tableCell.appendChild(this._days[i].render());
            if (this._days[i].date.getMonth() != month) {
                this._days[i].isSubdued = true;
            }
            row.appendChild(tableCell);
        }
        if (oldDate) {
            var timeDelta = newDate.getTime() - oldDate.getTime();
            if (timeDelta > 0) {
                this._miniCalendarElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideRightToLeft");
            }
            else if (timeDelta < 0) {
                this._miniCalendarElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideLeftToRight");
            }
        }
    };
    Calendar.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        Utils.clearElement(rootElement);
        rootElement.appendChild(this._rootContainerElement);
    };
    Calendar.prototype.focus = function () {
        if (this._selectedDay) {
            this._selectedDay.focus();
        }
    };
    Object.defineProperty(Calendar.prototype, "date", {
        get: function () {
            return this._date;
        },
        set: function (value) {
            var rebuildNeeded = true;
            var timeDelta = 0;
            var newDate = value ? value : new Date();
            if (this._date) {
                rebuildNeeded = !this._days || newDate.getFullYear() != this._date.getFullYear() || newDate.getMonth() != this._date.getMonth();
            }
            if (rebuildNeeded) {
                this.rebuildMiniCalendar(newDate, this._date);
            }
            this._date = newDate;
            this.initializeSelection();
            this._monthYearLabelElement.innerText = Utils.CalendarSettings.getLongMonthName(this._date.getMonth()) + " " + this._date.getFullYear();
        },
        enumerable: false,
        configurable: true
    });
    return Calendar;
}(inputcontrol_1.InputControl));
exports.Calendar = Calendar;


/***/ }),

/***/ "./src/checkbox.ts":
/*!*************************!*\
  !*** ./src/checkbox.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckBox = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var CheckBox = /** @class */ (function (_super) {
    __extends(CheckBox, _super);
    function CheckBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._label = "";
        _this._checkboxElement = null;
        _this._spanElement = null;
        return _this;
    }
    CheckBox.createId = function () {
        var result = CheckBox.creationIndex;
        CheckBox.creationIndex++;
        return result;
    };
    CheckBox.prototype.changed = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    CheckBox.prototype.keyDown = function (e) {
        switch (e.key) {
            case constants_1.Constants.keys.enter:
                this.isChecked = !this.isChecked;
                break;
        }
    };
    CheckBox.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.className = "ms-ctrl ms-ctrl-checkbox";
        rootElement.tabIndex = 0;
        var labelAttribute = rootElement.attributes["label"];
        if (labelAttribute) {
            this._label = labelAttribute.value;
        }
        var isCheckedAttribute = rootElement.attributes["ischecked"];
        if (isCheckedAttribute) {
            this._isChecked = isCheckedAttribute.value === "true";
        }
        this._checkboxElement = document.createElement("input");
        this._checkboxElement.id = "ms-ctrl-checkbox-" + CheckBox.createId();
        this._checkboxElement.type = "checkbox";
        this._checkboxElement.style.position = "absolute";
        this._checkboxElement.checked = this.isChecked;
        this._checkboxElement.onchange = function (e) { _this.changed(); };
        var labelElement = document.createElement("label");
        labelElement.htmlFor = this._checkboxElement.id;
        this._spanElement = document.createElement("span");
        this._spanElement.innerText = this._label;
        labelElement.appendChild(this._spanElement);
        (0, utils_1.clearElement)(rootElement);
        rootElement.appendChild(this._checkboxElement);
        rootElement.appendChild(labelElement);
    };
    Object.defineProperty(CheckBox.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
            if (this._spanElement) {
                this._spanElement.innerText = this._label;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckBox.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            if (this._isChecked != value) {
                this._isChecked = value;
                if (this._checkboxElement) {
                    this._checkboxElement.checked = this._isChecked;
                }
                this.changed();
            }
        },
        enumerable: false,
        configurable: true
    });
    // Used to generate unique Ids
    CheckBox.creationIndex = 0;
    return CheckBox;
}(inputcontrol_1.InputControl));
exports.CheckBox = CheckBox;


/***/ }),

/***/ "./src/collection.ts":
/*!***************************!*\
  !*** ./src/collection.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Collection = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Collection = /** @class */ (function () {
    function Collection() {
        this._items = [];
        this.onItemAdded = null;
        this.onItemRemoved = null;
    }
    Collection.prototype.get = function (index) {
        return this._items[index];
    };
    Collection.prototype.add = function (item) {
        this._items.push(item);
        if (this.onItemAdded) {
            this.onItemAdded(item);
        }
    };
    Collection.prototype.remove = function (item) {
        var i = this._items.indexOf(item);
        if (i >= 0) {
            this._items = this._items.splice(i, 1);
            if (this.onItemRemoved) {
                this.onItemRemoved(item);
            }
        }
    };
    Collection.prototype.indexOf = function (item) {
        return this._items.indexOf(item);
    };
    Object.defineProperty(Collection.prototype, "length", {
        get: function () {
            return this._items.length;
        },
        enumerable: false,
        configurable: true
    });
    return Collection;
}());
exports.Collection = Collection;


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Constants = exports.KEY_DELETE = exports.KEY_DOWN = exports.KEY_UP = exports.KEY_SPACE = exports.KEY_ESCAPE = exports.KEY_ENTER = exports.KEY_TAB = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
/**
 * @deprecated Use Constants.keys.tab instead.
 */
exports.KEY_TAB = 9;
/**
 * @deprecated Use Constants.keys.enter instead.
 */
exports.KEY_ENTER = 13;
/**
 * @deprecated Use Constants.keys.escape instead.
 */
exports.KEY_ESCAPE = 27;
/**
 * @deprecated Use Constants.keys.space instead.
 */
exports.KEY_SPACE = 32;
/**
 * @deprecated Use Constants.keys.up instead.
 */
exports.KEY_UP = 38;
/**
 * @deprecated Use Constants.keys.down instead.
 */
exports.KEY_DOWN = 40;
/**
 * @deprecated Use Constants.keys.delete instead.
 */
exports.KEY_DELETE = 46;
var Constants = /** @class */ (function () {
    function Constants() {
    }
    Constants.keys = {
        tab: "Tab",
        enter: "Enter",
        escape: "Escape",
        space: " ",
        up: "ArrowUp",
        down: "ArrowDown",
        delete: "Delete",
        backspace: "Backspace",
        left: "ArrowLeft",
        right: "ArrowRight"
    };
    return Constants;
}());
exports.Constants = Constants;


/***/ }),

/***/ "./src/datepicker.ts":
/*!***************************!*\
  !*** ./src/datepicker.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DatePicker = exports.CalendarPopupControl = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "./src/inputwithpopup.ts");
var calendar_1 = __webpack_require__(/*! ./calendar */ "./src/calendar.ts");
var CalendarPopupControl = /** @class */ (function (_super) {
    __extends(CalendarPopupControl, _super);
    function CalendarPopupControl(owner) {
        var _this = _super.call(this) || this;
        _this._owner = owner;
        return _this;
    }
    CalendarPopupControl.prototype.renderContent = function () {
        var _this = this;
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-calendarPopup";
        this._calendar = new calendar_1.Calendar();
        this._calendar.date = this._owner.value;
        this._calendar.onDateChanged = function (c) {
            _this._owner.value = c.date;
            _this.closePopup(false);
        };
        this._calendar.attach(element);
        return element;
    };
    CalendarPopupControl.prototype.focus = function () {
        if (this._calendar) {
            this._calendar.focus();
        }
    };
    return CalendarPopupControl;
}(inputwithpopup_1.PopupControl));
exports.CalendarPopupControl = CalendarPopupControl;
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePicker.prototype.validateRootElement = function (rootElement) {
        if (!(rootElement instanceof HTMLDivElement)) {
            throw new Error("DatePicker requires a DIV element as its root.");
        }
    };
    DatePicker.prototype.createPopupControl = function () {
        return new CalendarPopupControl(this);
    };
    DatePicker.prototype.getValueAsString = function () {
        return this.value.toLocaleDateString();
    };
    DatePicker.prototype.getCssClassName = function () {
        return "ms-ctrl ms-ctrl-datePicker";
    };
    DatePicker.prototype.getButtonIconCssClassName = function () {
        return "ms-icon-calendar";
    };
    DatePicker.prototype.popup = function () {
        _super.prototype.popup.call(this);
        if (this.isOpen) {
            this.popupControl.focus();
        }
    };
    return DatePicker;
}(inputwithpopup_1.InputWithPopup));
exports.DatePicker = DatePicker;


/***/ }),

/***/ "./src/dropdown.ts":
/*!*************************!*\
  !*** ./src/dropdown.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DropDown = exports.DropDownPopupControl = exports.DropDownItem = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var collection_1 = __webpack_require__(/*! ./collection */ "./src/collection.ts");
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "./src/inputwithpopup.ts");
var DropDownItem = /** @class */ (function () {
    function DropDownItem(key, value) {
        this.key = key;
        this._value = value;
    }
    DropDownItem.prototype.click = function () {
        if (this.onClick) {
            this.onClick(this);
        }
    };
    DropDownItem.prototype.toString = function () {
        return this.value;
    };
    DropDownItem.prototype.render = function () {
        var _this = this;
        if (!this._element) {
            this._element = document.createElement("span");
            this._element.className = "ms-ctrl ms-ctrl-dropdown-item";
            this._element.innerText = this.value;
            this._element.setAttribute("role", "menuitem");
            this._element.setAttribute("aria-current", "false");
            this._element.onmouseup = function (e) { _this.click(); };
            this._element.onkeydown = function (e) {
                if (e.key === constants_1.Constants.keys.enter) {
                    _this.click();
                    e.cancelBubble = true;
                }
            };
        }
        return this._element;
    };
    Object.defineProperty(DropDownItem.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            this._value = newValue;
            if (this._element) {
                this._element.innerText = newValue;
            }
        },
        enumerable: false,
        configurable: true
    });
    return DropDownItem;
}());
exports.DropDownItem = DropDownItem;
var DropDownPopupControl = /** @class */ (function (_super) {
    __extends(DropDownPopupControl, _super);
    function DropDownPopupControl(owner) {
        var _this = _super.call(this) || this;
        _this._renderedItems = [];
        _this._selectedIndex = -1;
        _this._owner = owner;
        return _this;
    }
    DropDownPopupControl.prototype.renderContent = function () {
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-popup";
        element.setAttribute("role", "menu");
        var selectedIndex = this._owner.selectedIndex;
        for (var i = 0; i < this._owner.items.length; i++) {
            var renderedItem = this._owner.items.get(i).render();
            renderedItem.tabIndex = 0;
            element.appendChild(renderedItem);
            if (i == selectedIndex) {
                renderedItem.focus();
            }
            this._renderedItems.push(renderedItem);
        }
        return element;
    };
    DropDownPopupControl.prototype.keyDown = function (e) {
        _super.prototype.keyDown.call(this, e); // handles ESC
        var selectedItemIndex = this._selectedIndex;
        switch (e.key) {
            case constants_1.Constants.keys.tab:
                this.closePopup(true);
                break;
            case constants_1.Constants.keys.enter:
                if (this.selectedIndex >= 0) {
                    this._owner.selectedIndex = this.selectedIndex;
                    this.closePopup(false);
                }
                break;
            case constants_1.Constants.keys.up:
                if (selectedItemIndex <= 0) {
                    selectedItemIndex = this._renderedItems.length - 1;
                }
                else {
                    selectedItemIndex--;
                    if (selectedItemIndex < 0) {
                        selectedItemIndex = this._renderedItems.length - 1;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
            case constants_1.Constants.keys.down:
                if (selectedItemIndex < 0) {
                    selectedItemIndex = 0;
                }
                else {
                    selectedItemIndex++;
                    if (selectedItemIndex >= this._renderedItems.length) {
                        selectedItemIndex = 0;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
        }
    };
    DropDownPopupControl.prototype.render = function (rootElementBounds) {
        var renderedElement = _super.prototype.render.call(this, rootElementBounds);
        renderedElement.style.minWidth = (rootElementBounds.width / 2) + "px";
        return renderedElement;
    };
    Object.defineProperty(DropDownPopupControl.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (index >= 0 && index < this._renderedItems.length) {
                // deselect previous item (if one was selected)
                if (this._selectedIndex >= 0 && this._selectedIndex < this._renderedItems.length) {
                    this._renderedItems[this._selectedIndex].setAttribute("aria-current", "false");
                }
                // select new item
                this._renderedItems[index].focus();
                this._renderedItems[index].setAttribute("aria-current", "true");
                this._selectedIndex = index;
            }
        },
        enumerable: false,
        configurable: true
    });
    return DropDownPopupControl;
}(inputwithpopup_1.PopupControl));
exports.DropDownPopupControl = DropDownPopupControl;
var DropDown = /** @class */ (function (_super) {
    __extends(DropDown, _super);
    function DropDown() {
        var _this = _super.call(this) || this;
        _this._items = new collection_1.Collection();
        _this._items.onItemAdded = function (item) { item.onClick = function (clickedItem) { _this.itemClicked(clickedItem); }; };
        _this._items.onItemRemoved = function (item) { item.onClick = null; };
        return _this;
    }
    DropDown.prototype.itemClicked = function (item) {
        this.selectedItem = item;
        this.closePopup(false);
        this.rootElement.focus();
    };
    DropDown.prototype.validateRootElement = function (rootElement) {
        if (!(rootElement instanceof HTMLDivElement)) {
            throw new Error("DropDown requires a DIV element as its root.");
        }
    };
    DropDown.prototype.createPopupControl = function () {
        return new DropDownPopupControl(this);
    };
    DropDown.prototype.getCssClassName = function () {
        return "ms-ctrl ms-ctrl-dropdown";
    };
    DropDown.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        for (var i = 0; i < this.rootElement.children.length; i++) {
            var childElement = this.rootElement.children[i];
            if (childElement.tagName.toLowerCase() == "ms-dropdown-item") {
                var item = new DropDownItem(childElement.attributes.getNamedItem("key").value, childElement.attributes.getNamedItem("value").value);
                this._items.add(item);
            }
        }
        // add aria-labelledby tag with all pertinent label ids
        var ariaLabelledByIds = [];
        if (this.parentLabelId) {
            ariaLabelledByIds.push(this.parentLabelId);
        }
        if (this.labelId) {
            ariaLabelledByIds.push(this.labelId);
        }
        if (ariaLabelledByIds.length > 0) {
            this.rootElement.setAttribute("aria-labelledby", ariaLabelledByIds.join(" "));
        }
        this.rootElement.setAttribute("role", "combobox");
        this.rootElement.setAttribute("aria-haspopup", "menu");
    };
    DropDown.prototype.popup = function () {
        _super.prototype.popup.call(this);
        this.popupControl.selectedIndex = this.selectedIndex;
    };
    Object.defineProperty(DropDown.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropDown.prototype, "selectedItem", {
        get: function () {
            return this.value;
        },
        set: function (newValue) {
            this.value = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropDown.prototype, "selectedIndex", {
        get: function () {
            return this.items.indexOf(this.value);
        },
        set: function (index) {
            if (index >= 0 && this.items.length > index) {
                this.selectedItem = this.items.get(index);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropDown.prototype, "parentLabelId", {
        get: function () {
            return this._parentLabelId;
        },
        set: function (value) {
            this._parentLabelId = value;
        },
        enumerable: false,
        configurable: true
    });
    return DropDown;
}(inputwithpopup_1.InputWithPopup));
exports.DropDown = DropDown;


/***/ }),

/***/ "./src/enums.ts":
/*!**********************!*\
  !*** ./src/enums.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DayOfWeek = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
    DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
    DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
    DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
    DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
    DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
    DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));


/***/ }),

/***/ "./src/inputcontrol.ts":
/*!*****************************!*\
  !*** ./src/inputcontrol.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputControl = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var InputControl = /** @class */ (function () {
    function InputControl() {
    }
    InputControl.prototype.validateRootElement = function (rootElement) {
        // Do nothing - all root element types are valid.
    };
    InputControl.prototype.keyDown = function (e) {
        // Do nothing in base implementation
    };
    Object.defineProperty(InputControl.prototype, "rootElement", {
        get: function () {
            return this._rootElement;
        },
        enumerable: false,
        configurable: true
    });
    InputControl.prototype.attach = function (rootElement) {
        var _this = this;
        this.validateRootElement(rootElement);
        this._rootElement = rootElement;
        this._rootElement.onkeydown = function (e) { _this.keyDown(e); };
    };
    return InputControl;
}());
exports.InputControl = InputControl;


/***/ }),

/***/ "./src/inputwithpopup.ts":
/*!*******************************!*\
  !*** ./src/inputwithpopup.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputWithPopup = exports.PopupControl = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts");
var uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/esm-browser/index.js");
var PopupControl = /** @class */ (function () {
    function PopupControl() {
        this._isOpen = false;
    }
    PopupControl.prototype.keyDown = function (e) {
        switch (e.key) {
            case constants_1.Constants.keys.escape:
                this.closePopup(true);
                break;
        }
    };
    PopupControl.prototype.render = function (rootElementBounds) {
        var _this = this;
        var element = document.createElement("div");
        element.tabIndex = 0;
        element.className = "ms-ctrl ms-ctrl-popup-container";
        element.setAttribute("role", "dialog");
        element.setAttribute("aria-modal", "true");
        element.onkeydown = function (e) {
            _this.keyDown(e);
            return !e.cancelBubble;
        };
        element.appendChild(this.renderContent());
        return element;
    };
    PopupControl.prototype.focus = function () {
        if (this._popupElement) {
            this._popupElement.firstElementChild.focus();
        }
    };
    PopupControl.prototype.popup = function (rootElement) {
        var _this = this;
        if (!this._isOpen) {
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = "ms-ctrl-overlay";
            this._overlayElement.tabIndex = 0;
            this._overlayElement.style.width = document.documentElement.scrollWidth + "px";
            this._overlayElement.style.height = document.documentElement.scrollHeight + "px";
            this._overlayElement.onfocus = function (e) { _this.closePopup(true); };
            document.body.appendChild(this._overlayElement);
            var rootElementBounds = rootElement.getBoundingClientRect();
            this._popupElement = this.render(rootElementBounds);
            this._popupElement.classList.remove("ms-ctrl-slide", "ms-ctrl-slideLeftToRight", "ms-ctrl-slideRightToLeft", "ms-ctrl-slideTopToBottom", "ms-ctrl-slideRightToLeft");
            window.addEventListener("resize", function (e) { _this.closePopup(true); });
            var rootElementLabel = rootElement.getAttribute("aria-label");
            if (rootElementLabel) {
                this._popupElement.setAttribute("aria-label", rootElementLabel);
            }
            this._overlayElement.appendChild(this._popupElement);
            var popupElementBounds = this._popupElement.getBoundingClientRect();
            var availableSpaceBelow = window.innerHeight - rootElementBounds.bottom;
            var availableSpaceAbove = rootElementBounds.top;
            var availableSpaceRight = window.innerWidth - rootElementBounds.left;
            var availableSpaceRight = window.innerWidth - rootElementBounds.right;
            var availableSpaceLeft = rootElementBounds.left;
            var left = rootElementBounds.left + Utils.getScrollX();
            var top;
            if (availableSpaceAbove < popupElementBounds.height && availableSpaceBelow < popupElementBounds.height) {
                // Not enough space above or below root element
                var actualPopupHeight = Math.min(popupElementBounds.height, window.innerHeight);
                this._popupElement.style.maxHeight = actualPopupHeight + "px";
                if (actualPopupHeight < popupElementBounds.height) {
                    top = Utils.getScrollY();
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top + (rootElementBounds.height - actualPopupHeight) / 2;
                }
                if (availableSpaceLeft < popupElementBounds.width && availableSpaceRight < popupElementBounds.width) {
                    // Not enough space left or right of root element
                    var actualPopupWidth = Math.min(popupElementBounds.width, window.innerWidth);
                    this._popupElement.style.maxWidth = actualPopupWidth + "px";
                    if (actualPopupWidth < popupElementBounds.width) {
                        left = Utils.getScrollX();
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left + (rootElementBounds.width - actualPopupWidth) / 2;
                    }
                }
                else {
                    // Enough space on the left or right of the root element
                    if (availableSpaceRight >= popupElementBounds.width) {
                        left = Utils.getScrollX() + rootElementBounds.right;
                        this._popupElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideLeftToRight");
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left - popupElementBounds.width;
                        this._popupElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideRightToLeft");
                    }
                }
            }
            else {
                // Enough space above or below root element
                if (availableSpaceBelow >= popupElementBounds.height) {
                    top = Utils.getScrollY() + rootElementBounds.bottom;
                    this._popupElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideTopToBottom");
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top - popupElementBounds.height;
                    this._popupElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideBottomToTop");
                }
                if (availableSpaceRight < popupElementBounds.width) {
                    left = Utils.getScrollX() + rootElementBounds.right - popupElementBounds.width;
                }
            }
            this._popupElement.style.left = left + "px";
            this._popupElement.style.top = top + "px";
            this.focus();
            this._isOpen = true;
        }
    };
    PopupControl.prototype.closePopup = function (wasCancelled) {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
            if (this.onClose) {
                this.onClose(this, wasCancelled);
            }
        }
    };
    Object.defineProperty(PopupControl.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        enumerable: false,
        configurable: true
    });
    return PopupControl;
}());
exports.PopupControl = PopupControl;
var InputWithPopup = /** @class */ (function (_super) {
    __extends(InputWithPopup, _super);
    function InputWithPopup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isEnabled = true;
        return _this;
    }
    InputWithPopup.prototype.keyDown = function (e) {
        switch (e.key) {
            case constants_1.Constants.keys.enter:
                if (this._isEnabled) {
                    this.popup();
                }
                break;
        }
    };
    InputWithPopup.prototype.updateLabel = function () {
        if (this._labelElement) {
            if (this._value) {
                this._labelElement.innerText = this.getValueAsString();
                this._labelElement.classList.remove("placeholder");
            }
            else {
                this._labelElement.innerText = this._placeholderText ? this._placeholderText : "";
                this._labelElement.classList.add("placeholder");
            }
        }
    };
    InputWithPopup.prototype.updateLayout = function () {
        if (!this._isEnabled) {
            this.rootElement.classList.add("disabled");
            this.rootElement.setAttribute("aria-disabled", "true");
            this.rootElement.tabIndex = -1;
        }
        else {
            this.rootElement.classList.remove("disabled");
            this.rootElement.removeAttribute("aria-disabled");
            this.rootElement.tabIndex = 0;
        }
    };
    Object.defineProperty(InputWithPopup.prototype, "popupControl", {
        get: function () {
            return this._popupControl;
        },
        enumerable: false,
        configurable: true
    });
    InputWithPopup.prototype.getButtonIconCssClassName = function () {
        return "ms-icon-chevronDown";
    };
    InputWithPopup.prototype.getValueAsString = function () {
        return this._value.toString();
    };
    InputWithPopup.prototype.valueChanged = function () {
        if (this.onValueChanged) {
            this.onValueChanged(this);
        }
    };
    InputWithPopup.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.tabIndex = 0;
        rootElement.className = this.getCssClassName();
        window.addEventListener("resize", function (e) { _this.closePopup(true); });
        this.rootElement.onclick = function (e) {
            if (_this._isEnabled) {
                if (_this.isOpen) {
                    _this.closePopup(true);
                }
                else {
                    _this.popup();
                }
            }
        };
        var placeHolderDomItem = this.rootElement.attributes.getNamedItem("placeholder");
        if (placeHolderDomItem) {
            this._placeholderText = placeHolderDomItem.value;
        }
        this._labelElement = document.createElement("span");
        this._labelElement.className = "ms-ctrl ms-dropdown-label";
        this._labelElement.id = (0, uuid_1.v4)(); // generate unique id for our label element
        this._dropDownButtonElement = document.createElement("i");
        this._dropDownButtonElement.className = "ms-icon ms-ctrl-dropdown-button " + this.getButtonIconCssClassName();
        this.rootElement.appendChild(this._labelElement);
        this.rootElement.appendChild(this._dropDownButtonElement);
        this.updateLabel();
    };
    InputWithPopup.prototype.popup = function () {
        var _this = this;
        this._popupControl = this.createPopupControl();
        this._popupControl.onClose = function (sender, wasCancelled) {
            _this.closePopup(wasCancelled);
            _this.rootElement.focus();
        };
        this._popupControl.popup(this.rootElement);
    };
    InputWithPopup.prototype.closePopup = function (wasCancelled) {
        if (this.popupControl) {
            this.popupControl.closePopup(wasCancelled);
        }
    };
    Object.defineProperty(InputWithPopup.prototype, "labelId", {
        get: function () {
            if (this._labelElement) {
                return this._labelElement.id;
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "isOpen", {
        get: function () {
            return this._popupControl ? this._popupControl.isOpen : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "placeholderText", {
        get: function () {
            return this._placeholderText;
        },
        set: function (value) {
            this._placeholderText = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            if (this._value != newValue) {
                this._value = newValue;
                this.updateLabel();
                this.valueChanged();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "isEnabled", {
        set: function (value) {
            if (this._isEnabled !== value) {
                this._isEnabled = value;
                this.updateLayout();
            }
        },
        enumerable: false,
        configurable: true
    });
    return InputWithPopup;
}(inputcontrol_1.InputControl));
exports.InputWithPopup = InputWithPopup;


/***/ }),

/***/ "./src/popupmenu.ts":
/*!**************************!*\
  !*** ./src/popupmenu.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupMenu = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var collection_1 = __webpack_require__(/*! ./collection */ "./src/collection.ts");
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "./src/inputwithpopup.ts");
var PopupMenu = /** @class */ (function (_super) {
    __extends(PopupMenu, _super);
    function PopupMenu() {
        var _this = _super.call(this) || this;
        _this._items = new collection_1.Collection();
        _this._renderedItems = [];
        _this._selectedIndex = -1;
        return _this;
    }
    PopupMenu.prototype.renderContent = function () {
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-popup";
        element.setAttribute("role", "listbox");
        for (var i = 0; i < this._items.length; i++) {
            var renderedItem = this._items.get(i).render();
            renderedItem.tabIndex = 0;
            element.appendChild(renderedItem);
            if (i == this.selectedIndex) {
                renderedItem.focus();
            }
            this._renderedItems.push(renderedItem);
        }
        return element;
    };
    PopupMenu.prototype.keyDown = function (e) {
        _super.prototype.keyDown.call(this, e);
        var selectedItemIndex = this._selectedIndex;
        switch (e.key) {
            case constants_1.Constants.keys.tab:
                this.closePopup(true);
                break;
            /*
            case Constants.keys.enter:
                if (this.selectedIndex >= 0) {
                    this.selectedIndex = this.selectedIndex;

                    this.close();
                }

                break;
            */
            case constants_1.Constants.keys.up:
                if (selectedItemIndex <= 0) {
                    selectedItemIndex = this._renderedItems.length - 1;
                }
                else {
                    selectedItemIndex--;
                    if (selectedItemIndex < 0) {
                        selectedItemIndex = this._renderedItems.length - 1;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
            case constants_1.Constants.keys.down:
                if (selectedItemIndex < 0) {
                    selectedItemIndex = 0;
                }
                else {
                    selectedItemIndex++;
                    if (selectedItemIndex >= this._renderedItems.length) {
                        selectedItemIndex = 0;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
        }
    };
    Object.defineProperty(PopupMenu.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupMenu.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (index >= 0 && index < this._renderedItems.length) {
                this._renderedItems[index].focus();
                this._selectedIndex = index;
            }
        },
        enumerable: false,
        configurable: true
    });
    return PopupMenu;
}(inputwithpopup_1.PopupControl));
exports.PopupMenu = PopupMenu;


/***/ }),

/***/ "./src/radiobutton.ts":
/*!****************************!*\
  !*** ./src/radiobutton.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RadioButton = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var constants_1 = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var RadioButton = /** @class */ (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._label = "";
        _this._checkboxElement = null;
        _this._spanElement = null;
        return _this;
    }
    RadioButton.createId = function () {
        var result = RadioButton.creationIndex;
        RadioButton.creationIndex++;
        return result;
    };
    RadioButton.prototype.changed = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    RadioButton.prototype.keyDown = function (e) {
        switch (e.key) {
            case constants_1.Constants.keys.enter:
                this.isChecked = !this.isChecked;
                break;
        }
    };
    RadioButton.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.className = "ms-ctrl ms-ctrl-radiobutton";
        rootElement.tabIndex = 0;
        var labelAttribute = rootElement.attributes["label"];
        if (labelAttribute) {
            this._label = labelAttribute.value;
        }
        var isCheckedAttribute = rootElement.attributes["ischecked"];
        if (isCheckedAttribute) {
            this._isChecked = isCheckedAttribute.value === "true";
        }
        this._checkboxElement = document.createElement("input");
        this._checkboxElement.id = "ms-ctrl-radio-" + RadioButton.createId();
        this._checkboxElement.type = "radio";
        this._checkboxElement.style.position = "absolute";
        this._checkboxElement.checked = this.isChecked;
        this._checkboxElement.onchange = function (e) { _this.changed(); };
        var groupNameAttribute = rootElement.attributes["groupname"];
        if (groupNameAttribute) {
            this._checkboxElement.name = groupNameAttribute.value;
        }
        var labelElement = document.createElement("label");
        labelElement.htmlFor = this._checkboxElement.id;
        this._spanElement = document.createElement("span");
        this._spanElement.innerText = this._label;
        labelElement.appendChild(this._spanElement);
        (0, utils_1.clearElement)(rootElement);
        rootElement.appendChild(this._checkboxElement);
        rootElement.appendChild(labelElement);
    };
    Object.defineProperty(RadioButton.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
            if (this._spanElement) {
                this._spanElement.innerText = this._label;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            if (this._isChecked != value) {
                this._isChecked = value;
                if (this._checkboxElement) {
                    this._checkboxElement.checked = this._isChecked;
                }
                this.changed();
            }
        },
        enumerable: false,
        configurable: true
    });
    // Used to generate unique Ids
    RadioButton.creationIndex = 0;
    return RadioButton;
}(inputcontrol_1.InputControl));
exports.RadioButton = RadioButton;


/***/ }),

/***/ "./src/textbox.ts":
/*!************************!*\
  !*** ./src/textbox.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextBox = void 0;
var Utils = __webpack_require__(/*! ./utils */ "./src/utils.ts");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "./src/inputcontrol.ts");
var EditBox = /** @class */ (function () {
    function EditBox() {
    }
    EditBox.prototype.changed = function () {
        if (this.onChange) {
            this.onChange();
        }
    };
    return EditBox;
}());
var SingleLineEditBox = /** @class */ (function (_super) {
    __extends(SingleLineEditBox, _super);
    function SingleLineEditBox() {
        var _this = _super.call(this) || this;
        _this._inputElement = document.createElement("input");
        _this._inputElement.className = "ms-ctrl ms-ctrl-textbox";
        _this._inputElement.type = "text";
        _this._inputElement.oninput = function (e) {
            _this.changed();
        };
        return _this;
    }
    Object.defineProperty(SingleLineEditBox.prototype, "element", {
        get: function () {
            return this._inputElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "placeholder", {
        set: function (value) {
            this._inputElement.placeholder = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "lineCount", {
        set: function (value) {
            // lineCount can't be set on a SingleLineEditBox
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "maxLength", {
        set: function (value) {
            if (this._inputElement.maxLength != value) {
                this._inputElement.maxLength = value;
                this.value = this.value.substr(0, value);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "value", {
        get: function () {
            return this._inputElement.value;
        },
        set: function (newValue) {
            this._inputElement.value = newValue;
        },
        enumerable: false,
        configurable: true
    });
    return SingleLineEditBox;
}(EditBox));
var MultilineEditBox = /** @class */ (function (_super) {
    __extends(MultilineEditBox, _super);
    function MultilineEditBox() {
        var _this = _super.call(this) || this;
        _this._textareaElement = document.createElement("textarea");
        _this._textareaElement.className = "ms-ctrl ms-ctrl-textbox ms-ctrl-textbox-multiline";
        _this._textareaElement.oninput = function (e) {
            _this.changed();
        };
        return _this;
    }
    Object.defineProperty(MultilineEditBox.prototype, "element", {
        get: function () {
            return this._textareaElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "placeholder", {
        set: function (value) {
            this._textareaElement.placeholder = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "lineCount", {
        set: function (value) {
            this._textareaElement.rows = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "maxLength", {
        set: function (value) {
            if (this._textareaElement.maxLength != value) {
                this._textareaElement.maxLength = value;
                this.value = this.value.substr(0, value);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "value", {
        get: function () {
            return this._textareaElement.value;
        },
        set: function (newValue) {
            this._textareaElement.value = newValue;
        },
        enumerable: false,
        configurable: true
    });
    return MultilineEditBox;
}(EditBox));
var TextBox = /** @class */ (function (_super) {
    __extends(TextBox, _super);
    function TextBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isMultiline = false;
        _this._lineCount = 3;
        return _this;
    }
    TextBox.prototype.editBoxChanged = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    TextBox.prototype.recreateEditBox = function () {
        var _this = this;
        var currentValue = null;
        if (this._editBox) {
            currentValue = this._editBox.value;
        }
        else {
            currentValue = this.rootElement.innerText;
        }
        if (this._isMultiline) {
            this._editBox = new MultilineEditBox();
        }
        else {
            this._editBox = new SingleLineEditBox();
        }
        if (currentValue) {
            this._editBox.value = currentValue;
        }
        this._editBox.lineCount = this._lineCount;
        this._editBox.maxLength = this._maxLength;
        this._editBox.placeholder = this._placeholder;
        this._editBox.onChange = function () { _this.editBoxChanged(); };
        Utils.clearElement(this.rootElement);
        this.rootElement.appendChild(this._editBox.element);
    };
    Object.defineProperty(TextBox.prototype, "editBox", {
        get: function () {
            if (!this._editBox) {
                this.recreateEditBox();
            }
            return this._editBox;
        },
        enumerable: false,
        configurable: true
    });
    TextBox.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        this._isMultiline = Utils.getAttributeValueAsBool(rootElement, "ismultiline", false);
        this._lineCount = Utils.getAttributeValueAsInt(rootElement, "lines", 3);
        this._maxLength = Utils.getAttributeValueAsInt(rootElement, "maxlength", 50000);
        this._placeholder = Utils.getAttributeValueAsString(rootElement, "placeholder", null);
        this.recreateEditBox();
    };
    Object.defineProperty(TextBox.prototype, "value", {
        get: function () {
            return this.editBox.value;
        },
        set: function (newValue) {
            this.editBox.value = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (value) {
            this._placeholder = value;
            this.editBox.placeholder = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "isMultiline", {
        get: function () {
            return this._isMultiline;
        },
        set: function (value) {
            if (this._isMultiline != value) {
                this._isMultiline = value;
                this.recreateEditBox();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "lineCount", {
        get: function () {
            return this._lineCount;
        },
        set: function (value) {
            if (value > 0) {
                this._lineCount = value;
                this.editBox.lineCount = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (value) {
            if (value > 0) {
                this._maxLength = value;
                this.editBox.maxLength = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    return TextBox;
}(inputcontrol_1.InputControl));
exports.TextBox = TextBox;


/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearElement = exports.getAttributeValueAsInt = exports.getAttributeValueAsString = exports.getAttributeValueAsBool = exports.getScrollY = exports.getScrollX = exports.areDatesEqual = exports.addMonths = exports.addDays = exports.daysInMonth = exports.CalendarSettings = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "./src/enums.ts");
var CalendarSettings = /** @class */ (function () {
    function CalendarSettings() {
    }
    CalendarSettings.getLongDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.longDayNames.length) {
            return CalendarSettings.longDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getShortDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.shortDayNames.length) {
            return CalendarSettings.shortDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getInitialDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.minimalDayNames.length) {
            return CalendarSettings.minimalDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getLongMonthName = function (monthIndex) {
        if (monthIndex >= 0 && monthIndex < CalendarSettings.longMonthNames.length) {
            return CalendarSettings.longMonthNames[monthIndex];
        }
        throw new Error("Month index out of range: " + monthIndex);
    };
    CalendarSettings.getShortMonthName = function (monthIndex) {
        if (monthIndex >= 0 && monthIndex < CalendarSettings.shortMonthNames.length) {
            return CalendarSettings.shortMonthNames[monthIndex];
        }
        throw new Error("Month index out of range: " + monthIndex);
    };
    CalendarSettings.monthsInYear = 12;
    CalendarSettings.daysInWeek = 7;
    CalendarSettings.firstDayOfWeek = Enums.DayOfWeek.Sunday;
    CalendarSettings.longDayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    CalendarSettings.shortDayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    CalendarSettings.minimalDayNames = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    CalendarSettings.longMonthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    CalendarSettings.shortMonthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    return CalendarSettings;
}());
exports.CalendarSettings = CalendarSettings;
function daysInMonth(year, month) {
    switch (month) {
        case 1:
            return (year % 4 == 0 && year % 100) || year % 400 == 0 ? 29 : 28;
        case 3:
        case 5:
        case 8:
        case 10:
            return 30;
        default:
            return 31;
    }
}
exports.daysInMonth = daysInMonth;
function addDays(date, days) {
    var result = new Date(date.getTime());
    result.setDate(result.getDate() + days);
    return result;
}
exports.addDays = addDays;
function addMonths(date, months) {
    var result = new Date(date.getTime());
    var newMonth = result.getMonth() + months;
    result.setMonth(newMonth);
    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
    // Loop until we back up to a day the new month has.
    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
    if (result.getMonth() !== ((newMonth % CalendarSettings.monthsInYear) + CalendarSettings.monthsInYear) % CalendarSettings.monthsInYear) {
        result = addDays(result, -result.getDate());
    }
    return result;
}
exports.addMonths = addMonths;
function areDatesEqual(date1, date2) {
    return date1.getFullYear() == date2.getFullYear() &&
        date1.getMonth() == date2.getMonth() &&
        date1.getDate() == date2.getDate();
}
exports.areDatesEqual = areDatesEqual;
function getScrollX() {
    return window.pageXOffset;
}
exports.getScrollX = getScrollX;
function getScrollY() {
    return window.pageYOffset;
}
exports.getScrollY = getScrollY;
function getAttributeValueAsBool(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        return attribute.value === "true";
    }
    return defaultValue;
}
exports.getAttributeValueAsBool = getAttributeValueAsBool;
function getAttributeValueAsString(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        return attribute.value;
    }
    return defaultValue;
}
exports.getAttributeValueAsString = getAttributeValueAsString;
function getAttributeValueAsInt(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        var n = parseInt(attribute.value);
        if (!isNaN(n)) {
            return n;
        }
    }
    return defaultValue;
}
exports.getAttributeValueAsInt = getAttributeValueAsInt;
function clearElement(element) {
    var _a, _b;
    var trustedHtml = (typeof window === 'undefined') ? "" : ((_b = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.emptyHTML) !== null && _b !== void 0 ? _b : "");
    element.innerHTML = trustedHtml;
}
exports.clearElement = clearElement;


/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/index.js":
/*!******************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v1": () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "v3": () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "v4": () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "v5": () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "NIL": () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "version": () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "validate": () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "stringify": () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "parse": () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "../node_modules/uuid/dist/esm-browser/v1.js");
/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "../node_modules/uuid/dist/esm-browser/v3.js");
/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "../node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "../node_modules/uuid/dist/esm-browser/v5.js");
/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "../node_modules/uuid/dist/esm-browser/nil.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "../node_modules/uuid/dist/esm-browser/version.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/esm-browser/parse.js");










/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/md5.js":
/*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/md5.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/nil.js":
/*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/nil.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/parse.js":
/*!******************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/parse.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/regex.js":
/*!******************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/regex.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/rng.js":
/*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/rng.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/sha1.js":
/*!*****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/sha1.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/stringify.js":
/*!**********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/stringify.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v1.js":
/*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v1.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v3.js":
/*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v3.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "../node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "../node_modules/uuid/dist/esm-browser/md5.js");


var v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v35.js":
/*!****************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v35.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DNS": () => (/* binding */ DNS),
/* harmony export */   "URL": () => (/* binding */ URL),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v4.js":
/*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v4.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/v5.js":
/*!***************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/v5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "../node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "../node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/validate.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/validate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "../node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "../node_modules/uuid/dist/esm-browser/version.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/esm-browser/version.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/adaptivecards-controls.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,