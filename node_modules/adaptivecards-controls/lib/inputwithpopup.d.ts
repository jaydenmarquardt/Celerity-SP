import { InputControl } from "./inputcontrol";
export declare abstract class PopupControl {
    private _isOpen;
    private _overlayElement;
    private _popupElement;
    protected abstract renderContent(): HTMLElement;
    onClose: (popupControl: PopupControl, wasCancelled: boolean) => void;
    keyDown(e: KeyboardEvent): void;
    render(rootElementBounds: ClientRect): HTMLElement;
    focus(): void;
    popup(rootElement: HTMLElement): void;
    closePopup(wasCancelled: boolean): void;
    get isOpen(): boolean;
}
export declare abstract class InputWithPopup<TPopupControl extends PopupControl, TValue> extends InputControl {
    private _labelElement;
    private _dropDownButtonElement;
    private _popupControl;
    private _placeholderText;
    private _value;
    private _isEnabled;
    protected keyDown(e: KeyboardEvent): void;
    private updateLabel;
    private updateLayout;
    protected get popupControl(): TPopupControl;
    protected abstract createPopupControl(): TPopupControl;
    protected abstract getCssClassName(): string;
    protected getButtonIconCssClassName(): string;
    protected getValueAsString(): string;
    protected valueChanged(): void;
    onValueChanged: (sender: InputControl) => void;
    attach(rootElement: HTMLElement): void;
    popup(): void;
    closePopup(wasCancelled: boolean): void;
    get labelId(): string;
    get isOpen(): boolean;
    get placeholderText(): string;
    set placeholderText(value: string);
    get value(): TValue;
    set value(newValue: TValue);
    set isEnabled(value: boolean);
}
