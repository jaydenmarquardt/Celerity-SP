"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var ApplicationManager_1 = tslib_1.__importDefault(require("../ApplicationManager"));
var Killswitches_1 = require("../common/Killswitches");
var ApplicationCustomizerLoader_1 = tslib_1.__importDefault(require("../extensibility/ApplicationCustomizerLoader"));
var SearchQueryManager_1 = tslib_1.__importDefault(require("../extensibility/SearchQueryManager"));
var Navigator_1 = tslib_1.__importDefault(require("./Navigator"));
var CLASSIC_PAGES_COMPONENT_ID = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
var WORKBENCH_COMPONENT_ID = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
var SP_HOME_COMPONENT_ID = '1f019ae1-2de1-4f44-b723-00a6ec1d7445';
var SP_LIST_HOST_COMPONENT_ID = '9f012051-e030-4487-9eb7-3365d03be182';
var SP_VIVA_HOME_COMPONENT_ID = 'eb765a5a-9fec-4d59-8cca-6c623b450f0a';
var LOG_SOURCE = sp_diagnostics_1._LogSource.create('NavigationOrchestrator');
var MAX_SUPPORTED_APPS_IN_SESSION = 15;
/**
 * It orchestrates all different steps to navigate to an SPFx application.
 *
 * This includes updating the Page Context, loading the application customizers, initializing the application, etc.
 */
var NavigationOrchestrator = /** @class */ (function () {
    /**
     * Creates a NavigationOrchestrator.
     *
     * @param serviceScope - Root service scope
     * @param applicationManager - Depending on the bootstrapping sequence, application manager is
     *                             injected or created inside.
     */
    function NavigationOrchestrator(serviceScope, applicationManager, navigator) {
        this._numAppsInitializedInSession = 0;
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._applicationManager = applicationManager || new ApplicationManager_1.default(serviceScope, navigator);
        this._pageContext = serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
        this._searchQueryManager = serviceScope.consume(SearchQueryManager_1.default.serviceKey);
        this._applicationCustomizerLoader = new ApplicationCustomizerLoader_1.default(serviceScope);
    }
    /**
     * Does all the operation to navigate to a new preloaded data.
     *
     * @remarks
     * It assumes the preloaded data has already been validated. Not null, with a spPageContextInfo and an application id.
     */
    NavigationOrchestrator.prototype.navigate = function (preloadedData) {
        var _this = this;
        var _a;
        var currentAppId = this._applicationManager.currentApplicationId;
        var appLoaded = !currentAppId.equals(sp_core_library_1.Guid.empty);
        var isSameApp = currentAppId.equals(sp_core_library_1.Guid.tryParse(preloadedData.clientSideApplicationId) || sp_core_library_1.Guid.empty);
        /**
         * Safe net for navigations to doclib/list:
         * If the former and current app are sp-list-host, then it means that we
         * are probably entering into an infinite loop of ListHost.aspx.
         * In such a case, throw an error, and do a full-page load.
         */
        if (isSameApp && appLoaded && currentAppId.equals(sp_core_library_1.Guid.tryParse(SP_LIST_HOST_COMPONENT_ID))) {
            var qosMonitor = new sp_telemetry_1._QosMonitor('ListHostBlankPage');
            qosMonitor.writeSuccess();
            throw new Error('SP-List-Host App: Navigation within the listhost app is not supported.');
        }
        var isAppIdSameOrEmpty = isSameApp || !appLoaded;
        var unsupportedReason = this._isNavigationSupportedWithReason(preloadedData, this._pageContext, isAppIdSameOrEmpty);
        if (unsupportedReason !== undefined) {
            return Promise.resolve({
                preloadedData: preloadedData,
                application: undefined,
                operation: 'Unsupported',
                unsupportedReason: unsupportedReason
            });
        }
        Navigator_1.default.clearNavigatedEventQueue();
        this._fixPreloadedDataItem(preloadedData);
        var isCrossSite = this._isCrossSite(preloadedData, this._pageContext);
        // TODO: demyren: VSO:428542 - clean up when moving to new PageContext
        var pageContextData = sp_page_context_1.SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo);
        if (pageContextData.listItem) {
            pageContextData.listItem.uniqueId = (_a = preloadedData.item) === null || _a === void 0 ? void 0 : _a.UniqueId;
        }
        this._pageContext.initialize(pageContextData, preloadedData.spPageContextInfo);
        if (window['__spfxMark']) {
            sp_loader_1._ManifestStore.instance.registerManifests(preloadedData.manifests, false);
        }
        else {
            sp_loader_1._ManifestStore.instance.replaceManifests(preloadedData.manifests);
        }
        if (isCrossSite &&
            !ApplicationManager_1.default._isChromelessApplication(preloadedData.clientSideApplicationId) &&
            appLoaded &&
            isSameApp) {
            void this._applicationManager.currentApplication._loadTheme();
        }
        this._updateTelemetry(preloadedData);
        // Discouraging application developers to use spPageContextInfo and instead to use the Page Context API.
        preloadedData.spPageContextInfo = undefined;
        sp_core_library_1.Session._changePage();
        if (preloadedData.clientSideApplicationId) {
            sp_core_library_1.Session._setClientSideApplicationId(preloadedData.clientSideApplicationId);
        }
        if (SP_LIST_HOST_COMPONENT_ID !== preloadedData.clientSideApplicationId) {
            Navigator_1.default.raiseNavigatedEvent();
        }
        // If it's the same application, just return with the result.
        if (isSameApp) {
            void this._initializeSearchQueryAsync(preloadedData);
            // The application doesn't change, but the preloaded data has. We need to re-load the app customizers.
            // There is an already loaded application, so there is no need to initialize any chromes before the app customizers are re-loaded
            void this._loadApplicationCustomizersAsync(preloadedData);
            return Promise.resolve({
                preloadedData: preloadedData,
                application: this._applicationManager.currentApplication,
                operation: 'UpdateContext',
                isXSite: isCrossSite
            });
        }
        sp_telemetry_1._PerformanceLogger.markCrossAppNavigationStart();
        return this._applicationManager.startApplication(preloadedData).then(function (application) {
            _this._numAppsInitializedInSession++;
            void _this._initializeSearchQueryAsync(preloadedData);
            // Load app customizers after the application has rendered to )ensure placeholders have been set up.
            void _this._loadApplicationCustomizersAsync(preloadedData);
            if (SP_LIST_HOST_COMPONENT_ID === preloadedData.clientSideApplicationId) {
                window.moduleLoaderPromise = Promise.resolve(application);
            }
            return Promise.resolve({
                preloadedData: preloadedData,
                application: application,
                operation: 'LoadApplication',
                isXSite: isCrossSite
            });
        });
    };
    /**
     * Loads the application customizers for the current page.
     * @param preloadedData - Preloaded data for the current page.
     *
     * @internal
     */
    NavigationOrchestrator.prototype._loadApplicationCustomizersAsync = function (preloadedData) {
        if (this._appSupportsExtensions(preloadedData)) {
            sp_diagnostics_1._TraceLogger.logVerbose(LOG_SOURCE, 'Loading application customizers');
            return this._applicationCustomizerLoader.loadExtensions(preloadedData.customActions);
        }
        else {
            sp_diagnostics_1._TraceLogger.logVerbose(LOG_SOURCE, 'Application Customizer is not supported for classic pages and workbench.');
            return Promise.resolve();
        }
    };
    /**
     * Disposes application customizers on the current page.
     * Can be called to immediately remove all application customizers from the page.
     *
     * @internal
     */
    NavigationOrchestrator.prototype._disposeApplicationCustomizers = function () {
        this._applicationCustomizerLoader.disposeExtensions();
    };
    /**
     * Every time the URL gets updated (and there is a navigation) the search query needs to be updated
     * in the page context.
     * It's done in an async way to include loading SearchQueryModifier extensions when necessary.
     *
     * Setting up the search query is disabled for applications that don't have this scenario.
     * If that situation changes (like SPHome supporting search scenario) the check will need to be revisited.
     */
    NavigationOrchestrator.prototype._initializeSearchQueryAsync = function (preloadedData) {
        var _this = this;
        if (preloadedData.clientSideApplicationId !== CLASSIC_PAGES_COMPONENT_ID &&
            preloadedData.clientSideApplicationId !== WORKBENCH_COMPONENT_ID &&
            preloadedData.clientSideApplicationId !== SP_HOME_COMPONENT_ID &&
            (Killswitches_1.Killswitches.isVivaHomeDisableSearchQueryKSActivated() ||
                preloadedData.clientSideApplicationId !== SP_VIVA_HOME_COMPONENT_ID)) {
            return this._searchQueryManager
                .initialize(preloadedData, function (serviceScope, searchQuery) {
                if (_this._applicationManager.currentApplicationId !== sp_core_library_1.Guid.empty) {
                    var pageChromeProvider = _this._applicationManager.currentApplication._getPageChromeProvider();
                    pageChromeProvider === null || pageChromeProvider === void 0 ? void 0 : pageChromeProvider.updateSearchBoxText(serviceScope, searchQuery);
                }
            })
                .then(function () { return _this._searchQueryManager.getSearchData(); })
                .then(function (searchData) {
                if (sp_core_library_1._SPFlight.isEnabled(1534 /*CSISpoScopeControl*/) ||
                    sp_core_library_1._SPExperiment.getVariantAndLogExposure(90097 /*CSISpoScopeControlExperiment*/) === 1) {
                    _this._pageContext._setSearchData(searchData);
                }
                else {
                    _this._pageContext._setSearchQuery(searchData.searchQuery);
                }
            });
        }
        return Promise.resolve();
    };
    NavigationOrchestrator.prototype._appSupportsExtensions = function (preloadedData) {
        if (preloadedData.clientSideApplicationId !== CLASSIC_PAGES_COMPONENT_ID &&
            (Killswitches_1.Killswitches.isVivaHomeDisableExtensionsKSActivated() ||
                preloadedData.clientSideApplicationId !== SP_VIVA_HOME_COMPONENT_ID)) {
            return true;
        }
        return false;
    };
    NavigationOrchestrator.prototype._updateTelemetry = function (preloadedData) {
        var _a, _b, _c;
        // This will eventually be removed when the migration to Diagnostics is complete
        var manifestAlias = preloadedData && preloadedData.manifests && preloadedData.manifests.length > 0
            ? preloadedData.manifests[0].alias
            : '';
        if (!(0, Killswitches_1.isOverrideWorkloadKSActivated)() &&
            manifestAlias &&
            preloadedData.manifests[0].experimentalData &&
            preloadedData.manifests[0].experimentalData[sp_loader_1._INCLUDE_APP_WORKLOAD]) {
            try {
                var locationUrl = new URL(window.location.href);
                if (locationUrl.searchParams.get(sp_loader_1._APP_WORKLOAD_QSP)) {
                    manifestAlias += '-' + locationUrl.searchParams.get(sp_loader_1._APP_WORKLOAD_QSP);
                }
            }
            catch (_d) {
                // No-op as workload should be left as the default value
            }
        }
        var _e = this._pageContext.legacyPageContext, isHubSite = _e.isHubSite, webTemplate = _e.webTemplate, hubSiteId = _e.hubSiteId, isEduClass = _e.isEduClass;
        var pageType;
        var promotedState;
        var pageId;
        if (preloadedData && preloadedData.item) {
            // eslint-disable-next-line dot-notation
            pageType = preloadedData.item['PageLayoutType'];
            // eslint-disable-next-line dot-notation
            promotedState = preloadedData.item['PromotedState'];
            pageId = preloadedData.item.UniqueId;
        }
        else if (!Killswitches_1.Killswitches.isPageTypeForLayoutsKSActivated()) {
            // Update page type if going to a system _layouts page or cross-app otherwise
            var layoutsPrefix = '/_layouts/15/';
            var href = window.location.href;
            var normalizedPath = href.toLowerCase();
            var layoutsIndex = normalizedPath.indexOf(layoutsPrefix);
            var nextAppType = void 0;
            if (layoutsIndex > -1) {
                var aspxSuffix = '.aspx';
                var nameEndIndex = normalizedPath.indexOf(aspxSuffix);
                var systemPageName = href.substring(layoutsIndex + layoutsPrefix.length, nameEndIndex > -1 ? nameEndIndex : undefined);
                nextAppType = "SystemLayouts_".concat(systemPageName);
            }
            else {
                nextAppType = "CrossApp";
            }
            // Not adding to enum as these are not actual SpPage types but
            // represent cross-app navigation.
            pageType = nextAppType;
        }
        var contextInfo = {
            pageId: pageId,
            isHubSite: isHubSite,
            webTemplate: webTemplate,
            pageType: pageType,
            promotedState: promotedState,
            hubSiteId: isHubSite ? hubSiteId : undefined,
            isEduClass: !Killswitches_1.Killswitches.isAddEduClassToEngagementKSActivated() ? isEduClass : undefined
        };
        var workloadName = !Killswitches_1.Killswitches.isChangeWorkloadForTeamsWorkBenchKSActivated() &&
            window.location.href.indexOf('/_layouts/15/TeamsWorkBench.aspx') > -1
            ? 'TeamsWorkBench'
            : manifestAlias;
        sp_telemetry_1._Telemetry.updateSettings({
            siteId: this._pageContext.site.id.toString(),
            webId: this._pageContext.web.id.toString(),
            listId: ((_a = this._pageContext.list) === null || _a === void 0 ? void 0 : _a.id.toString()) || '',
            correlationId: this._pageContext.site.correlationId.toString(),
            clientSideApplicationId: preloadedData.clientSideApplicationId,
            experimentData: !(0, Killswitches_1.isUpdateExperimentContextOnFastNavKSActive)()
                ? this._pageContext.legacyPageContext.experimentData
                : undefined,
            experimentDataLookup: !(0, Killswitches_1.isUpdateExperimentContextOnFastNavKSActive)()
                ? this._pageContext.legacyPageContext.experimentDataLookup
                : undefined
        }, this._pageContext.legacyPageContext, workloadName);
        sp_diagnostics_1._Diagnostics.updateSettings({
            siteId: this._pageContext.site.id.toString(),
            webId: this._pageContext.web.id.toString(),
            listId: ((_b = this._pageContext.list) === null || _b === void 0 ? void 0 : _b.id.toString()) || '',
            listItemUniqueId: ((_c = this._pageContext.listItem) === null || _c === void 0 ? void 0 : _c.id.toString()) || '',
            correlationId: this._pageContext.site.correlationId.toString(),
            contextInfo: contextInfo
        });
    };
    /**
     * Returns true if a navigator from the page context to the new preloaded data is a cross-site navigation.
     * This operation needs to happen before updating the page context with the new preloaded data.
     */
    NavigationOrchestrator.prototype._isCrossSite = function (preloadedData, pageContext) {
        if (!pageContext.isInitialized) {
            // This happens in the first load.
            return false;
        }
        return (!sp_core_library_1.Guid.parse(preloadedData.spPageContextInfo.webId).equals(pageContext.web.id) ||
            !sp_core_library_1.Guid.parse(preloadedData.spPageContextInfo.siteId).equals(pageContext.site.id));
    };
    NavigationOrchestrator.prototype._fixPreloadedDataItem = function (preloadedData) {
        var INVALID_PAGE_ITEM_ID = -1;
        // Use the preloadedData's item id if the spPageContextInfo item id is unavailable
        // The workbench can provide a list item via query string which will not be reflected in the
        // spPageContextInfo variable.
        if (preloadedData.spPageContextInfo.pageItemId === INVALID_PAGE_ITEM_ID &&
            preloadedData.item &&
            preloadedData.item.ID !== INVALID_PAGE_ITEM_ID) {
            preloadedData.spPageContextInfo.pageItemId = preloadedData.item.ID;
        }
        return preloadedData;
    };
    /**
     * Determines whether inplace navigation is supported.
     *
     * @param preloadedData - Application preloaded data
     * @param pageContext - Application context
     * @param isSameAppId - Whether the navigation is happening within the same app
     *
     * @returns True if navigation is supported else false
     */
    NavigationOrchestrator.prototype._isNavigationSupportedWithReason = function (preloadedData, pageContext, isSameAppId) {
        var isDifferentLocale = pageContext.isInitialized &&
            pageContext.cultureInfo.currentUICultureName !== preloadedData.spPageContextInfo.currentUICultureName;
        // Navigation is supported if the target locale is the same and the target application id is same as current
        // application Id or the number of in-place navigations are within the threshold.
        if (isDifferentLocale) {
            return 'LocaleChange';
        }
        if (!isSameAppId && this._numAppsInitializedInSession > MAX_SUPPORTED_APPS_IN_SESSION) {
            return 'TransitionsExceeded';
        }
        return undefined;
    };
    return NavigationOrchestrator;
}());
exports.default = NavigationOrchestrator;
//# sourceMappingURL=NavigationOrchestrator.js.map