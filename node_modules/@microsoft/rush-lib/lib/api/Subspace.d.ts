import type { RushConfiguration } from './RushConfiguration';
import type { RushConfigurationProject } from './RushConfigurationProject';
import { CommonVersionsConfiguration } from './CommonVersionsConfiguration';
import { RepoStateFile } from '../logic/RepoStateFile';
/**
 * @internal
 */
export interface ISubspaceOptions {
    subspaceName: string;
    rushConfiguration: RushConfiguration;
    splitWorkspaceCompatibility: boolean;
}
/**
 * This represents the subspace configurations for a repository, based on the "subspaces.json"
 * configuration file.
 * @public
 */
export declare class Subspace {
    readonly subspaceName: string;
    private readonly _rushConfiguration;
    private readonly _projects;
    private readonly _splitWorkspaceCompatibility;
    private _commonVersionsConfiguration;
    private _detail;
    constructor(options: ISubspaceOptions);
    /**
     * Returns the list of projects belonging to this subspace.
     * @beta
     */
    getProjects(): RushConfigurationProject[];
    private _ensureDetail;
    /**
     * Returns the full path of the folder containing this subspace's configuration files such as `pnpm-lock.yaml`.
     *
     * Example: `common/config/subspaces/my-subspace`
     * @beta
     */
    getSubspaceConfigFolder(): string;
    /**
     * The folder where the subspace's node_modules and other temporary files will be stored.
     *
     * Example: `common/temp/subspaces/my-subspace`
     * @beta
     */
    getSubspaceTempFolder(): string;
    /**
     * Returns full path of the temporary shrinkwrap file for a specific subspace and returns the common workspace
     * shrinkwrap if no subspaceName is provided.
     * @remarks
     * This function takes the subspace name, and returns the full path for the subspace's shrinkwrap file.
     * This function also consults the deprecated option to allow for shrinkwraps to be stored under a package folder.
     * This shrinkwrap file is used during "rush install", and may be rewritten by the package manager during installation
     * This property merely reports the filename, the file itself may not actually exist.
     * example: `C:\MyRepo\common\<subspace_name>\pnpm-lock.yaml`
     * @beta
     */
    getTempShrinkwrapFilename(): string;
    /**
     * The full path of a backup copy of tempShrinkwrapFilename. This backup copy is made
     * before installation begins, and can be compared to determine how the package manager
     * modified tempShrinkwrapFilename.
     * @remarks
     * This property merely reports the filename; the file itself may not actually exist.
     * Example: `C:\MyRepo\common\temp\npm-shrinkwrap-preinstall.json`
     * or `C:\MyRepo\common\temp\pnpm-lock-preinstall.yaml`
     * @beta
     */
    getTempShrinkwrapPreinstallFilename(subspaceName?: string | undefined): string;
    /**
     * Gets the path to the common-versions.json config file for this subspace.
     *
     * Example: `C:\MyRepo\common\subspaces\my-subspace\common-versions.json`
     * @beta
     */
    getCommonVersionsFilePath(): string;
    /**
     * Gets the settings from the common-versions.json config file.
     * @beta
     */
    getCommonVersions(): CommonVersionsConfiguration;
    /**
     * Gets the path to the repo-state.json file.
     * @beta
     */
    getRepoStateFilePath(): string;
    /**
     * Gets the contents from the repo-state.json file.
     * @param subspaceName - The name of the subspace in use by the active command.
     * @beta
     */
    getRepoState(): RepoStateFile;
    /**
     * Gets the committed shrinkwrap file name.
     * @beta
     */
    getCommittedShrinkwrapFilename(): string;
    /**
     * Gets the absolute path for "pnpmfile.js" for a specific subspace.
     * @param subspace - The name of the current subspace in use by the active command.
     * @remarks
     * The file path is returned even if PNPM is not configured as the package manager.
     * @beta
     */
    getPnpmfilePath(): string;
    /**
     * Returns true if the specified project belongs to this subspace.
     * @beta
     */
    contains(project: RushConfigurationProject): boolean;
    /** @internal */
    _addProject(project: RushConfigurationProject): void;
}
//# sourceMappingURL=Subspace.d.ts.map