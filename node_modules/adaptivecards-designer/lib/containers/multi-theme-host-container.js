"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiThemeHostContainer = exports.ColorTheme = void 0;
var Adaptive = require("adaptivecards");
var host_container_1 = require("./host-container");
var ColorTheme;
(function (ColorTheme) {
    ColorTheme["Light"] = "Light";
    ColorTheme["Dark"] = "Dark";
})(ColorTheme = exports.ColorTheme || (exports.ColorTheme = {}));
var MultiThemeHostContainer = /** @class */ (function (_super) {
    __extends(MultiThemeHostContainer, _super);
    function MultiThemeHostContainer(name, cssFileName, hostConfigLight, hostConfigDark, lightBackground, darkBackground) {
        var _this = _super.call(this, name) || this;
        _this._colorTheme = ColorTheme.Light;
        _this._cssFileName = cssFileName;
        _this._hostConfigLight = hostConfigLight;
        _this._hostConfigDark = hostConfigDark;
        _this._lightBackground = lightBackground;
        _this._darkBackground = darkBackground;
        return _this;
    }
    MultiThemeHostContainer.prototype.getCurrentStyleSheet = function () {
        return "containers/" + this._cssFileName + "-" + this._colorTheme.toLowerCase() + ".css";
    };
    MultiThemeHostContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(this._colorTheme === ColorTheme.Light ? this._hostConfigLight : this._hostConfigDark);
    };
    MultiThemeHostContainer.prototype.getBackgroundColor = function () {
        return this._colorTheme === ColorTheme.Light ? this._lightBackground : this._darkBackground;
    };
    Object.defineProperty(MultiThemeHostContainer.prototype, "colorTheme", {
        set: function (value) {
            this._colorTheme = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultiThemeHostContainer.prototype, "supportsMultipleThemes", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    return MultiThemeHostContainer;
}(host_container_1.HostContainer));
exports.MultiThemeHostContainer = MultiThemeHostContainer;
//# sourceMappingURL=multi-theme-host-container.js.map