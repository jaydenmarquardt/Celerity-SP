"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetContainer = exports.ContainerSize = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = require("adaptivecards");
var multi_theme_host_container_1 = require("../multi-theme-host-container");
var hostConfigLight = require("../../hostConfigs/widget-light.json");
var hostConfigDark = require("../../hostConfigs/widget-dark.json");
var ContainerSize;
(function (ContainerSize) {
    ContainerSize["Small"] = "Small";
    ContainerSize["Medium"] = "Medium";
    ContainerSize["Large"] = "Large";
})(ContainerSize = exports.ContainerSize || (exports.ContainerSize = {}));
var WidgetContainer = /** @class */ (function (_super) {
    __extends(WidgetContainer, _super);
    function WidgetContainer(size) {
        var _this = _super.call(this, "Widgets Board", "widget-container", hostConfigLight, hostConfigDark, "#D2D2D2", "#616161") || this;
        _this._containerSize = size;
        return _this;
    }
    WidgetContainer.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        Adaptive.GlobalSettings.removePaddingFromContainersWithBackgroundImage = true;
    };
    WidgetContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.remove("widget-small-card", "widget-medium-card", "widget-large-card");
        this.cardHost.classList.add("widget-" + this._containerSize.toLowerCase() + "-card");
        this._outerFrame = document.createElement("div");
        this._outerFrame.classList.add("widget-outer-container");
        this._outerFrame.classList.add("widget-" + this._containerSize.toLowerCase() + "-container");
        var header = document.createElement("div");
        header.className = "widget-header";
        this._outerFrame.appendChild(header);
        var headerText = document.createElement("p");
        headerText.className = "widget-header-text";
        headerText.textContent = "Widget Header";
        header.appendChild(headerText);
        var moreButton = document.createElement("div");
        moreButton.className = "widget-header-more-button";
        moreButton.setAttribute("role", "button");
        moreButton.tabIndex = 0;
        header.appendChild(moreButton);
        var innerFrame = document.createElement("div");
        innerFrame.className = "widget-inner-container";
        innerFrame.appendChild(this.cardHost);
        this._outerFrame.appendChild(innerFrame);
        hostElement.appendChild(this._outerFrame);
    };
    WidgetContainer.prototype.requiresOverflowStyling = function () {
        var renderedCard = document.getElementsByClassName("ac-adaptiveCard")[0];
        var cardHeight = renderedCard.getBoundingClientRect().height;
        var widgetHeight = this.cardHost.getBoundingClientRect().height;
        if (cardHeight > widgetHeight) {
            this.applyWidgetOverflowStyling(renderedCard);
            return true;
        }
        return false;
    };
    WidgetContainer.prototype.applyWidgetOverflowStyling = function (renderedCard) {
        renderedCard.style.height = "100%";
        var cardElementsWrapper = this.addCardElementsWrapper(renderedCard);
        cardElementsWrapper.classList.add("no-overflow");
        var carouselElements = renderedCard.getElementsByClassName("ac-carousel-container");
        for (var i = 0; i < carouselElements.length; i++) {
            var currentCarousel = carouselElements[i];
            var carouselRect = currentCarousel.getBoundingClientRect();
            var wrapperRect = cardElementsWrapper.getBoundingClientRect();
            // pagination will be in the bottom 16px of a carousel
            var paginationTop = carouselRect.bottom - 16;
            var paginationBottom = carouselRect.bottom;
            var paginationOverlapsBoundary = ((paginationBottom >= wrapperRect.bottom) && (paginationBottom < (wrapperRect.bottom + WidgetContainer.widgetPadding)) ||
                (paginationTop >= wrapperRect.bottom) && (paginationTop < (wrapperRect.bottom + WidgetContainer.widgetPadding)));
            if (paginationOverlapsBoundary) {
                // Hide overflow on the cardElement instead of the wrapper since pagination dots are in the margin
                renderedCard.classList.add("no-overflow");
                cardElementsWrapper.classList.remove("no-overflow");
                // Add the padding to the carousel if the pagination dots are in the margin
                currentCarousel.style.marginBottom = WidgetContainer.widgetPadding + "px";
                break;
            }
        }
    };
    WidgetContainer.prototype.addCardElementsWrapper = function (parentElement) {
        var cardElementsWrapper = document.createElement("div");
        cardElementsWrapper.classList.add("ac-card-elements-wrapper");
        Array.from(parentElement.children).forEach(function (child) {
            cardElementsWrapper.appendChild(child);
        });
        parentElement.appendChild(cardElementsWrapper);
        return cardElementsWrapper;
    };
    WidgetContainer.prototype.adjustStyleForBackground = function () {
        this._outerFrame.classList.remove("widget-small-container-no-border", "widget-medium-container-no-border", "widget-large-container-no-border");
        var renderedCard = document.getElementsByClassName("ac-adaptiveCard")[0];
        if (renderedCard.style.backgroundImage) {
            // If there is a background image present, we should remove the border
            this._outerFrame.classList.add("widget-" + this._containerSize.toLowerCase() + "-container-no-border");
        }
    };
    Object.defineProperty(WidgetContainer.prototype, "targetVersion", {
        get: function () {
            return Adaptive.Versions.v1_6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WidgetContainer.prototype, "isFixedHeight", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WidgetContainer.prototype, "containerSize", {
        set: function (value) {
            this._containerSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WidgetContainer.prototype, "supportsMultipleSizes", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WidgetContainer, "supportedContainerSizes", {
        get: function () {
            return Object.values(ContainerSize);
        },
        enumerable: false,
        configurable: true
    });
    WidgetContainer.widgetPadding = 16;
    return WidgetContainer;
}(multi_theme_host_container_1.MultiThemeHostContainer));
exports.WidgetContainer = WidgetContainer;
//# sourceMappingURL=widget-container.js.map