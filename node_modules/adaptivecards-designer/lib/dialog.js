"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = exports.DialogButton = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var adaptivecards_controls_1 = require("adaptivecards-controls");
var DialogButton = /** @class */ (function () {
    function DialogButton(caption) {
        this.caption = caption;
    }
    DialogButton.prototype.render = function () {
        var _this = this;
        var element = document.createElement("button");
        element.className = "acd-dialog-button";
        element.innerText = this.caption;
        element.onclick = function (e) {
            _this.clicked();
        };
        return element;
    };
    DialogButton.prototype.clicked = function () {
        if (this.onClick) {
            this.onClick(this);
        }
    };
    return DialogButton;
}());
exports.DialogButton = DialogButton;
var Dialog = /** @class */ (function () {
    function Dialog() {
        var _this = this;
        this._isOpen = false;
        this.onClose = null;
        // flag to prevent dialog close on overlay element click, default it's set to false, for Pi2Card it will be set to true
        this.preventLightDismissal = false;
        this.closeButton = new DialogButton("Close");
        this.closeButton.onClick = function (sender) {
            _this.close();
        };
    }
    Dialog.prototype.open = function () {
        var _this = this;
        var _a;
        if (!this._isOpen) {
            this._originalFocusedElement = document.activeElement;
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = "acd-dialog-overlay";
            this._overlayElement.onclick = function (e) {
                // clicks on the overlay window should dismiss the dialog
                if (!_this.preventLightDismissal) {
                    _this.close();
                }
            };
            var dialogFrameElement = document.createElement("div");
            dialogFrameElement.className = "acd-dialog-frame";
            dialogFrameElement.style.width = this.width;
            dialogFrameElement.style.height = this.height;
            dialogFrameElement.setAttribute("aria-modal", "true");
            dialogFrameElement.setAttribute("role", "dialog");
            dialogFrameElement.setAttribute("aria-labelledby", "acd-dialog-title-element");
            dialogFrameElement.tabIndex = -1;
            dialogFrameElement.onclick = function (e) {
                // disable click bubbling from the frame element -- otherwise it'll get to the overlay, closing the
                // dialog unexpectedly
                if (!_this.preventLightDismissal) {
                    e.cancelBubble = true;
                    return false;
                }
            };
            // keyboard navigation support
            dialogFrameElement.onkeydown = function (e) {
                switch (e.key) {
                    case adaptivecards_controls_1.Constants.keys.tab:
                        if (e.shiftKey && document.activeElement === _this._firstFocusableElement) {
                            // backwards tab on first element. set focus on last
                            e.preventDefault();
                            _this._lastFocusableElement.focus();
                        }
                        else if (!e.shiftKey && document.activeElement === _this._lastFocusableElement) {
                            // forward tab on last element
                            e.preventDefault();
                            _this._firstFocusableElement.focus();
                        }
                        break;
                    case adaptivecards_controls_1.Constants.keys.escape:
                        _this.close();
                        e.preventDefault();
                        e.cancelBubble = true;
                        break;
                }
                return !e.cancelBubble;
            };
            var titleBarElement = document.createElement("div");
            titleBarElement.className = "acd-dialog-title-host";
            var titleElement = document.createElement("div");
            titleElement.className = "acd-dialog-title";
            titleElement.id = "acd-dialog-title-element";
            titleElement.innerText = this.title;
            titleElement.setAttribute("role", "heading");
            titleElement.setAttribute("aria-level", "1");
            titleElement.tabIndex = -1;
            var xButton = document.createElement("button");
            xButton.className = "acd-icon acd-dialog-titleBar-button acd-icon-remove";
            xButton.title = "Close";
            xButton.onclick = function (e) { _this.close(); };
            titleBarElement.appendChild(titleElement);
            titleBarElement.appendChild(xButton);
            var contentElement = this.renderContent();
            contentElement.style.flex = "1 1 auto";
            var buttonBarElement = document.createElement("div");
            buttonBarElement.className = "acd-dialog-buttonBar";
            if (((_a = this.buttons) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                for (var _i = 0, _b = this.buttons; _i < _b.length; _i++) {
                    var button = _b[_i];
                    buttonBarElement.appendChild(button.render());
                }
            }
            buttonBarElement.appendChild(this.closeButton.render());
            dialogFrameElement.appendChild(titleBarElement);
            dialogFrameElement.appendChild(contentElement);
            dialogFrameElement.appendChild(buttonBarElement);
            this._overlayElement.appendChild(dialogFrameElement);
            document.body.appendChild(this._overlayElement);
            var focusableElements = dialogFrameElement.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]');
            this._firstFocusableElement = focusableElements[0];
            this._lastFocusableElement = focusableElements[focusableElements.length - 1];
            this._firstFocusableElement.focus();
            this._isOpen = true;
        }
    };
    Dialog.prototype.close = function () {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
            if (this.onClose) {
                this.onClose(this);
            }
            // Removing the focus action on close, it has been handled via onClose method of Dialog consume place.
            this._originalFocusedElement.focus();
            this._originalFocusedElement = null;
        }
    };
    return Dialog;
}());
exports.Dialog = Dialog;
//# sourceMappingURL=dialog.js.map