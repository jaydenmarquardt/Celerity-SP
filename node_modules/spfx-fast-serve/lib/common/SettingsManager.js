"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsManager = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const consts_1 = require("./consts");
const utils_1 = require("./utils");
class SettingsManager {
    static createSettings() {
        const argv = yargs_1.default(process.argv.slice(2)).options({
            port: { type: 'number' }
        }).argv;
        const cliArgs = {
            isLibraryComponent: !!argv['library-component']
        };
        if (argv.port) {
            cliArgs.port = argv.port;
        }
        let schemaUrl = consts_1.SchemaUrl;
        const spfxVersion = utils_1.getSpfxMinorVersion();
        if (spfxVersion === 4) {
            schemaUrl = consts_1.SchemaUrlOld;
        }
        const defaultSettings = {
            $schema: schemaUrl,
            cli: cliArgs
        };
        const settings = this.ensureSettings(defaultSettings);
        return settings;
    }
    static ensureSettings(defaultSettings) {
        const fastServeFolder = path.join(process.cwd(), consts_1.FastServeFolderName);
        if (!fs.existsSync(fastServeFolder)) {
            fs.mkdirSync(fastServeFolder);
        }
        const configPath = path.join(fastServeFolder, consts_1.ConfigFileName);
        if (!fs.existsSync(configPath)) {
            fs.writeFileSync(configPath, JSON.stringify(defaultSettings, null, 2));
            return defaultSettings;
        }
        const existingConfig = require(configPath);
        return existingConfig;
    }
}
exports.SettingsManager = SettingsManager;
//# sourceMappingURL=SettingsManager.js.map