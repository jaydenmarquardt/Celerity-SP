"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchPackageJson = void 0;
const fs = __importStar(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const detect_indent_1 = __importDefault(require("detect-indent"));
const Logger_1 = require("../common/Logger");
const utils_1 = require("../common/utils");
const BaseCommand_1 = require("./BaseCommand");
class PatchPackageJson extends BaseCommand_1.BaseCommand {
    execute({ cli: { isLibraryComponent } }) {
        const packagePath = path.join(process.cwd(), 'package.json');
        const packageString = fs.readFileSync(packagePath).toString();
        const indent = detect_indent_1.default(packageString).indent || '  ';
        const packageJson = JSON.parse(packageString);
        const minorVersion = utils_1.getSpfxMinorVersion();
        const templateDeps = {};
        if (minorVersion >= 4 && minorVersion < 9) {
            templateDeps['spfx-fast-serve-helpers'] = '~1.4.0';
        }
        else if (minorVersion >= 9 && minorVersion < 12) {
            templateDeps['spfx-fast-serve-helpers'] = '~1.11.0';
        }
        else if (minorVersion >= 12) {
            templateDeps['spfx-fast-serve-helpers'] = `~1.${minorVersion}.0`;
        }
        else {
            throw new Error(`Unsupported SPFx version: 1.${minorVersion}`);
        }
        if (utils_1.isBeta()) {
            templateDeps['spfx-fast-serve-helpers'] = `${templateDeps['spfx-fast-serve-helpers']}-beta.0`;
        }
        if (isLibraryComponent && minorVersion < 12) {
            templateDeps['concurrently'] = '5.3.0';
        }
        for (const dependency in templateDeps) {
            const version = templateDeps[dependency];
            if (packageJson.devDependencies[dependency] && packageJson.devDependencies[dependency] !== version) {
                Logger_1.logger.warning(chalk_1.default.yellowBright('Your dependency \'' + dependency + '\' version \'' + packageJson.devDependencies[dependency] + '\' will be replaced with version \'' + version + '\''));
            }
            packageJson.devDependencies[dependency] = version;
        }
        packageJson.scripts = packageJson.scripts || {};
        if (packageJson.scripts['serve']) {
            Logger_1.logger.warning(chalk_1.default.yellowBright('Your npm \'serve\' command will be replaced.'));
            Logger_1.logger.newLine();
        }
        if (isLibraryComponent && minorVersion < 12) {
            packageJson.scripts['serve'] = 'gulp bundle --custom-serve --max_old_space_size=4096 && concurrently -k "fast-serve" "npm run ts"';
            packageJson.scripts['ts'] = 'tsc -p tsconfig.json -w --preserveWatchOutput';
        }
        else {
            packageJson.scripts['serve'] = 'gulp bundle --custom-serve --max_old_space_size=4096 && fast-serve';
        }
        fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, indent));
        Logger_1.logger.success(chalk_1.default.blueBright('Updated package.json.'));
        Logger_1.logger.newLine();
    }
}
exports.PatchPackageJson = PatchPackageJson;
//# sourceMappingURL=PatchPackageJson.js.map