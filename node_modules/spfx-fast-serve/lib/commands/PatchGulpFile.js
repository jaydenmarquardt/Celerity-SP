"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchGulpFile = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const replace_in_file_1 = __importDefault(require("replace-in-file"));
const Logger_1 = require("../common/Logger");
const BaseCommand_1 = require("./BaseCommand");
const utils_1 = require("../common/utils");
class PatchGulpFile extends BaseCommand_1.BaseCommand {
    execute() {
        const gulpfilePath = path.join(process.cwd(), 'gulpfile.js');
        const currentGulpFile = fs.readFileSync(gulpfilePath).toString();
        if (currentGulpFile.indexOf('@microsoft/sp-webpart-workbench/lib/api') !== -1) {
            Logger_1.logger.success(chalk_1.default.blueBright('It looks like your gulpfile.js was patched before, skipping.'));
            Logger_1.logger.newLine();
            return;
        }
        if (currentGulpFile.indexOf('spfx-fast-serve-helpers') !== -1) {
            Logger_1.logger.success(chalk_1.default.blueBright('It looks like your gulpfile.js was patched before, skipping.'));
            Logger_1.logger.newLine();
            return;
        }
        if (currentGulpFile.indexOf('build.configureWebpack.mergeConfig') !== -1) {
            Logger_1.logger.warning(chalk_1.default.yellowBright('We detected that you use webpack\'s task \'mergeConfig\' feature in your gulpfile.js. Make sure that you applied corresponding changes in webpack.extend.js as well.'));
            Logger_1.logger.newLine();
            Logger_1.logger.log(chalk_1.default.yellowBright('Please read https://github.com/s-KaiNet/spfx-fast-serve#webpack-extensibility for details.'));
            Logger_1.logger.newLine();
        }
        const replaceContent = fs.readFileSync(utils_1.getTemplatesPath('gulpfile.js')).toString();
        const options = {
            files: gulpfilePath,
            from: /build\.initialize.*;/g,
            to: replaceContent,
        };
        replace_in_file_1.default.sync(options);
        Logger_1.logger.success(chalk_1.default.blueBright('Patched gulpfile.js.'));
        Logger_1.logger.newLine();
    }
}
exports.PatchGulpFile = PatchGulpFile;
//# sourceMappingURL=PatchGulpFile.js.map