"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchGitIgnoreFile = void 0;
const fs = __importStar(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const BaseCommand_1 = require("./BaseCommand");
const Logger_1 = require("../common/Logger");
class PatchGitIgnoreFile extends BaseCommand_1.BaseCommand {
    execute() {
        const gitIgnorePath = path.join(process.cwd(), '.gitignore');
        const lineToAdd = '*.scss.d.ts';
        if (!fs.existsSync(gitIgnorePath)) {
            Logger_1.logger.warning(chalk_1.default.yellowBright('.gitignore file is not found under ' + gitIgnorePath + '. Skipping the step.'));
            Logger_1.logger.warning(chalk_1.default.yellowBright('Manually add \'' + lineToAdd + '\' to your .gitignore'));
            Logger_1.logger.newLine();
            return;
        }
        const gitIgnorePathFile = fs.readFileSync(gitIgnorePath).toString();
        if (gitIgnorePathFile.indexOf(lineToAdd) !== -1) {
            Logger_1.logger.success(chalk_1.default.blueBright('It looks like .gitignore was patched before, skipping.'));
            Logger_1.logger.newLine();
            return;
        }
        fs.appendFileSync(gitIgnorePath, lineToAdd);
        Logger_1.logger.success(chalk_1.default.blueBright('Updated .gitignore.'));
        Logger_1.logger.newLine();
    }
}
exports.PatchGitIgnoreFile = PatchGitIgnoreFile;
//# sourceMappingURL=PatchGitIgnoreFile.js.map