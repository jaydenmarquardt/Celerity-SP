"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
const clean_css_1 = __importDefault(require("clean-css"));
const loader_utils_1 = require("loader-utils");
const schema_utils_1 = require("schema-utils");
const schema_json_1 = __importDefault(require("./schema.json"));
function parsePrevSourceMap(prevSourceMap) {
  if (prevSourceMap != null && typeof prevSourceMap === "object") {
    return JSON.stringify(prevSourceMap);
  }
  return undefined;
}
function getLoaderOptions(_that) {
  if (typeof loader_utils_1.getOptions === "function") {
    return (0, loader_utils_1.getOptions)(_that) || {};
  }
  if (typeof _that.getOptions === "function") {
    const rawOptions = _that.getOptions() || {};
    Object.keys(rawOptions).forEach((key) => {
      const value = rawOptions[key];
      if (["false", "true", "null"].includes(value)) {
        rawOptions[key] = JSON.parse(value);
      }
    });
    return rawOptions;
  }
  return {};
}
function cleanCssLoader(content, prevSourceMap, additionalData) {
  const callback = this.async();
  const loaderOptions = getLoaderOptions(this);
  (0, schema_utils_1.validate)(schema_json_1.default, loaderOptions, {
    name: "clean-css-loader",
  });
  const { sourceMap, disable, skipWarn, ...options } = loaderOptions;
  const useSourceMap = Boolean(sourceMap !== null && sourceMap !== void 0 ? sourceMap : this.sourceMap);
  if (disable) {
    return callback(null, content, prevSourceMap, additionalData);
  }
  new clean_css_1.default({
    ...options,
    returnPromise: true,
    sourceMap: useSourceMap,
  })
    .minify(content, parsePrevSourceMap(prevSourceMap))
    .then((output) => {
      if (!skipWarn && Array.isArray(output.warnings)) {
        output.warnings.forEach((warning) => {
          this.emitWarning(new Error(warning));
        });
      }
      let resultSourceMap;
      if (useSourceMap && output.sourceMap) {
        resultSourceMap = {
          ...JSON.parse(output.sourceMap.toString()),
          sources: (prevSourceMap === null || prevSourceMap === void 0 ? void 0 : prevSourceMap.sources) || [this.resourcePath],
          sourcesContent: (prevSourceMap === null || prevSourceMap === void 0 ? void 0 : prevSourceMap.sourcesContent) || [content.toString()],
        };
      }
      return callback(null, output.styles, resultSourceMap, additionalData);
    })
    .catch(callback);
}
module.exports = cleanCssLoader;
