{"version":3,"file":"pnpmSyncCopy.js","sourceRoot":"","sources":["../src/pnpmSyncCopy.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AACxB,4CAAoB;AAgBpB;;;;;;;;;;;;GAYG;AACI,KAAK,UAAU,iBAAiB,CAAC,EACtC,gBAAgB,GAAG,EAAE,EACrB,uBAAuB,EACvB,2BAA2B,EAC3B,YAAY,EACS;IACrB,IAAI,gBAAgB,KAAK,EAAE,EAAE,CAAC;QAC5B,mDAAmD;QACnD,qEAAqE;QACrE,gBAAgB,GAAG,8BAA8B,CAAC;IACpD,CAAC;IAED,IAAI,oBAA4B,CAAC;IACjC,IAAI,CAAC;QACH,oBAAoB,GAAG,CAAC,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnF,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,IAAK,CAA2B,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACnD,OAAO,CAAC,IAAI,CACV,+GAA+G,CAChH,CAAC;YACF,OAAO;QACT,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED,0BAA0B;IAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACtD,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,YAAY,CAAC,qBAAqB,CAAC;IAC3E,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IAEhE,kBAAkB;IAClB,MAAM,YAAY,GAAa,MAAM,uBAAuB,CAAC,UAAU,CAAC,CAAC;IAEzE,OAAO,CAAC,IAAI,CAAC,gBAAgB,UAAU,WAAW,YAAY,CAAC,MAAM,QAAQ,CAAC,CAAC;IAE/E,oCAAoC;IACpC,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;QACzC,MAAM,eAAe,GAAG,cAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;QAChF,MAAM,YAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,2BAA2B,CAC/B,YAAY,EACZ,KAAK,EAAE,WAAmB,EAAE,EAAE;QAC5B,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE,CAAC;YACzC,MAAM,eAAe,GAAG,cAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;YAEhF,MAAM,cAAc,GAAW,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAClE,MAAM,mBAAmB,GAAW,cAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAE5E,MAAM,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAEtD,6CAA6C;YAC7C,MAAM,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC,EACD;QACE,WAAW,EAAE,EAAE;KAChB,CACF,CAAC;IAEF,OAAO,CAAC,OAAO,CAAC,gBAAgB,UAAU,WAAW,YAAY,CAAC,MAAM,QAAQ,CAAC,CAAC;AACpF,CAAC;AA/DD,8CA+DC","sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\n/**\n * @beta\n */\nexport interface IPnpmSyncCopyOptions {\n  pnpmSyncJsonPath?: string;\n  getPackageIncludedFiles: (packagePath: string) => Promise<string[]>;\n  forEachAsyncWithConcurrency: <TItem>(\n    iterable: Iterable<TItem>,\n    callback: (item: TItem) => Promise<void>,\n    options: { concurrency: number }\n  ) => Promise<void>;\n  ensureFolder: (folderPath: string) => Promise<void>;\n}\n\n/**\n * For each library project that acts as an injected dependency of other consuming projects\n * within a PNPM workspace, this operation should be invoked whenever that library is rebuilt.\n * It will copy the latest build output into the `node_modules` installation folder.\n *\n * @remarks\n * This operation reads the `.npm-sync.json` file which should have been prepared after\n * `pnpm install` by calling the {@link pnpmSyncPrepareAsync} function.\n *\n * @param pnpmSyncJsonPath - optionally customizes the location of the `.pnpm-sync.json` file\n *\n * @beta\n */\nexport async function pnpmSyncCopyAsync({\n  pnpmSyncJsonPath = '',\n  getPackageIncludedFiles,\n  forEachAsyncWithConcurrency,\n  ensureFolder\n}: IPnpmSyncCopyOptions): Promise<void> {\n  if (pnpmSyncJsonPath === '') {\n    // if user does not input .pnpm-sync.json file path\n    // then we assume .pnpm-sync.json is always under node_modules folder\n    pnpmSyncJsonPath = 'node_modules/.pnpm-sync.json';\n  }\n\n  let pnpmSyncJsonContents: string;\n  try {\n    pnpmSyncJsonContents = (await fs.promises.readFile(pnpmSyncJsonPath)).toString();\n  } catch (e) {\n    if ((e as NodeJS.ErrnoException).code === 'ENOENT') {\n      console.warn(\n        'You are executing pnpm-sync for a package, but we can not find the .pnpm-sync.json inside node_modules folder'\n      );\n      return;\n    } else {\n      throw e;\n    }\n  }\n\n  //read the .pnpm-sync.json\n  const pnpmSyncJson = JSON.parse(pnpmSyncJsonContents);\n  const { sourceFolder, targetFolders } = pnpmSyncJson.postbuildInjectedCopy;\n  const sourcePath = path.resolve(pnpmSyncJsonPath, sourceFolder);\n\n  //get npmPackFiles\n  const npmPackFiles: string[] = await getPackageIncludedFiles(sourcePath);\n\n  console.time(`pnpm-sync => ${sourcePath}, total ${npmPackFiles.length} files`);\n\n  //clear the destination folder first\n  for (const targetFolder of targetFolders) {\n    const destinationPath = path.resolve(pnpmSyncJsonPath, targetFolder.folderPath);\n    await fs.promises.rm(destinationPath, { recursive: true, force: true });\n  }\n\n  await forEachAsyncWithConcurrency(\n    npmPackFiles,\n    async (npmPackFile: string) => {\n      for (const targetFolder of targetFolders) {\n        const destinationPath = path.resolve(pnpmSyncJsonPath, targetFolder.folderPath);\n\n        const copySourcePath: string = path.join(sourcePath, npmPackFile);\n        const copyDestinationPath: string = path.join(destinationPath, npmPackFile);\n\n        await ensureFolder(path.dirname(copyDestinationPath));\n\n        // create a hard link to the destination path\n        await fs.promises.link(copySourcePath, copyDestinationPath);\n      }\n    },\n    {\n      concurrency: 10\n    }\n  );\n\n  console.timeEnd(`pnpm-sync => ${sourcePath}, total ${npmPackFiles.length} files`);\n}\n"]}