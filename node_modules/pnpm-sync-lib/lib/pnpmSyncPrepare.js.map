{"version":3,"file":"pnpmSyncPrepare.js","sourceRoot":"","sources":["../src/pnpmSyncPrepare.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport { cwd } from 'process';\n\nimport type { ILockfile, IPnpmSyncJson, IVersionSpecifier } from './interfaces';\n\n/**\n * @beta\n */\nexport interface IPnpmSyncPrepareOptions {\n  lockfilePath: string;\n  storePath: string;\n  readPnpmLockfile: (\n    lockfilePath: string,\n    options: { ignoreIncompatible: boolean }\n  ) => Promise<ILockfile | undefined>;\n}\n\n/**\n * For each workspace project has injected dependencies in a PNPM workspace, this API\n * should be invoked to prepare its `pnpm-sync.json` file.  While building projects,\n * that file will be used by {@link pnpmSyncCopyAsync} to recopy the build outputs into\n * injected dependency installation folders under the `node_modules` folder.\n *\n * @param lockfile - the path to the `pnpm-lock.yaml` file\n * @param store - the path to the PNPM store folder\n *\n * @beta\n */\nexport async function pnpmSyncPrepareAsync({\n  lockfilePath,\n  storePath,\n  readPnpmLockfile\n}: IPnpmSyncPrepareOptions): Promise<void> {\n  console.log('Generate pnpm-sync.json ...');\n\n  // get the pnpm-lock.yaml path\n  lockfilePath = path.resolve(cwd(), lockfilePath);\n  storePath = path.resolve(cwd(), storePath);\n\n  console.log('The pnpm-lock.yaml file path =>', lockfilePath);\n  console.log('The .pnpm folder path =>', storePath);\n\n  if (!fs.existsSync(lockfilePath)) {\n    throw Error('The input pnpm-lock.yaml path is not correct!');\n  }\n\n  console.time(`pnpm-sync prepare`);\n\n  // read the pnpm-lock.yaml\n  const pnpmLockfile = await readPnpmLockfile(lockfilePath, {\n    ignoreIncompatible: true\n  });\n\n  // find injected dependency and all its available versions\n  const injectedDependencyToVersion: Map<string, Set<string>> = getInjectedDependencyToVersion(pnpmLockfile);\n\n  // get pnpm-lock.yaml folder path\n  const pnpmLockFolder = lockfilePath.slice(0, lockfilePath.length - 'pnpm-lock.yaml'.length);\n\n  // generate a map, where key is the actual path of the injectedDependency, value is all available paths in .pnpm folder\n  const injectedDependencyToFilePathSet: Map<string, Set<string>> = new Map();\n  for (const [injectedDependency, injectedDependencyVersionSet] of injectedDependencyToVersion) {\n    for (const injectedDependencyVersion of injectedDependencyVersionSet) {\n      // this logic is heavily depends on pnpm-lock formate\n      // the current logic is for pnpm v8\n      // for example: file:../../libraries/lib1(react@16.0.0) -> ../../libraries/lib1\n      let injectedDependencyPath = injectedDependencyVersion.split('(')[0].slice('file:'.length);\n      injectedDependencyPath = path.resolve(pnpmLockFolder, injectedDependencyPath);\n      if (!injectedDependencyToFilePathSet.has(injectedDependencyPath)) {\n        injectedDependencyToFilePathSet.set(injectedDependencyPath, new Set());\n      }\n\n      injectedDependencyToFilePathSet\n        .get(injectedDependencyPath)\n        ?.add(transferFilePathToPnpmStorePath(injectedDependencyVersion, injectedDependency, storePath));\n    }\n  }\n\n  // now, we have everything we need to generate the the pnpm-sync.json\n  // console.log('injectedDependencyToFilePathSet =>', injectedDependencyToFilePathSet);\n  for (const [projectFolder, targetFolderSet] of injectedDependencyToFilePathSet) {\n    if (targetFolderSet.size === 0) {\n      continue;\n    }\n\n    // make sure the node_modules folder exists\n    if (!fs.existsSync(`${projectFolder}/node_modules`)) {\n      continue;\n    }\n\n    const pnpmSyncJsonPath = `${projectFolder}/node_modules/.pnpm-sync.json`;\n\n    let pnpmSyncJsonFile: IPnpmSyncJson = {\n      postbuildInjectedCopy: {\n        sourceFolder: '../..',\n        targetFolders: []\n      }\n    };\n\n    // if .pnpm-sync.json already exists, read it first\n    if (fs.existsSync(pnpmSyncJsonPath)) {\n      pnpmSyncJsonFile = JSON.parse(fs.readFileSync(pnpmSyncJsonPath).toString());\n    }\n\n    const existingTargetFolderSet: Set<string> = new Set();\n\n    for (const targetFolder of pnpmSyncJsonFile.postbuildInjectedCopy.targetFolders) {\n      existingTargetFolderSet.add(targetFolder.folderPath);\n    }\n\n    for (const targetFolder of targetFolderSet) {\n      const relativePath = path.relative(pnpmSyncJsonPath, targetFolder);\n      if (!existingTargetFolderSet.has(relativePath)) {\n        pnpmSyncJsonFile.postbuildInjectedCopy.targetFolders.push({\n          folderPath: relativePath\n        });\n      }\n    }\n    fs.writeFileSync(pnpmSyncJsonPath, JSON.stringify(pnpmSyncJsonFile, null, 2));\n  }\n  console.timeEnd(`pnpm-sync prepare`);\n}\n\nfunction transferFilePathToPnpmStorePath(\n  rawFilePath: string,\n  dependencyName: string,\n  storePath: string\n): string {\n  // this logic is heavily depends on pnpm-lock format\n  // the current logic is for pnpm v8\n\n  // an example, file:../../libraries/lib1(react@16.0.0) -> file+..+..+libraries+lib1_react@16.9.0\n\n  // 1. replace ':' with '+'\n  rawFilePath = rawFilePath.replaceAll(':', '+');\n\n  // 2. replace '/' with '+'\n  rawFilePath = rawFilePath.replaceAll('/', '+');\n\n  // 3. replace '(' with '_'\n  rawFilePath = rawFilePath.replaceAll('(', '_');\n\n  // 4. remove ')'\n  rawFilePath = rawFilePath.replaceAll(')', '');\n\n  // 5. add dependencyName\n  rawFilePath = rawFilePath + `/node_modules/${dependencyName}`;\n\n  rawFilePath = storePath + '/' + rawFilePath;\n\n  return rawFilePath;\n}\n\n// process dependencies and devDependencies to generate injectedDependencyToFilePath\nfunction getInjectedDependencyToVersion(pnpmLockfile: ILockfile | undefined): Map<string, Set<string>> {\n  const injectedDependencyToVersion: Map<string, Set<string>> = new Map();\n  for (const importerKey in pnpmLockfile?.importers) {\n    if (!pnpmLockfile?.importers[importerKey]?.dependenciesMeta) {\n      continue;\n    }\n    const dependenciesMeta = pnpmLockfile?.importers[importerKey]?.dependenciesMeta;\n\n    for (const dependency in dependenciesMeta) {\n      if (dependenciesMeta[dependency]?.injected) {\n        if (!injectedDependencyToVersion.has(dependency)) {\n          injectedDependencyToVersion.set(dependency, new Set());\n        }\n      }\n    }\n\n    // based on https://pnpm.io/package_json#dependenciesmeta\n    // the injected dependencies could available inside dependencies, optionalDependencies, and devDependencies.\n    processDependencies(pnpmLockfile?.importers[importerKey]?.dependencies, injectedDependencyToVersion);\n    processDependencies(pnpmLockfile?.importers[importerKey]?.devDependencies, injectedDependencyToVersion);\n    processDependencies(\n      pnpmLockfile?.importers[importerKey]?.optionalDependencies,\n      injectedDependencyToVersion\n    );\n  }\n  return injectedDependencyToVersion;\n}\nfunction processDependencies(\n  dependencies: Record<string, IVersionSpecifier> | undefined,\n  injectedDependencyToVersion: Map<string, Set<string>>\n): void {\n  if (dependencies) {\n    for (const [dependency, specifier] of Object.entries(dependencies)) {\n      if (injectedDependencyToVersion.has(dependency)) {\n        const specifierToUse: string = typeof specifier === 'string' ? specifier : specifier.version;\n        injectedDependencyToVersion.get(dependency)?.add(specifierToUse);\n      }\n    }\n  }\n}\n"]}