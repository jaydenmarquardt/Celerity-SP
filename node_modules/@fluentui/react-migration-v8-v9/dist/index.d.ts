/// <reference types="react" />

import { BrandVariants } from '@fluentui/react-components';
import type { ButtonProps } from '@fluentui/react-components';
import type { IBaseButtonProps } from '@fluentui/react';
import type { IButtonProps } from '@fluentui/react';
import { ICheckboxProps } from '@fluentui/react';
import type { IContextualMenuItem } from '@fluentui/react';
import type { IContextualMenuProps } from '@fluentui/react';
import type { IPalette } from '@fluentui/react';
import type { IStackItemProps } from '@fluentui/react';
import type { IStackProps } from '@fluentui/react';
import type { MenuProps } from '@fluentui/react-menu';
import * as React_2 from 'react';
import { Theme } from '@fluentui/react-components';
import { Theme as Theme_2 } from '@fluentui/react';

/**
 * Shims a v8 ActionButton to render a v9 Button
 */
declare const ActionButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;
export { ActionButtonShim }
export { ActionButtonShim as CommandButtonShim }

export declare type AlphaColors = 5 | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90;

export declare const black = "#000000";

export declare const blackAlpha: Record<AlphaColors, string>;

export declare const brandWeb: BrandVariants;

export declare const ButtonShim: React_2.ForwardRefExoticComponent<IBaseButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare const CheckboxShim: React_2.ForwardRefExoticComponent<Pick<ICheckboxProps, "label" | "title" | "className" | "key" | "disabled" | "name" | "defaultChecked" | "id" | "onChange" | "componentRef" | "styles" | "theme" | "checked" | "ariaLabel" | "required" | "ariaDescribedBy" | "ariaLabelledBy" | "ariaPositionInSet" | "ariaSetSize" | "boxSide" | "checkmarkIconProps" | "defaultIndeterminate" | "indeterminate" | "inputProps" | "onRenderLabel"> & React_2.RefAttributes<HTMLInputElement>>;

/**
 * Possible color variant values
 */
export declare type ColorVariants = {
    shade50: string;
    shade40: string;
    shade30: string;
    shade20: string;
    shade10: string;
    primary: string;
    tint10: string;
    tint20: string;
    tint30: string;
    tint40: string;
    tint50: string;
    tint60: string;
};

/**
 * Shims v8 CompoundButton to render a v9 CompoundButton
 */
export declare const CompoundButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

/**
 * Creates v9 brand colors from a v8 palette using interpolation
 * A v8 palette has nine colors and v9 has sixteen colors.
 */
export declare const createBrandVariants: (palette: IPalette, interpolation?: Interpolation) => BrandVariants;

/**
 * Creates a v8 theme from v9 brand colors and theme.
 * You can optionally pass a v8 base theme.
 * Otherwise the default v8 theme is used.
 *
 * The v9 colors, fonts, and effects are applied on top of the v8 theme
 * to allow v8 components to look as much like v9 components as possible.
 */
export declare const createV8Theme: (brandColors: BrandVariants, themeV9: Theme, isDarkTheme?: boolean, themeV8?: Theme_2) => Theme_2;

/**
 * Creates a v9 theme from a v8 theme.
 * You can optional pass a base v9 theme; otherwise webLightTheme is used.
 */
export declare const createV9Theme: (themeV8: Theme_2, baseThemeV9?: Theme) => Theme;

/**
 * Shims a v8 DefaultButton to render a v9 Button
 */
export declare const DefaultButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

/**
 * All the global shared colors and their shade/tint variants
 */
export declare type GlobalSharedColors = {
    darkRed: ColorVariants;
    burgundy: ColorVariants;
    cranberry: ColorVariants;
    red: ColorVariants;
    darkOrange: ColorVariants;
    bronze: ColorVariants;
    pumpkin: ColorVariants;
    orange: ColorVariants;
    peach: ColorVariants;
    marigold: ColorVariants;
    yellow: ColorVariants;
    gold: ColorVariants;
    brass: ColorVariants;
    brown: ColorVariants;
    darkBrown: ColorVariants;
    lime: ColorVariants;
    forest: ColorVariants;
    seafoam: ColorVariants;
    lightGreen: ColorVariants;
    green: ColorVariants;
    darkGreen: ColorVariants;
    lightTeal: ColorVariants;
    teal: ColorVariants;
    darkTeal: ColorVariants;
    cyan: ColorVariants;
    steel: ColorVariants;
    lightBlue: ColorVariants;
    blue: ColorVariants;
    royalBlue: ColorVariants;
    darkBlue: ColorVariants;
    cornflower: ColorVariants;
    navy: ColorVariants;
    lavender: ColorVariants;
    purple: ColorVariants;
    darkPurple: ColorVariants;
    orchid: ColorVariants;
    grape: ColorVariants;
    berry: ColorVariants;
    lilac: ColorVariants;
    pink: ColorVariants;
    hotPink: ColorVariants;
    magenta: ColorVariants;
    plum: ColorVariants;
    beige: ColorVariants;
    mink: ColorVariants;
    silver: ColorVariants;
    platinum: ColorVariants;
    anchor: ColorVariants;
    charcoal: ColorVariants;
};

export declare const grey: Record<Greys, string>;

export declare const grey14Alpha: Record<AlphaColors, string>;

export declare type Greys = 0 | 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 | 22 | 24 | 26 | 28 | 30 | 32 | 34 | 36 | 38 | 40 | 42 | 44 | 46 | 48 | 50 | 52 | 54 | 56 | 58 | 60 | 62 | 64 | 66 | 68 | 70 | 72 | 74 | 76 | 78 | 80 | 82 | 84 | 86 | 88 | 90 | 92 | 94 | 96 | 98 | 100;

export declare const hcButtonFace = "#ffffff";

export declare const hcButtonText = "#000000";

export declare const hcCanvas = "#000000";

export declare const hcCanvasText = "#ffffff";

export declare const hcDisabled = "#3ff23f";

export declare const hcHighlight = "#1aebff";

export declare const hcHighlightText = "#000000";

export declare const hcHyperlink = "#ffff00";

declare type Interpolation = 'pairs' | 'primaryAndEnds';

export declare const MenuButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare const MenuItemShim: (props: IContextualMenuItem) => JSX.Element;

/**
 * Shims v8 PrimaryButton to render a v9 Button
 */
export declare const PrimaryButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare const sharedColors: GlobalSharedColors;

export declare const shimButtonProps: (props: IBaseButtonProps & React_2.RefAttributes<HTMLButtonElement>) => ButtonProps;

export declare const shimMenuProps: (props: IContextualMenuProps) => Partial<MenuProps>;

export declare const StackItemShim: (props: IStackItemProps) => JSX.Element;

export declare const StackShim: (props: IStackProps) => JSX.Element;

export declare type TextAlignment = 'inherit' | 'initial' | 'revert' | 'unset' | 'center' | 'end' | 'start' | 'justify' | 'left' | 'match-parent' | 'right';

export declare type TextAlignments = {
    start: TextAlignment;
    center: TextAlignment;
    end: TextAlignment;
    justify: TextAlignment;
};

/**
 * Shims v8 ToggleButton to render a v9 ToggleButton
 */
export declare const ToggleButtonShim: React_2.ForwardRefExoticComponent<IButtonProps & React_2.RefAttributes<HTMLButtonElement>>;

export declare const white = "#ffffff";

export declare const whiteAlpha: Record<AlphaColors, string>;

export { }
