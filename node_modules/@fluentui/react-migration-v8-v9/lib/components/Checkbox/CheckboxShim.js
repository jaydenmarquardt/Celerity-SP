import * as React from 'react';
import { classNamesFunction } from '@fluentui/react';
import { Checkbox, mergeClasses } from '@fluentui/react-components';
import { useCheckboxProps } from './shimCheckboxProps';
import { useCheckboxStyles } from './Checkbox.styles';
const getClassNames = classNamesFunction({
    useStaticStyles: false
});
export const CheckboxShim = /*#__PURE__*/ React.forwardRef((props, _ref)=>{
    'use no memo';
    const { className, styles: stylesV8, onRenderLabel, label, componentRef } = props;
    const shimProps = useCheckboxProps(props);
    const styles = getClassNames(stylesV8);
    const stylesV9 = useCheckboxStyles();
    const checkboxRef = _ref || /*#__PURE__*/ React.createRef();
    React.useImperativeHandle(componentRef, ()=>{
        var _checkboxRef_current, _checkboxRef_current1;
        var _checkboxRef_current_checked, _checkboxRef_current_indeterminate;
        return {
            checked: (_checkboxRef_current_checked = (_checkboxRef_current = checkboxRef.current) === null || _checkboxRef_current === void 0 ? void 0 : _checkboxRef_current.checked) !== null && _checkboxRef_current_checked !== void 0 ? _checkboxRef_current_checked : false,
            indeterminate: (_checkboxRef_current_indeterminate = (_checkboxRef_current1 = checkboxRef.current) === null || _checkboxRef_current1 === void 0 ? void 0 : _checkboxRef_current1.indeterminate) !== null && _checkboxRef_current_indeterminate !== void 0 ? _checkboxRef_current_indeterminate : false,
            focus: ()=>{
                var _checkboxRef_current;
                return (_checkboxRef_current = checkboxRef.current) === null || _checkboxRef_current === void 0 ? void 0 : _checkboxRef_current.focus();
            }
        };
    });
    const defaultLabelRenderer = (checkboxProps)=>{
        if (!checkboxProps) {
            return null;
        }
        const { label: defaultLabel, title } = checkboxProps;
        return defaultLabel ? /*#__PURE__*/ React.createElement("span", {
            title: title,
            className: styles.text
        }, defaultLabel) : null;
    };
    if (label || onRenderLabel) {
        shimProps.label = {
            className: mergeClasses('ms-Checkbox-text', styles.label, styles.text),
            children: onRenderLabel ? onRenderLabel(props, defaultLabelRenderer) : label
        };
    }
    return /*#__PURE__*/ React.createElement(Checkbox, {
        ...shimProps,
        ref: checkboxRef,
        className: mergeClasses(stylesV9.root, 'ms-Checkbox', className, styles.root),
        indicator: {
            className: mergeClasses('ms-Checkbox-checkbox', styles.checkbox)
        }
    });
});
CheckboxShim.displayName = 'CheckboxShim';
