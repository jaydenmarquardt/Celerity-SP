"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StackItemShim", {
    enumerable: true,
    get: function() {
        return StackItemShim;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = require("@griffel/react");
const _react1 = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _StackItemShimstyles = require("./StackItemShim.styles");
const stackItemClassNames = {
    root: 'ms-StackItem'
};
const StackItemShim = (props)=>{
    const { grow, shrink, disableShrink, align, verticalFill, order, className, children } = props;
    const styles = (0, _StackItemShimstyles.useStackItemShimStyles)();
    const alignSelfStyles = (0, _StackItemShimstyles.useFlexAlignSelfStyles)();
    const shrinkFlexStyles = (0, _StackItemShimstyles.useFlexShrinkStyles)();
    const growFlexStyles = (0, _StackItemShimstyles.useFlexGrowStyles)();
    const orderFlexStyles = (0, _StackItemShimstyles.useFlexOrderStyles)();
    const stackItemStyles = [
        styles.root,
        align && alignSelfStyles[align],
        verticalFill && styles.verticalFill
    ];
    if (order) {
        stackItemStyles.push(orderFlexStyles[order]);
    }
    if (grow) {
        const flexGrow = grow === true ? growFlexStyles[1] : growFlexStyles[grow];
        stackItemStyles.push(flexGrow);
    }
    if (shrink && !disableShrink) {
        stackItemStyles.push(shrinkFlexStyles[1]);
    } else if (disableShrink || !grow && !shrink) {
        stackItemStyles.push(shrinkFlexStyles[0]);
    }
    if (disableShrink) {
        stackItemStyles.push(styles.disableShrink);
    }
    const rootStyles = (0, _react.mergeClasses)(stackItemClassNames.root, ...stackItemStyles, className);
    return /*#__PURE__*/ _react1.createElement("div", {
        className: rootStyles
    }, children);
};
