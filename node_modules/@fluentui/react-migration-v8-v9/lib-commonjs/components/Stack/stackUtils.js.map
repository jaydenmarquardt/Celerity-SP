{"version":3,"sources":["stackUtils.ts"],"sourcesContent":["import { getTheme, IStackProps, IStackTokens, IStyle, ITheme } from '@fluentui/react';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: getValueUnitGap(getThemedSpacing(splitGap[0], theme)),\n      columnGap: getValueUnitGap(getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = getValueUnitGap(getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return getThemedSpacing(padding1, theme) + ' ' + getThemedSpacing(padding2, theme);\n  });\n};\n\nexport interface StackShimStyles {\n  root?: IStyle;\n  inner?: IStyle;\n}\n/**\n *\n * getStyles function for Stack.tokens.childrenGap prop styling\n */\nexport const getChildrenGapStyles = (props: IStackProps): StackShimStyles => {\n  const theme = getTheme();\n\n  const { horizontal, reversed } = props;\n  const tokens: IStackTokens = { ...props.tokens };\n\n  const { rowGap, columnGap } = parseGap(tokens.childrenGap, theme);\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  return {\n    root: [\n      reversed &&\n        horizontal && {\n          '> *:not(:last-child)': {\n            marginLeft: `${columnGap.value}${columnGap.unit}`,\n          },\n        },\n      reversed &&\n        !horizontal && {\n          '> *:not(:last-child)': {\n            marginTop: `${rowGap.value}${rowGap.unit}`,\n          },\n        },\n      !reversed &&\n        horizontal && {\n          '> *:not(:first-child)': {\n            marginLeft: `${columnGap.value}${columnGap.unit}`,\n          },\n        },\n      !reversed &&\n        !horizontal && {\n          '> *:not(:first-child)': {\n            marginTop: `${rowGap.value}${rowGap.unit}`,\n          },\n        },\n    ],\n    inner: [\n      {\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n        '> *': {\n          margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n        },\n      },\n      horizontal && {\n        height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n        '> *': {\n          maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n        },\n      },\n      !horizontal && {\n        height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n        '> *': {\n          maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n        },\n      },\n    ],\n  };\n};\n"],"names":["getChildrenGapStyles","parseGap","parsePadding","getThemedSpacing","space","theme","spacing","hasOwnProperty","getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","toString","unitPart","substring","length","value","unit","undefined","rowGap","columnGap","splitGap","split","calculatedGap","padding","paddingValues","reduce","padding1","padding2","props","getTheme","horizontal","reversed","tokens","childrenGap","horizontalMargin","verticalMargin","root","marginLeft","marginTop","inner","marginRight","marginBottom","width","margin","height","maxWidth","maxHeight"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA0HaA,oBAAAA;eAAAA;;IA5FAC,QAAAA;eAAAA;;IAqEAC,YAAAA;eAAAA;;;uBAnGuD;AAEpE,2GAA2G;AAC3G,MAAMC,mBAAmB,CAACC,OAAeC;IACvC,IAAIA,MAAMC,OAAO,CAACC,cAAc,CAACH,QAAQ;QACvC,OAAOC,MAAMC,OAAO,CAACF,MAAoC;IAC3D;IACA,OAAOA;AACT;AAEA,sGAAsG;AACtG,MAAMI,kBAAkB,CAACC;IACvB,MAAMC,gBAAgBC,WAAWF;IACjC,MAAMG,iBAAiBC,MAAMH,iBAAiB,IAAIA;IAClD,MAAMI,kBAAkBD,MAAMH,iBAAiB,KAAKA,cAAcK,QAAQ;IAE1E,MAAMC,WAAWP,IAAIQ,SAAS,CAACH,gBAAgBC,QAAQ,GAAGG,MAAM;IAEhE,OAAO;QACLC,OAAOP;QACPQ,MAAMJ,YAAY;IACpB;AACF;AAQO,MAAMf,WAAW,CACtBQ,KACAJ;IAEA,IAAII,QAAQY,aAAaZ,QAAQ,IAAI;QACnC,OAAO;YACLa,QAAQ;gBACNH,OAAO;gBACPC,MAAM;YACR;YACAG,WAAW;gBACTJ,OAAO;gBACPC,MAAM;YACR;QACF;IACF;IAEA,IAAI,OAAOX,QAAQ,UAAU;QAC3B,OAAO;YACLa,QAAQ;gBACNH,OAAOV;gBACPW,MAAM;YACR;YACAG,WAAW;gBACTJ,OAAOV;gBACPW,MAAM;YACR;QACF;IACF;IAEA,MAAMI,WAAWf,IAAIgB,KAAK,CAAC;IAE3B,0DAA0D;IAC1D,IAAID,SAASN,MAAM,GAAG,GAAG;QACvB,OAAO;YACLI,QAAQ;gBACNH,OAAO;gBACPC,MAAM;YACR;YACAG,WAAW;gBACTJ,OAAO;gBACPC,MAAM;YACR;QACF;IACF;IAEA,oDAAoD;IACpD,IAAII,SAASN,MAAM,KAAK,GAAG;QACzB,OAAO;YACLI,QAAQd,gBAAgBL,iBAAiBqB,QAAQ,CAAC,EAAE,EAAEnB;YACtDkB,WAAWf,gBAAgBL,iBAAiBqB,QAAQ,CAAC,EAAE,EAAEnB;QAC3D;IACF;IAEA,uFAAuF;IACvF,MAAMqB,gBAAgBlB,gBAAgBL,iBAAiBM,KAAKJ;IAE5D,OAAO;QACLiB,QAAQI;QACRH,WAAWG;IACb;AACF;AAQO,MAAMxB,eAAe,CAACyB,SAAsCtB;IACjE,IAAIsB,YAAYN,aAAa,OAAOM,YAAY,YAAYA,YAAY,IAAI;QAC1E,OAAOA;IACT;IAEA,MAAMC,gBAAgBD,QAAQF,KAAK,CAAC;IACpC,IAAIG,cAAcV,MAAM,GAAG,GAAG;QAC5B,OAAOf,iBAAiBwB,SAAStB;IACnC;IAEA,OAAOuB,cAAcC,MAAM,CAAC,CAACC,UAAkBC;QAC7C,OAAO5B,iBAAiB2B,UAAUzB,SAAS,MAAMF,iBAAiB4B,UAAU1B;IAC9E;AACF;AAUO,MAAML,uBAAuB,CAACgC;IACnC,MAAM3B,QAAQ4B,IAAAA,eAAAA;IAEd,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAE,GAAGH;IACjC,MAAMI,SAAuB;QAAE,GAAGJ,MAAMI,MAAM;IAAC;IAE/C,MAAM,EAAEd,MAAM,EAAEC,SAAS,EAAE,GAAGtB,SAASmC,OAAOC,WAAW,EAAEhC;IAC3D,MAAMiC,mBAAmB,CAAC,EAAE,CAAC,MAAMf,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC;IACrE,MAAMmB,iBAAiB,CAAC,EAAE,CAAC,MAAMjB,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC;IAE7D,OAAO;QACLoB,MAAM;YACJL,YACED,cAAc;gBACZ,wBAAwB;oBACtBO,YAAY,CAAC,EAAElB,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC;gBACnD;YACF;YACFe,YACE,CAACD,cAAc;gBACb,wBAAwB;oBACtBQ,WAAW,CAAC,EAAEpB,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC;gBAC5C;YACF;YACF,CAACe,YACCD,cAAc;gBACZ,yBAAyB;oBACvBO,YAAY,CAAC,EAAElB,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC;gBACnD;YACF;YACF,CAACe,YACC,CAACD,cAAc;gBACb,yBAAyB;oBACvBQ,WAAW,CAAC,EAAEpB,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC;gBAC5C;YACF;SACH;QACDuB,OAAO;YACL;gBACEF,YAAYH;gBACZM,aAAaN;gBACbI,WAAWH;gBACXM,cAAcN;gBACdO,OAAOvB,UAAUJ,KAAK,KAAK,IAAI,SAAS,CAAC,YAAY,EAAEI,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC,CAAC;gBAC1F,OAAO;oBACL2B,QAAQ,CAAC,EAAE,MAAMzB,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC,EAAE,MAAMG,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC;gBACzF;YACF;YACAc,cAAc;gBACZc,QAAQ1B,OAAOH,KAAK,KAAK,IAAI,SAAS,CAAC,YAAY,EAAEG,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC,CAAC;gBAClF,OAAO;oBACL6B,UAAU1B,UAAUJ,KAAK,KAAK,IAAI,SAAS,CAAC,YAAY,EAAEI,UAAUJ,KAAK,CAAC,EAAEI,UAAUH,IAAI,CAAC,CAAC,CAAC;gBAC/F;YACF;YACA,CAACc,cAAc;gBACbc,QAAQ,CAAC,YAAY,EAAE1B,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC,CAAC;gBACpD,OAAO;oBACL8B,WAAW5B,OAAOH,KAAK,KAAK,IAAI,SAAS,CAAC,YAAY,EAAEG,OAAOH,KAAK,CAAC,EAAEG,OAAOF,IAAI,CAAC,CAAC,CAAC;gBACvF;YACF;SACD;IACH;AACF"}