"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createV8Theme", {
    enumerable: true,
    get: function() {
        return createV8Theme;
    }
});
const _react = require("@fluentui/react");
const _fluent2theme = require("@fluentui/fluent2-theme");
const _themeDuplicates = require("./themeDuplicates");
const mappedNeutrals = {
    black: _themeDuplicates.black,
    blackTranslucent40: _themeDuplicates.blackAlpha[40],
    neutralDark: _themeDuplicates.grey[8],
    neutralPrimary: _themeDuplicates.grey[14],
    neutralPrimaryAlt: _themeDuplicates.grey[22],
    neutralSecondary: _themeDuplicates.grey[36],
    neutralSecondaryAlt: _themeDuplicates.grey[52],
    neutralTertiary: _themeDuplicates.grey[62],
    neutralTertiaryAlt: _themeDuplicates.grey[78],
    neutralQuaternary: _themeDuplicates.grey[82],
    neutralQuaternaryAlt: _themeDuplicates.grey[88],
    neutralLight: _themeDuplicates.grey[92],
    neutralLighter: _themeDuplicates.grey[96],
    neutralLighterAlt: _themeDuplicates.grey[98],
    white: _themeDuplicates.white,
    whiteTranslucent40: _themeDuplicates.whiteAlpha[40]
};
const invertedMappedNeutrals = {
    black: _themeDuplicates.white,
    blackTranslucent40: _themeDuplicates.whiteAlpha[40],
    neutralDark: _themeDuplicates.grey[98],
    neutralPrimary: _themeDuplicates.grey[96],
    neutralPrimaryAlt: _themeDuplicates.grey[84],
    neutralSecondary: _themeDuplicates.grey[82],
    neutralSecondaryAlt: _themeDuplicates.grey[74],
    neutralTertiary: _themeDuplicates.grey[44],
    neutralTertiaryAlt: _themeDuplicates.grey[26],
    neutralQuaternary: _themeDuplicates.grey[24],
    neutralQuaternaryAlt: _themeDuplicates.grey[18],
    neutralLight: _themeDuplicates.grey[16],
    neutralLighter: _themeDuplicates.grey[14],
    neutralLighterAlt: _themeDuplicates.grey[10],
    white: _themeDuplicates.black,
    whiteTranslucent40: _themeDuplicates.blackAlpha[40]
};
const mappedSharedColors = {
    yellowDark: _themeDuplicates.sharedColors.marigold.shade10,
    yellow: _themeDuplicates.sharedColors.yellow.primary,
    yellowLight: _themeDuplicates.sharedColors.yellow.tint40,
    orange: _themeDuplicates.sharedColors.orange.primary,
    orangeLight: _themeDuplicates.sharedColors.orange.tint20,
    orangeLighter: _themeDuplicates.sharedColors.orange.tint40,
    redDark: _themeDuplicates.sharedColors.darkRed.primary,
    red: _themeDuplicates.sharedColors.red.primary,
    magentaDark: _themeDuplicates.sharedColors.magenta.shade30,
    magenta: _themeDuplicates.sharedColors.magenta.primary,
    magentaLight: _themeDuplicates.sharedColors.magenta.tint30,
    purpleDark: _themeDuplicates.sharedColors.darkPurple.primary,
    purple: _themeDuplicates.sharedColors.purple.primary,
    purpleLight: _themeDuplicates.sharedColors.purple.tint40,
    blueDark: _themeDuplicates.sharedColors.darkBlue.primary,
    blueMid: _themeDuplicates.sharedColors.royalBlue.primary,
    blue: _themeDuplicates.sharedColors.blue.primary,
    blueLight: _themeDuplicates.sharedColors.lightBlue.primary,
    tealDark: _themeDuplicates.sharedColors.darkTeal.primary,
    teal: _themeDuplicates.sharedColors.teal.primary,
    tealLight: _themeDuplicates.sharedColors.lightTeal.primary,
    greenDark: _themeDuplicates.sharedColors.darkGreen.primary,
    green: _themeDuplicates.sharedColors.green.primary,
    greenLight: _themeDuplicates.sharedColors.lightGreen.primary
};
/**
 * Creates a v8 palette given a brand ramp
 */ const mapPalette = (brandColors, inverted)=>{
    const neutrals = inverted ? invertedMappedNeutrals : mappedNeutrals;
    const brands = inverted ? {
        themeDarker: brandColors[110],
        themeDark: brandColors[100],
        themeDarkAlt: brandColors[100],
        themePrimary: brandColors[90],
        themeSecondary: brandColors[90],
        themeTertiary: brandColors[60],
        themeLight: brandColors[50],
        themeLighter: brandColors[40],
        themeLighterAlt: brandColors[30]
    } : {
        themeDarker: brandColors[40],
        themeDark: brandColors[60],
        themeDarkAlt: brandColors[70],
        themePrimary: brandColors[80],
        themeSecondary: brandColors[90],
        themeTertiary: brandColors[120],
        themeLight: brandColors[140],
        themeLighter: brandColors[150],
        themeLighterAlt: brandColors[160]
    };
    return {
        ..._react.DefaultPalette,
        ...neutrals,
        accent: brands.themePrimary,
        ...mappedSharedColors,
        ...brands
    };
};
/**
 * Returns v9 theme colors overlaid on a base set of v8 semantic colors
 */ const mapSemanticColors = (baseColors, theme)=>{
    return {
        ...baseColors,
        accentButtonBackground: theme.colorBrandBackground,
        accentButtonText: theme.colorNeutralForegroundOnBrand,
        actionLink: theme.colorNeutralForeground1,
        actionLinkHovered: theme.colorNeutralForeground1Hover,
        // blockingBackground,
        // blockingIcon,
        bodyBackground: theme.colorNeutralBackground1,
        bodyBackgroundChecked: theme.colorNeutralBackground1Selected,
        bodyBackgroundHovered: theme.colorNeutralBackground1Hover,
        bodyDivider: theme.colorNeutralStroke2,
        bodyFrameBackground: theme.colorNeutralBackground1,
        bodyFrameDivider: theme.colorNeutralStroke2,
        bodyStandoutBackground: theme.colorNeutralBackground2,
        bodySubtext: theme.colorNeutralForeground2,
        bodyText: theme.colorNeutralForeground1,
        bodyTextChecked: theme.colorNeutralForeground1Selected,
        buttonBackground: theme.colorNeutralBackground1,
        buttonBackgroundChecked: theme.colorNeutralBackground1Selected,
        buttonBackgroundCheckedHovered: theme.colorNeutralBackground1Hover,
        buttonBackgroundDisabled: theme.colorNeutralBackgroundDisabled,
        buttonBackgroundHovered: theme.colorNeutralBackground1Hover,
        buttonBackgroundPressed: theme.colorNeutralBackground1Pressed,
        buttonBorder: theme.colorNeutralStroke1,
        buttonBorderDisabled: theme.colorNeutralStrokeDisabled,
        buttonText: theme.colorNeutralForeground1,
        buttonTextChecked: theme.colorNeutralForeground1,
        buttonTextCheckedHovered: theme.colorNeutralForeground1,
        buttonTextDisabled: theme.colorNeutralForegroundDisabled,
        buttonTextHovered: theme.colorNeutralForeground1,
        buttonTextPressed: theme.colorNeutralForeground1,
        cardShadow: theme.shadow4,
        cardShadowHovered: theme.shadow8,
        cardStandoutBackground: theme.colorNeutralBackground1,
        defaultStateBackground: theme.colorNeutralBackground2,
        disabledBackground: theme.colorNeutralBackgroundDisabled,
        disabledBodySubtext: theme.colorNeutralForegroundDisabled,
        disabledBodyText: theme.colorNeutralForegroundDisabled,
        disabledBorder: theme.colorNeutralStrokeDisabled,
        disabledSubtext: theme.colorNeutralForegroundDisabled,
        disabledText: theme.colorNeutralForegroundDisabled,
        // errorBackground,
        // errorIcon,
        // errorText: ,
        focusBorder: theme.colorStrokeFocus2,
        // infoBackground,
        // infoIcon,
        inputBackground: theme.colorNeutralBackground1,
        inputBackgroundChecked: theme.colorBrandBackground,
        inputBackgroundCheckedHovered: theme.colorBrandBackgroundHover,
        inputBorder: theme.colorNeutralStrokeAccessible,
        inputBorderHovered: theme.colorNeutralStrokeAccessibleHover,
        inputFocusBorderAlt: theme.colorBrandStroke1,
        inputForegroundChecked: theme.colorNeutralForegroundOnBrand,
        inputIcon: theme.colorNeutralForeground3,
        inputIconDisabled: theme.colorNeutralForegroundDisabled,
        inputIconHovered: theme.colorNeutralForeground3,
        inputPlaceholderBackgroundChecked: theme.colorBrandBackgroundInvertedSelected,
        inputPlaceholderText: theme.colorNeutralForeground4,
        inputText: theme.colorNeutralForeground1,
        inputTextHovered: theme.colorNeutralForeground1Hover,
        link: theme.colorBrandForegroundLink,
        linkHovered: theme.colorBrandForegroundLinkHover,
        listBackground: theme.colorNeutralBackground1,
        listHeaderBackgroundHovered: theme.colorNeutralBackground1Hover,
        listHeaderBackgroundPressed: theme.colorNeutralBackground1Pressed,
        listItemBackgroundChecked: theme.colorNeutralBackground1Selected,
        listItemBackgroundCheckedHovered: theme.colorNeutralBackground1Selected,
        listItemBackgroundHovered: theme.colorNeutralBackground1Hover,
        listText: theme.colorNeutralForeground1,
        listTextColor: theme.colorNeutralForeground1,
        menuBackground: theme.colorNeutralBackground1,
        menuDivider: theme.colorNeutralStroke2,
        menuHeader: theme.colorNeutralForeground3,
        menuIcon: theme.colorNeutralForeground1,
        menuItemBackgroundChecked: theme.colorNeutralBackground1,
        menuItemBackgroundHovered: theme.colorNeutralBackground1Hover,
        menuItemBackgroundPressed: theme.colorNeutralBackground1Hover,
        menuItemText: theme.colorNeutralForeground1,
        menuItemTextHovered: theme.colorNeutralForeground1Hover,
        messageLink: theme.colorBrandForegroundLink,
        messageLinkHovered: theme.colorBrandForegroundLinkHover,
        messageText: theme.colorNeutralForeground1,
        primaryButtonBackground: theme.colorBrandBackground,
        primaryButtonBackgroundDisabled: theme.colorNeutralBackgroundDisabled,
        primaryButtonBackgroundHovered: theme.colorBrandBackgroundHover,
        primaryButtonBackgroundPressed: theme.colorBrandBackgroundPressed,
        primaryButtonBorder: theme.colorTransparentStroke,
        primaryButtonText: theme.colorNeutralForegroundOnBrand,
        primaryButtonTextDisabled: theme.colorNeutralForegroundDisabled,
        primaryButtonTextHovered: theme.colorNeutralForegroundOnBrand,
        primaryButtonTextPressed: theme.colorNeutralForegroundOnBrand
    };
};
/**
 * Overlays v9 fonts on a set of base v8 fonts.
 */ const mapFonts = (baseFonts, theme)=>{
    return {
        ...baseFonts,
        tiny: {
            ...baseFonts.tiny,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase100,
            fontWeight: theme.fontWeightRegular
        },
        xSmall: {
            ...baseFonts.xSmall,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase100,
            fontWeight: theme.fontWeightRegular
        },
        small: {
            ...baseFonts.small,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase200,
            fontWeight: theme.fontWeightRegular
        },
        smallPlus: {
            ...baseFonts.smallPlus,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase200,
            fontWeight: theme.fontWeightRegular
        },
        medium: {
            ...baseFonts.medium,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase300,
            fontWeight: theme.fontWeightRegular
        },
        mediumPlus: {
            ...baseFonts.mediumPlus,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase400,
            fontWeight: theme.fontWeightRegular
        },
        large: {
            ...baseFonts.large,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase400,
            fontWeight: theme.fontWeightRegular
        },
        xLarge: {
            ...baseFonts.xxLarge,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeBase500,
            fontWeight: theme.fontWeightSemibold
        },
        xxLarge: {
            ...baseFonts.xxLarge,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeHero700,
            fontWeight: theme.fontWeightSemibold
        },
        superLarge: {
            ...baseFonts.superLarge,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeHero900,
            fontWeight: theme.fontWeightSemibold
        },
        mega: {
            ...baseFonts.mega,
            fontFamily: theme.fontFamilyBase,
            fontSize: theme.fontSizeHero1000,
            fontWeight: theme.fontWeightSemibold
        }
    };
};
/**
 * Overlays v9 shadows and border radii on a base set of v8 effects.
 */ const mapEffects = (baseEffects, theme)=>{
    return {
        ...baseEffects,
        elevation4: theme.shadow4,
        elevation8: theme.shadow8,
        elevation16: theme.shadow16,
        elevation64: theme.shadow64,
        roundedCorner2: theme.borderRadiusSmall,
        roundedCorner4: theme.borderRadiusMedium,
        roundedCorner6: theme.borderRadiusLarge
    };
};
const createV8Theme = (brandColors, themeV9, isDarkTheme = false, themeV8)=>{
    const baseTheme = themeV8 || (0, _react.createTheme)({
        isInverted: isDarkTheme
    });
    return {
        ...baseTheme,
        palette: mapPalette(brandColors, isDarkTheme),
        components: _fluent2theme.fluent2ComponentStyles,
        semanticColors: mapSemanticColors(baseTheme.semanticColors, themeV9),
        fonts: mapFonts(baseTheme.fonts, themeV9),
        effects: mapEffects(baseTheme.effects, themeV9),
        isInverted: isDarkTheme || (themeV8 === null || themeV8 === void 0 ? void 0 : themeV8.isInverted) === true
    };
};
