import { getRTL } from '@fluentui/react';
export var fluent2SliderThumbSize = 20;
export function getSliderStyles(props) {
    var _a;
    var theme = props.theme, vertical = props.vertical, disabled = props.disabled;
    var semanticColors = theme.semanticColors;
    var slideBoxInactiveSectionStyles = !disabled
        ? {
            backgroundColor: semanticColors.smallInputBorder,
        }
        : undefined;
    var activeSectionStyles = !disabled
        ? {
            backgroundColor: semanticColors.primaryButtonBackgroundHovered,
        }
        : undefined;
    var thumbActiveStyles = !disabled
        ? {
            border: '1px solid ' + semanticColors.smallInputBorder,
        }
        : undefined;
    // since the thumb is now a little bigger,
    // we need to use margin to recenter it in the track
    var thumbMargin = -8;
    var styles = {
        thumb: [
            {
                background: !disabled ? semanticColors.primaryButtonBackground : semanticColors.disabledBorder,
                boxShadow: "0 0 0 4px ".concat(semanticColors.buttonBackground, " inset"),
                borderWidth: 1,
                borderColor: semanticColors.disabledBorder,
                height: fluent2SliderThumbSize,
                width: fluent2SliderThumbSize,
                ':hover': {
                    backgroundColor: !disabled ? semanticColors.primaryButtonBackgroundHovered : semanticColors.disabledBorder,
                },
            },
            vertical
                ? {
                    left: thumbMargin,
                    margin: '0 auto',
                    transform: 'translateY(8px)',
                }
                : {
                    top: thumbMargin,
                    transform: getRTL(theme) ? 'translateX(50%)' : 'translateX(-50%)',
                },
        ],
        activeSection: [
            {
                background: !disabled ? semanticColors.primaryButtonBackground : semanticColors.disabledBorder,
            },
        ],
        inactiveSection: {
            backgroundColor: !disabled ? semanticColors.smallInputBorder : semanticColors.buttonBackgroundDisabled,
        },
        slideBox: [
            (_a = {},
                _a[":active .ms-Slider-inactive"] = slideBoxInactiveSectionStyles,
                _a[":hover .ms-Slider-inactive"] = slideBoxInactiveSectionStyles,
                _a[":active .ms-Slider-active"] = activeSectionStyles,
                _a[":hover .ms-Slider-active"] = activeSectionStyles,
                _a[':active .' + 'ms-Slider-thumb'] = thumbActiveStyles,
                _a[':hover .' + 'ms-Slider-thumb'] = thumbActiveStyles,
                _a),
        ],
    };
    return styles;
}
//# sourceMappingURL=Slider.styles.js.map