{"version":3,"file":"Checkbox.styles.js","sourceRoot":"../src/","sources":["componentStyles/Checkbox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ICheckboxStyleProps, ICheckboxStyles, IStyleFunctionOrObject } from '@fluentui/react';\n\nconst externalPadding = '3px';\n\nconst getTextColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledSubtext;\n  }\n\n  if (checked) {\n    return theme.semanticColors.bodyTextChecked;\n  }\n\n  return theme.semanticColors.inputPlaceholderText;\n};\n\nconst getBorderColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledBorder;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundChecked;\n  }\n\n  return theme.semanticColors.inputPlaceholderText;\n};\n\nconst getBackgroundColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundChecked;\n  }\n\n  return theme.semanticColors.inputBackground;\n};\n\nconst getHoveredBorderColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledBorder;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundCheckedHovered;\n  }\n\n  return theme.semanticColors.inputIconHovered;\n};\n\nconst getHoveredBackgroundColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundCheckedHovered;\n  }\n\n  return theme.semanticColors.inputBackground;\n};\n\nconst getHoveredTextColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledSubtext;\n  }\n\n  return theme.semanticColors.inputIconHovered;\n};\n\nconst getCheckmarkColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.buttonTextDisabled;\n  }\n\n  return undefined;\n};\n\nconst getHoveredCheckmarkColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled, checked } = props;\n\n  if (disabled) {\n    return theme.semanticColors.buttonTextDisabled;\n  }\n\n  if (!checked) {\n    return theme.semanticColors.inputBackground;\n  }\n\n  return undefined;\n};\n\nconst getDefaultCheckboxStyles = (props: ICheckboxStyleProps) => {\n  return {\n    root: {\n      '&:hover .ms-Checkbox-checkbox': {\n        borderColor: getHoveredBorderColor(props),\n        background: getHoveredBackgroundColor(props),\n      },\n      '&:hover .ms-Checkbox-text': {\n        color: getHoveredTextColor(props),\n      },\n      '&:hover .ms-Checkbox-checkmark': {\n        color: getHoveredCheckmarkColor(props),\n      },\n    },\n    label: {\n      gap: '4px',\n      padding: externalPadding,\n    },\n    checkbox: {\n      margin: 0,\n      backgroundColor: getBackgroundColor(props),\n      borderColor: getBorderColor(props),\n    },\n    text: {\n      margin: 0,\n      color: getTextColor(props),\n    },\n    checkmark: {\n      color: getCheckmarkColor(props),\n    },\n  };\n};\n\nexport function getCheckboxStyles(\n  props: ICheckboxStyleProps,\n): IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles> {\n  return getDefaultCheckboxStyles(props);\n}\n"]}