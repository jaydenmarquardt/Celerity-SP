import { FontWeights } from '@fluentui/react';
import { getFluent2InputDisabledStyles, getFluent2InputFocusStyles } from './inputStyleHelpers.utils';
export function getTextFieldStyles(props) {
    var theme = props.theme, focused = props.focused, borderless = props.borderless, underlined = props.underlined, hasErrorMessage = props.hasErrorMessage, disabled = props.disabled;
    var effects = theme.effects, semanticColors = theme.semanticColors, palette = theme.palette;
    var unsetBackgroundColor = { backgroundColor: 'unset' };
    var borderBottomColor = hasErrorMessage ? semanticColors.errorText : palette.neutralPrimary;
    var restBottomBorder = borderless || underlined ? 'unset' : "1px solid ".concat(borderBottomColor);
    var styles = {
        subComponentStyles: {
            label: {
                root: {
                    fontWeight: FontWeights.regular,
                },
            },
        },
        prefix: unsetBackgroundColor,
        suffix: unsetBackgroundColor,
        field: [
            focused && {
                border: 'unset',
                ':after': {
                    border: 'unset',
                },
            },
            disabled && {
                backgroundColor: 'unset',
            },
            {
                borderRadius: effects.roundedCorner4,
                ':after': {
                    borderRadius: effects.roundedCorner4,
                },
            },
        ],
        fieldGroup: [
            {
                borderBottom: restBottomBorder,
                borderRadius: effects.roundedCorner4,
                ':after': {
                    borderRadius: effects.roundedCorner4,
                },
            },
            focused && getFluent2InputFocusStyles(theme, underlined, hasErrorMessage),
            disabled && getFluent2InputDisabledStyles(theme),
            disabled && { borderBottom: "1px solid ".concat(semanticColors.disabledText) },
        ],
    };
    return styles;
}
//# sourceMappingURL=TextField.styles.js.map