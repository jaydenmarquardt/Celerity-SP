var externalPadding = '3px';
var getTextColor = function (props) {
    var theme = props.theme, checked = props.checked, disabled = props.disabled;
    if (disabled) {
        return theme.semanticColors.disabledSubtext;
    }
    if (checked) {
        return theme.semanticColors.bodyTextChecked;
    }
    return theme.semanticColors.inputPlaceholderText;
};
var getBorderColor = function (props) {
    var theme = props.theme, checked = props.checked, disabled = props.disabled;
    if (disabled) {
        return theme.semanticColors.disabledBorder;
    }
    if (checked) {
        return theme.semanticColors.inputBackgroundChecked;
    }
    return theme.semanticColors.inputPlaceholderText;
};
var getBackgroundColor = function (props) {
    var theme = props.theme, checked = props.checked, disabled = props.disabled;
    if (disabled) {
        return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;
    }
    if (checked) {
        return theme.semanticColors.inputBackgroundChecked;
    }
    return theme.semanticColors.inputBackground;
};
var getHoveredBorderColor = function (props) {
    var theme = props.theme, checked = props.checked, disabled = props.disabled;
    if (disabled) {
        return theme.semanticColors.disabledBorder;
    }
    if (checked) {
        return theme.semanticColors.inputBackgroundCheckedHovered;
    }
    return theme.semanticColors.inputIconHovered;
};
var getHoveredBackgroundColor = function (props) {
    var theme = props.theme, checked = props.checked, disabled = props.disabled;
    if (disabled) {
        return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;
    }
    if (checked) {
        return theme.semanticColors.inputBackgroundCheckedHovered;
    }
    return theme.semanticColors.inputBackground;
};
var getHoveredTextColor = function (props) {
    var theme = props.theme, disabled = props.disabled;
    if (disabled) {
        return theme.semanticColors.disabledSubtext;
    }
    return theme.semanticColors.inputIconHovered;
};
var getCheckmarkColor = function (props) {
    var theme = props.theme, disabled = props.disabled;
    if (disabled) {
        return theme.semanticColors.buttonTextDisabled;
    }
    return undefined;
};
var getHoveredCheckmarkColor = function (props) {
    var theme = props.theme, disabled = props.disabled, checked = props.checked;
    if (disabled) {
        return theme.semanticColors.buttonTextDisabled;
    }
    if (!checked) {
        return theme.semanticColors.inputBackground;
    }
    return undefined;
};
var getDefaultCheckboxStyles = function (props) {
    return {
        root: {
            '&:hover .ms-Checkbox-checkbox': {
                borderColor: getHoveredBorderColor(props),
                background: getHoveredBackgroundColor(props),
            },
            '&:hover .ms-Checkbox-text': {
                color: getHoveredTextColor(props),
            },
            '&:hover .ms-Checkbox-checkmark': {
                color: getHoveredCheckmarkColor(props),
            },
        },
        label: {
            gap: '4px',
            padding: externalPadding,
        },
        checkbox: {
            margin: 0,
            backgroundColor: getBackgroundColor(props),
            borderColor: getBorderColor(props),
        },
        text: {
            margin: 0,
            color: getTextColor(props),
        },
        checkmark: {
            color: getCheckmarkColor(props),
        },
    };
};
export function getCheckboxStyles(props) {
    return getDefaultCheckboxStyles(props);
}
//# sourceMappingURL=Checkbox.styles.js.map