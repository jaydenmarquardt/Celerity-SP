import { FontWeights } from '@fluentui/react';
export function getSpinButtonStyles(props) {
    var theme = props.theme, isFocused = props.isFocused, disabled = props.disabled;
    var semanticColors = theme.semanticColors;
    var SpinButtonRootBorderColorFocused = semanticColors.disabledBorder; // sorry for the broken semantics
    var SpinButtonRootBorderColor = semanticColors.inputBorder;
    var SpinButtonBorderBottomColor = isFocused ? theme.palette.themePrimary : theme.palette.neutralPrimary;
    if (disabled) {
        SpinButtonBorderBottomColor = semanticColors.disabledBorder;
        SpinButtonRootBorderColor = semanticColors.disabledBorder;
    }
    var styles = {
        label: {
            fontWeight: FontWeights.regular,
        },
        input: {
            backgroundColor: 'unset',
        },
        spinButtonWrapper: [
            {
                borderBottomColor: SpinButtonBorderBottomColor,
                backgroundColor: 'unset',
            },
            {
                // setting border using pseudo-element here in order to prevent:
                // input and chevron buttons to overlap border under certain resolutions
                ':after': {
                    pointerEvents: 'none',
                    content: "''",
                    position: 'absolute',
                    left: 0,
                    top: 0,
                    bottom: 0,
                    right: 0,
                    borderWidth: '1px',
                    borderStyle: 'solid',
                    borderColor: SpinButtonRootBorderColor,
                    borderBottomColor: SpinButtonBorderBottomColor,
                    borderRadius: theme.effects.roundedCorner4,
                },
            },
            !disabled && [
                {
                    ':hover :': {
                        ':after': {
                            borderStyle: 'solid',
                            borderColor: SpinButtonRootBorderColorFocused,
                            borderBottom: theme.palette.themePrimary,
                            borderWidth: '1px',
                        },
                    },
                },
                isFocused && [
                    {
                        ':hover:after, :after': {
                            borderStyle: 'solid',
                            borderColor: SpinButtonRootBorderColorFocused,
                            borderBottomColor: SpinButtonBorderBottomColor,
                            borderWidth: '1px',
                        },
                    },
                ],
            ],
        ],
    };
    return styles;
}
//# sourceMappingURL=SpinButton.styles.js.map