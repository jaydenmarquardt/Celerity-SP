{"version":3,"file":"SpinButton.styles.js","sourceRoot":"../src/","sources":["componentStyles/SpinButton.styles.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,MAAM,UAAU,mBAAmB,CACjC,KAA4B;IAEpB,IAAA,KAAK,GAA0B,KAAK,MAA/B,EAAE,SAAS,GAAe,KAAK,UAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;IACrC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;IACjC,IAAM,gCAAgC,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC,iCAAiC;IACzG,IAAI,yBAAyB,GAAG,cAAc,CAAC,WAAW,CAAC;IAC3D,IAAI,2BAA2B,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;IAExG,IAAI,QAAQ,EAAE;QACZ,2BAA2B,GAAG,cAAc,CAAC,cAAc,CAAC;QAC5D,yBAAyB,GAAG,cAAc,CAAC,cAAc,CAAC;KAC3D;IAED,IAAM,MAAM,GAA+B;QACzC,KAAK,EAAE;YACL,UAAU,EAAE,WAAW,CAAC,OAAO;SAChC;QACD,KAAK,EAAE;YACL,eAAe,EAAE,OAAO;SACzB;QACD,iBAAiB,EAAE;YACjB;gBACE,iBAAiB,EAAE,2BAA2B;gBAC9C,eAAe,EAAE,OAAO;aACzB;YACD;gBACE,gEAAgE;gBAChE,wEAAwE;gBACxE,QAAQ,EAAE;oBACR,aAAa,EAAE,MAAM;oBACrB,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,CAAC;oBACP,GAAG,EAAE,CAAC;oBACN,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,CAAC;oBACR,WAAW,EAAE,KAAK;oBAClB,WAAW,EAAE,OAAO;oBACpB,WAAW,EAAE,yBAAyB;oBACtC,iBAAiB,EAAE,2BAA2B;oBAC9C,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;iBAC3C;aACF;YACD,CAAC,QAAQ,IAAI;gBACX;oBACE,UAAU,EAAE;wBACV,QAAQ,EAAE;4BACR,WAAW,EAAE,OAAO;4BACpB,WAAW,EAAE,gCAAgC;4BAC7C,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY;4BACxC,WAAW,EAAE,KAAK;yBACnB;qBACF;iBACF;gBACD,SAAS,IAAI;oBACX;wBACE,sBAAsB,EAAE;4BACtB,WAAW,EAAE,OAAO;4BACpB,WAAW,EAAE,gCAAgC;4BAC7C,iBAAiB,EAAE,2BAA2B;4BAC9C,WAAW,EAAE,KAAK;yBACnB;qBACF;iBACF;aACF;SACF;KACF,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import type { ISpinButtonStyleProps, ISpinButtonStyles, IStyleFunctionOrObject } from '@fluentui/react';\nimport { FontWeights } from '@fluentui/react';\n\nexport function getSpinButtonStyles(\n  props: ISpinButtonStyleProps,\n): IStyleFunctionOrObject<ISpinButtonStyleProps, ISpinButtonStyles> {\n  const { theme, isFocused, disabled } = props;\n  const { semanticColors } = theme;\n  const SpinButtonRootBorderColorFocused = semanticColors.disabledBorder; // sorry for the broken semantics\n  let SpinButtonRootBorderColor = semanticColors.inputBorder;\n  let SpinButtonBorderBottomColor = isFocused ? theme.palette.themePrimary : theme.palette.neutralPrimary;\n\n  if (disabled) {\n    SpinButtonBorderBottomColor = semanticColors.disabledBorder;\n    SpinButtonRootBorderColor = semanticColors.disabledBorder;\n  }\n\n  const styles: Partial<ISpinButtonStyles> = {\n    label: {\n      fontWeight: FontWeights.regular,\n    },\n    input: {\n      backgroundColor: 'unset',\n    },\n    spinButtonWrapper: [\n      {\n        borderBottomColor: SpinButtonBorderBottomColor,\n        backgroundColor: 'unset',\n      },\n      {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderBottomColor: SpinButtonBorderBottomColor,\n          borderRadius: theme.effects.roundedCorner4,\n        },\n      },\n      !disabled && [\n        {\n          ':hover :': {\n            ':after': {\n              borderStyle: 'solid',\n              borderColor: SpinButtonRootBorderColorFocused,\n              borderBottom: theme.palette.themePrimary,\n              borderWidth: '1px',\n            },\n          },\n        },\n        isFocused && [\n          {\n            ':hover:after, :after': {\n              borderStyle: 'solid',\n              borderColor: SpinButtonRootBorderColorFocused,\n              borderBottomColor: SpinButtonBorderBottomColor,\n              borderWidth: '1px',\n            },\n          },\n        ],\n      ],\n    ],\n  };\n\n  return styles;\n}\n"]}