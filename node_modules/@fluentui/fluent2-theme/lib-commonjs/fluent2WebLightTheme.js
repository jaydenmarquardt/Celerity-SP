"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fluent2WebLightTheme = void 0;
var tslib_1 = require("tslib");
var react_1 = require("@fluentui/react");
var fluent2ComponentStyles_1 = require("./fluent2ComponentStyles");
var fluent2SharedColors_1 = require("./fluent2SharedColors");
var fluent2ForV8DLightEffects = {
    elevation4: '0px 2px 4px rgba(0, 0, 0, 0.14), 0px 0px 2px rgba(0, 0, 0, 0.12)',
    elevation8: '0px 4px 8px rgba(0, 0, 0, 0.14), 0px 0px 2px rgba(0, 0, 0, 0.12)',
    elevation16: '0px 8px 16px rgba(0, 0, 0, 0.14), 0px 0px 2px rgba(0, 0, 0, 0.12)',
    elevation64: '0px 32px 64px rgba(0, 0, 0, 0.24), 0px 0px 8px rgba(0, 0, 0, 0.2)',
    roundedCorner2: '2px',
    roundedCorner4: '4px',
    roundedCorner6: '6px',
    roundedCorner8: '8px',
    roundedCornerCircle: '50%',
};
// grays used in semantic slots but don't fit in the palette.
var grey38 = '#616161';
var grey26 = '#424242';
var grey74 = '#BDBDBD';
var fluent2LightPalette = tslib_1.__assign({ 
    // properties are ordered here as in IPalette.ts
    themeDarker: '#0c3b5e', themeDark: '#0f548c', themeDarkAlt: '#115ea3', themePrimary: '#0f6cbd', themeSecondary: '#2886de', themeTertiary: '#77b7f7', themeLight: '#b4d6fa', themeLighter: '#cfe4fa', themeLighterAlt: '#ebf3fc', black: '#000000', blackTranslucent40: 'rgba(0, 0, 0, 0.4)', neutralDark: '#141414', neutralPrimary: '#242424', neutralPrimaryAlt: '#383838', neutralSecondary: '#5c5c5c', neutralSecondaryAlt: '#8a8886', neutralTertiary: '#9e9e9e', neutralTertiaryAlt: '#c7c7c7', neutralQuaternary: '#d1d1d1', neutralQuaternaryAlt: '#e0e0e0', neutralLight: '#ebebeb', neutralLighter: '#f5f5f5', neutralLighterAlt: '#fafafa', accent: '#0f6cbd', white: '#FFFFFF', whiteTranslucent40: 'rgba(255 ,255 ,255 ,0.4)' }, fluent2SharedColors_1.fluent2SharedColors);
var p = fluent2LightPalette;
var semanticColorMappingOverridesForLight = {
    // Extended slots
    inputBottomBorderFocus: p.themePrimary,
    inputBottomBorderRest: p.neutralLighter,
    // Base slot mapping changes
    // focusBorder seems to be used for keyboard focus on components that don't have text input.
    // inputFocusBorder seems to be used for keyboard focus on text input components.
    focusBorder: p.neutralTertiary,
    inputBorder: p.neutralQuaternary,
    // Checkbox
    inputBackgroundChecked: p.themePrimary,
    inputBackground: p.white,
    bodyTextChecked: p.neutralPrimary,
    inputBackgroundCheckedHovered: p.themeDarkAlt,
    // Errors and warnings
    warningText: p.neutralPrimary,
    // Message bar colors
    messageText: p.neutralPrimary,
    messageLink: p.themeDarkAlt,
    messageLinkHovered: p.themeDarker,
    infoIcon: p.neutralSecondary,
    warningIcon: p.neutralPrimary,
    infoBackground: p.neutralLighter,
    // Grey values
    inputIconHovered: grey26,
    inputPlaceholderText: grey38,
    disabledBorder: grey74,
    disabledText: grey74,
};
exports.Fluent2WebLightTheme = (0, react_1.createTheme)({
    palette: fluent2LightPalette,
    semanticColors: semanticColorMappingOverridesForLight,
    components: fluent2ComponentStyles_1.fluent2ComponentStyles,
    effects: fluent2ForV8DLightEffects,
});
//# sourceMappingURL=fluent2WebLightTheme.js.map