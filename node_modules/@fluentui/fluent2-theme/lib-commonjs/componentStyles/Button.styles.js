"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSplitButtonStyles = exports.getDefaultButtonStyles = exports.getIconButtonStyles = exports.getPrimaryButtonStyles = exports.getStandardButtonStyles = void 0;
var tslib_1 = require("tslib");
var react_1 = require("@fluentui/react");
var getFocusStyle = function (borderColor, borderRadius, outlineColor) { return ({
    '.ms-Fabric--isFocusVisible &:focus::after': {
        border: "1px solid ".concat(borderColor),
        borderRadius: borderRadius,
        inset: '1px',
        outline: "2px solid ".concat(outlineColor),
    },
}); };
function getBaseButtonStyles(theme) {
    var effects = theme.effects;
    return {
        root: {
            paddingLeft: '12px',
            paddingRight: '12px',
            borderRadius: effects.roundedCorner4,
        },
    };
}
function getStandardButtonStyles(theme) {
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var styles = {
        root: tslib_1.__assign({ borderColor: semanticColors.buttonBorder, color: semanticColors.buttonText }, getFocusStyle('transparent', effects.roundedCorner2, semanticColors.focusBorder)),
        rootHovered: {
            backgroundColor: semanticColors.buttonBackgroundHovered,
            borderColor: palette.neutralTertiaryAlt,
            color: semanticColors.buttonTextHovered,
        },
        rootPressed: {
            backgroundColor: semanticColors.buttonBackgroundPressed,
            borderColor: palette.neutralTertiary,
            color: semanticColors.buttonTextPressed,
        },
        rootDisabled: {
            backgroundColor: semanticColors.buttonBackgroundDisabled,
            borderColor: semanticColors.buttonBorderDisabled,
            color: semanticColors.buttonTextDisabled,
        },
    };
    return styles;
}
exports.getStandardButtonStyles = getStandardButtonStyles;
function getPrimaryButtonStyles(theme) {
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var styles = {
        root: tslib_1.__assign({ backgroundColor: semanticColors.primaryButtonBackground, borderColor: semanticColors.primaryButtonBorder, color: semanticColors.primaryButtonText }, getFocusStyle(palette.white, effects.roundedCorner2, semanticColors.focusBorder)),
        rootHovered: {
            backgroundColor: semanticColors.primaryButtonBackgroundHovered,
            borderColor: semanticColors.primaryButtonBackgroundHovered,
            color: semanticColors.primaryButtonTextHovered,
        },
        rootPressed: {
            backgroundColor: semanticColors.primaryButtonBackgroundPressed,
            borderColor: semanticColors.primaryButtonBackgroundPressed,
            color: semanticColors.primaryButtonTextPressed,
        },
        rootDisabled: {
            backgroundColor: semanticColors.primaryButtonBackgroundDisabled,
            borderColor: semanticColors.primaryButtonBackgroundDisabled,
            color: semanticColors.primaryButtonTextDisabled,
        },
        description: {
            color: semanticColors.primaryButtonText,
        },
        descriptionHovered: {
            color: semanticColors.primaryButtonText,
        },
    };
    return styles;
}
exports.getPrimaryButtonStyles = getPrimaryButtonStyles;
function getIconButtonStyles(props) {
    var theme = props.theme;
    var _a = theme, effects = _a.effects, palette = _a.palette, semanticColors = _a.semanticColors;
    var styles = {
        root: tslib_1.__assign({ borderColor: 'transparent', borderRadius: effects.roundedCorner4, color: palette.neutralPrimaryAlt }, getFocusStyle('transparent', effects.roundedCorner2, semanticColors.focusBorder)),
        rootHovered: {
            backgroundColor: palette.neutralLighter,
            borderColor: palette.neutralLighter,
            color: semanticColors.buttonTextHovered,
        },
        rootPressed: {
            backgroundColor: semanticColors.buttonBackgroundPressed,
            borderColor: semanticColors.buttonBackgroundPressed,
            color: semanticColors.buttonTextPressed,
        },
        rootDisabled: {
            backgroundColor: 'transparent',
            borderColor: 'transparent',
            color: semanticColors.buttonTextDisabled,
        },
    };
    return styles;
}
exports.getIconButtonStyles = getIconButtonStyles;
function getDefaultButtonStyles(props) {
    var theme = props.theme, primary = props.primary, split = props.split;
    return (0, react_1.concatStyleSets)(getBaseButtonStyles(theme), primary ? getPrimaryButtonStyles(theme) : getStandardButtonStyles(theme), split && getSplitButtonStyles(theme));
}
exports.getDefaultButtonStyles = getDefaultButtonStyles;
var fluent2SplitButtonDividerStyles = {
    position: 'relative',
    top: 'unset',
    bottom: 'unset',
};
function getSplitButtonStyles(theme) {
    var styles = {
        splitButtonMenuButton: {
            borderRadius: 'unset',
            borderTopRightRadius: theme === null || theme === void 0 ? void 0 : theme.effects.roundedCorner4,
            borderBottomRightRadius: theme === null || theme === void 0 ? void 0 : theme.effects.roundedCorner4,
        },
        splitButtonDivider: fluent2SplitButtonDividerStyles,
        splitButtonDividerDisabled: fluent2SplitButtonDividerStyles,
    };
    return styles;
}
exports.getSplitButtonStyles = getSplitButtonStyles;
//# sourceMappingURL=Button.styles.js.map