{"version":3,"file":"Button.styles.js","sourceRoot":"../src/","sources":["componentStyles/Button.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IButtonProps, IButtonStyles, IStyle, IStyleFunctionOrObject, ITheme } from '@fluentui/react';\nimport { concatStyleSets } from '@fluentui/react';\n\ntype FocusStyleType = {\n  '.ms-Fabric--isFocusVisible &:focus::after': {\n    border: string;\n    borderRadius: string;\n    inset: string;\n    outline: string;\n  };\n};\n\nconst getFocusStyle = (borderColor: string, borderRadius: string, outlineColor: string): FocusStyleType => ({\n  '.ms-Fabric--isFocusVisible &:focus::after': {\n    border: `1px solid ${borderColor}`,\n    borderRadius,\n    inset: '1px',\n    outline: `2px solid ${outlineColor}`,\n  },\n});\n\nfunction getBaseButtonStyles(theme: ITheme): Partial<IButtonStyles> {\n  const { effects } = theme;\n\n  return {\n    root: {\n      paddingLeft: '12px',\n      paddingRight: '12px',\n      borderRadius: effects.roundedCorner4,\n    },\n  };\n}\n\nexport function getStandardButtonStyles(theme: ITheme): Partial<IButtonStyles> {\n  const { effects, palette, semanticColors } = theme;\n\n  const styles: Partial<IButtonStyles> = {\n    root: {\n      borderColor: semanticColors.buttonBorder,\n      color: semanticColors.buttonText,\n      ...getFocusStyle('transparent', effects.roundedCorner2, semanticColors.focusBorder),\n    },\n    rootHovered: {\n      backgroundColor: semanticColors.buttonBackgroundHovered,\n      borderColor: palette.neutralTertiaryAlt,\n      color: semanticColors.buttonTextHovered,\n    },\n    rootPressed: {\n      backgroundColor: semanticColors.buttonBackgroundPressed,\n      borderColor: palette.neutralTertiary,\n      color: semanticColors.buttonTextPressed,\n    },\n    rootDisabled: {\n      backgroundColor: semanticColors.buttonBackgroundDisabled,\n      borderColor: semanticColors.buttonBorderDisabled,\n      color: semanticColors.buttonTextDisabled,\n    },\n  };\n\n  return styles;\n}\n\nexport function getPrimaryButtonStyles(theme: ITheme): Partial<IButtonStyles> {\n  const { effects, palette, semanticColors } = theme;\n\n  const styles: Partial<IButtonStyles> = {\n    root: {\n      backgroundColor: semanticColors.primaryButtonBackground,\n      borderColor: semanticColors.primaryButtonBorder,\n      color: semanticColors.primaryButtonText,\n      ...getFocusStyle(palette.white, effects.roundedCorner2, semanticColors.focusBorder),\n    },\n    rootHovered: {\n      backgroundColor: semanticColors.primaryButtonBackgroundHovered,\n      borderColor: semanticColors.primaryButtonBackgroundHovered,\n      color: semanticColors.primaryButtonTextHovered,\n    },\n    rootPressed: {\n      backgroundColor: semanticColors.primaryButtonBackgroundPressed,\n      borderColor: semanticColors.primaryButtonBackgroundPressed,\n      color: semanticColors.primaryButtonTextPressed,\n    },\n    rootDisabled: {\n      backgroundColor: semanticColors.primaryButtonBackgroundDisabled,\n      borderColor: semanticColors.primaryButtonBackgroundDisabled,\n      color: semanticColors.primaryButtonTextDisabled,\n    },\n    description: {\n      color: semanticColors.primaryButtonText,\n    },\n    descriptionHovered: {\n      color: semanticColors.primaryButtonText,\n    },\n  };\n\n  return styles;\n}\n\nexport function getIconButtonStyles(props: IButtonProps): IStyleFunctionOrObject<IButtonProps, IButtonStyles> {\n  const { theme } = props;\n  const { effects, palette, semanticColors } = theme!;\n\n  const styles: Partial<IButtonStyles> = {\n    root: {\n      borderColor: 'transparent',\n      borderRadius: effects.roundedCorner4,\n      color: palette.neutralPrimaryAlt,\n      ...getFocusStyle('transparent', effects.roundedCorner2, semanticColors.focusBorder),\n    },\n    rootHovered: {\n      backgroundColor: palette.neutralLighter,\n      borderColor: palette.neutralLighter,\n      color: semanticColors.buttonTextHovered,\n    },\n    rootPressed: {\n      backgroundColor: semanticColors.buttonBackgroundPressed,\n      borderColor: semanticColors.buttonBackgroundPressed,\n      color: semanticColors.buttonTextPressed,\n    },\n    rootDisabled: {\n      backgroundColor: 'transparent',\n      borderColor: 'transparent',\n      color: semanticColors.buttonTextDisabled,\n    },\n  };\n\n  return styles;\n}\n\nexport function getDefaultButtonStyles(props: IButtonProps): IStyleFunctionOrObject<IButtonProps, IButtonStyles> {\n  const { theme, primary, split } = props;\n\n  return concatStyleSets(\n    getBaseButtonStyles(theme!),\n    primary ? getPrimaryButtonStyles(theme!) : getStandardButtonStyles(theme!),\n    split && getSplitButtonStyles(theme!),\n  );\n}\n\nconst fluent2SplitButtonDividerStyles: IStyle = {\n  position: 'relative',\n  top: 'unset',\n  bottom: 'unset',\n};\n\nexport function getSplitButtonStyles(theme: ITheme): Partial<IButtonStyles> {\n  const styles: Partial<IButtonStyles> = {\n    splitButtonMenuButton: {\n      borderRadius: 'unset',\n      borderTopRightRadius: theme?.effects.roundedCorner4,\n      borderBottomRightRadius: theme?.effects.roundedCorner4,\n    },\n    splitButtonDivider: fluent2SplitButtonDividerStyles,\n    splitButtonDividerDisabled: fluent2SplitButtonDividerStyles,\n  };\n\n  return styles;\n}\n"]}