{"version":3,"file":"Toggle.styles.js","sourceRoot":"../src/","sources":["componentStyles/Toggle.styles.ts"],"names":[],"mappings":";;;;IAEA,IAAM,sBAAsB,GAAG,UAAC,KAAwB;QAC9C,IAAA,KAAK,GAAwB,KAAK,MAA7B,EAAE,OAAO,GAAe,KAAK,QAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QACnC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QAEjC,IAAI,OAAO,EAAE;YACX,OAAO,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC,CAAC,cAAc,CAAC,sBAAsB,CAAC;SACnG;aAAM,IAAI,CAAC,OAAO,EAAE;YACnB,OAAO,cAAc,CAAC,mBAAmB,CAAC;SAC3C;QAED,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,IAAM,6BAA6B,GAAG,UAAC,KAAwB;QACrD,IAAA,KAAK,GAAwB,KAAK,MAA7B,EAAE,OAAO,GAAe,KAAK,QAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QACnC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QAEjC,IAAI,OAAO,EAAE;YACX,OAAO,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC,CAAC,cAAc,CAAC,6BAA6B,CAAC;SAC1G;aAAM,IAAI,CAAC,OAAO,EAAE;YACnB,OAAO,cAAc,CAAC,mBAAmB,CAAC;SAC3C;QAED,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,IAAM,6BAA6B,GAAG,UAAC,KAAwB;QACrD,IAAA,KAAK,GAAwB,KAAK,MAA7B,EAAE,OAAO,GAAe,KAAK,QAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QACnC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QAEjC,IAAI,OAAO,EAAE;YACX,OAAO,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,cAAc,CAAC,8BAA8B,CAAC;SACrG;aAAM,IAAI,CAAC,OAAO,EAAE;YACnB,OAAO,cAAc,CAAC,mBAAmB,CAAC;SAC3C;QAED,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG,UAAC,KAAwB;QACrC,IAAA,KAAK,GAAe,KAAK,MAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QAC1B,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QAEjC,OAAO,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC;IAClF,CAAC,CAAC;IAEK,IAAM,eAAe,GAAG,UAAC,KAAwB;QAC9C,IAAA,KAAK,GAAe,KAAK,MAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QAC1B,IAAA,cAAc,GAAc,KAAK,eAAnB,EAAE,OAAO,GAAK,KAAK,QAAV,CAAW;QAE1C,OAAO;YACL,IAAI,EAAE,EAAE;YACR,KAAK,EAAE;gBACL,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC;aAC5B;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,MAAM;gBACb,MAAM,EAAE,MAAM;gBACd,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS;aACzE;YACD,SAAS,EAAE,EAAE;YACb,IAAI,EAAE;gBACJ,eAAe,EAAE,sBAAsB,CAAC,KAAK,CAAC;gBAC9C,SAAS,EAAE;oBACT,eAAe,EAAE,6BAA6B,CAAC,KAAK,CAAC;iBACtD;gBACD,UAAU,EAAE;oBACV,eAAe,EAAE,6BAA6B,CAAC,KAAK,CAAC;iBACtD;gBACD,gBAAgB,EAAE;oBAChB,YAAY,EAAE,OAAO,CAAC,cAAc;oBACpC,YAAY,EAAE,KAAK;iBACpB;aACF;YACD,IAAI,EAAE,EAAE;SACT,CAAC;IACJ,CAAC,CAAC;IA9BW,QAAA,eAAe,mBA8B1B","sourcesContent":["import type { IToggleStyleProps, IToggleStyles } from '@fluentui/react';\n\nconst getPillBackgroundColor = (props: IToggleStyleProps) => {\n  const { theme, checked, disabled } = props;\n  const { semanticColors } = theme;\n\n  if (checked) {\n    return disabled ? semanticColors.buttonBackgroundDisabled : semanticColors.inputBackgroundChecked;\n  } else if (!checked) {\n    return semanticColors.primaryButtonBorder;\n  }\n\n  return undefined;\n};\n\nconst getHoveredPillBackgroundColor = (props: IToggleStyleProps) => {\n  const { theme, checked, disabled } = props;\n  const { semanticColors } = theme;\n\n  if (checked) {\n    return disabled ? semanticColors.buttonBackgroundDisabled : semanticColors.inputBackgroundCheckedHovered;\n  } else if (!checked) {\n    return semanticColors.primaryButtonBorder;\n  }\n\n  return undefined;\n};\n\nconst getPressedPillBackgroundColor = (props: IToggleStyleProps) => {\n  const { theme, checked, disabled } = props;\n  const { semanticColors } = theme;\n\n  if (checked) {\n    return disabled ? semanticColors.disabledBackground : semanticColors.primaryButtonBackgroundPressed;\n  } else if (!checked) {\n    return semanticColors.primaryButtonBorder;\n  }\n\n  return undefined;\n};\n\nconst getLabelColor = (props: IToggleStyleProps) => {\n  const { theme, disabled } = props;\n  const { semanticColors } = theme;\n\n  return disabled ? semanticColors.disabledBodySubtext : semanticColors.inputText;\n};\n\nexport const getToggleStyles = (props: IToggleStyleProps): Partial<IToggleStyles> => {\n  const { theme, disabled } = props;\n  const { semanticColors, effects } = theme;\n\n  return {\n    root: {},\n    label: {\n      color: getLabelColor(props),\n    },\n    thumb: {\n      width: '14px',\n      height: '14px',\n      backgroundColor: disabled ? semanticColors.inputIconDisabled : undefined,\n    },\n    container: {},\n    pill: {\n      backgroundColor: getPillBackgroundColor(props),\n      '&:hover': {\n        backgroundColor: getHoveredPillBackgroundColor(props),\n      },\n      '&:active': {\n        backgroundColor: getPressedPillBackgroundColor(props),\n      },\n      '&:focus&:after': {\n        borderRadius: effects.roundedCorner4,\n        outlineWidth: '2px',\n      },\n    },\n    text: {},\n  };\n};\n"]}