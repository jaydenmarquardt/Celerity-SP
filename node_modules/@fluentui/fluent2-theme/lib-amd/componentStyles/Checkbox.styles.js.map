{"version":3,"file":"Checkbox.styles.js","sourceRoot":"../src/","sources":["componentStyles/Checkbox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ICheckboxStyleProps, ICheckboxStyles, IStyleFunctionOrObject } from '@fluentui/react';\n\nconst externalPadding = '3px';\n\nconst getTextColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledSubtext;\n  }\n\n  if (checked) {\n    return theme.semanticColors.bodyTextChecked;\n  }\n\n  return theme.semanticColors.inputPlaceholderText;\n};\n\nconst getBorderColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledBorder;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundChecked;\n  }\n\n  return theme.semanticColors.inputPlaceholderText;\n};\n\nconst getBackgroundColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundChecked;\n  }\n\n  return theme.semanticColors.inputBackground;\n};\n\nconst getHoveredBorderColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledBorder;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundCheckedHovered;\n  }\n\n  return theme.semanticColors.inputIconHovered;\n};\n\nconst getHoveredBackgroundColor = (props: ICheckboxStyleProps) => {\n  const { theme, checked, disabled } = props;\n\n  if (disabled) {\n    return checked ? theme.semanticColors.disabledBorder : theme.semanticColors.inputBackground;\n  }\n\n  if (checked) {\n    return theme.semanticColors.inputBackgroundCheckedHovered;\n  }\n\n  return theme.semanticColors.inputBackground;\n};\n\nconst getHoveredTextColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.disabledSubtext;\n  }\n\n  return theme.semanticColors.inputIconHovered;\n};\n\nconst getCheckmarkColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled } = props;\n\n  if (disabled) {\n    return theme.semanticColors.buttonTextDisabled;\n  }\n\n  return undefined;\n};\n\nconst getHoveredCheckmarkColor = (props: ICheckboxStyleProps) => {\n  const { theme, disabled, checked } = props;\n\n  if (disabled) {\n    return theme.semanticColors.buttonTextDisabled;\n  }\n\n  if (!checked) {\n    return theme.semanticColors.inputBackground;\n  }\n\n  return undefined;\n};\n\nconst getDefaultCheckboxStyles = (props: ICheckboxStyleProps) => {\n  return {\n    root: {\n      '&:hover .ms-Checkbox-checkbox': {\n        borderColor: getHoveredBorderColor(props),\n        background: getHoveredBackgroundColor(props),\n      },\n      '&:hover .ms-Checkbox-text': {\n        color: getHoveredTextColor(props),\n      },\n      '&:hover .ms-Checkbox-checkmark': {\n        color: getHoveredCheckmarkColor(props),\n      },\n    },\n    label: {\n      gap: '4px',\n      padding: externalPadding,\n    },\n    checkbox: {\n      margin: 0,\n      backgroundColor: getBackgroundColor(props),\n      borderColor: getBorderColor(props),\n    },\n    text: {\n      margin: 0,\n      color: getTextColor(props),\n    },\n    checkmark: {\n      color: getCheckmarkColor(props),\n    },\n  };\n};\n\nexport function getCheckboxStyles(\n  props: ICheckboxStyleProps,\n): IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles> {\n  return getDefaultCheckboxStyles(props);\n}\n"]}