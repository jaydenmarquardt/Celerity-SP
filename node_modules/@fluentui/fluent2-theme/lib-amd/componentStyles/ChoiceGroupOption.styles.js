define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChoiceGroupOptionStyles = exports.getDefaultChoiceGroupOptionStyles = void 0;
    var getChoiceGroupOptionColor = function (props) {
        var theme = props.theme, checked = props.checked, disabled = props.disabled;
        if (disabled) {
            return theme.semanticColors.disabledText;
        }
        else if (checked) {
            return theme.semanticColors.inputBackgroundChecked;
        }
        else {
            return theme.semanticColors.inputPlaceholderText;
        }
    };
    var getChoiceGroupTextColor = function (props) {
        var theme = props.theme, checked = props.checked, disabled = props.disabled;
        if (disabled) {
            return theme.semanticColors.disabledText;
        }
        else if (checked) {
            return theme.semanticColors.inputIconHovered;
        }
        else {
            return theme.semanticColors.inputPlaceholderText;
        }
    };
    var getHoveredChoiceGroupOptionColor = function (props) {
        var theme = props.theme, disabled = props.disabled;
        if (disabled) {
            return theme.semanticColors.disabledText;
        }
        else {
            return theme.semanticColors.inputIconHovered;
        }
    };
    var getInnerCircleColor = function (props, isHover) {
        var theme = props.theme, checked = props.checked, disabled = props.disabled;
        if (disabled && checked) {
            return theme.semanticColors.disabledText;
        }
        else if (checked) {
            if (isHover) {
                return theme.semanticColors.inputBackgroundCheckedHovered;
            }
            return theme.semanticColors.inputBackgroundChecked;
        }
        else {
            return 'transparent';
        }
    };
    var getOuterCircleColor = function (props, isHover) {
        var theme = props.theme, checked = props.checked, disabled = props.disabled;
        if (disabled) {
            return theme.semanticColors.disabledText;
        }
        else if (checked) {
            if (isHover) {
                return theme.semanticColors.inputBackgroundCheckedHovered;
            }
            return theme.semanticColors.inputBackgroundChecked;
        }
        else {
            return theme.semanticColors.inputIconHovered;
        }
    };
    var getTextHoverColor = function (props) {
        var theme = props.theme, checked = props.checked, disabled = props.disabled;
        if (disabled) {
            return theme.semanticColors.disabledText;
        }
        else if (checked) {
            return getChoiceGroupTextColor(props);
        }
        else {
            return theme.semanticColors.inputIconHovered;
        }
    };
    var getDefaultChoiceGroupOptionStyles = function (props) {
        return {
            field: {
                color: getChoiceGroupTextColor(props),
                '.ms-ChoiceFieldLabel': {
                    color: getChoiceGroupTextColor(props),
                },
                '&:hover .ms-ChoiceFieldLabel': {
                    color: getTextHoverColor(props),
                },
                selectors: {
                    // The circle
                    '::before': {
                        borderColor: getChoiceGroupOptionColor(props),
                        width: '17px',
                        height: '17px',
                        margin: '2px',
                    },
                    // the inner dot
                    '::after': {
                        width: '11px',
                        height: '11px',
                        background: getInnerCircleColor(props, false),
                        borderColor: getInnerCircleColor(props, false),
                    },
                    ':hover': {
                        color: getHoveredChoiceGroupOptionColor(props),
                    },
                    ':hover::before': {
                        borderColor: getOuterCircleColor(props, true),
                    },
                    ':hover::after': {
                        background: getInnerCircleColor(props, true),
                        borderColor: getInnerCircleColor(props, true),
                    },
                },
            },
        };
    };
    exports.getDefaultChoiceGroupOptionStyles = getDefaultChoiceGroupOptionStyles;
    function getChoiceGroupOptionStyles(props) {
        return (0, exports.getDefaultChoiceGroupOptionStyles)(props);
    }
    exports.getChoiceGroupOptionStyles = getChoiceGroupOptionStyles;
});
//# sourceMappingURL=ChoiceGroupOption.styles.js.map