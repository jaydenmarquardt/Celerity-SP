{"version":3,"file":"TextField.styles.js","sourceRoot":"../src/","sources":["componentStyles/TextField.styles.ts"],"names":[],"mappings":";;;;IAIA,SAAgB,kBAAkB,CAChC,KAA2B;QAEnB,IAAA,KAAK,GAAiE,KAAK,MAAtE,EAAE,OAAO,GAAwD,KAAK,QAA7D,EAAE,UAAU,GAA4C,KAAK,WAAjD,EAAE,UAAU,GAAgC,KAAK,WAArC,EAAE,eAAe,GAAe,KAAK,gBAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QAC5E,IAAA,OAAO,GAA8B,KAAK,QAAnC,EAAE,cAAc,GAAc,KAAK,eAAnB,EAAE,OAAO,GAAK,KAAK,QAAV,CAAW;QAEnD,IAAM,oBAAoB,GAAG,EAAE,eAAe,EAAE,OAAO,EAAE,CAAC;QAE1D,IAAM,iBAAiB,GAAG,eAAe,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC;QAE9F,IAAM,gBAAgB,GAAG,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAa,iBAAiB,CAAE,CAAC;QAE/F,IAAM,MAAM,GAA8B;YACxC,kBAAkB,EAAE;gBAClB,KAAK,EAAE;oBACL,IAAI,EAAE;wBACJ,UAAU,EAAE,mBAAW,CAAC,OAAO;qBAChC;iBACF;aACF;YACD,MAAM,EAAE,oBAAoB;YAC5B,MAAM,EAAE,oBAAoB;YAC5B,KAAK,EAAE;gBACL,OAAO,IAAI;oBACT,MAAM,EAAE,OAAO;oBACf,QAAQ,EAAE;wBACR,MAAM,EAAE,OAAO;qBAChB;iBACF;gBACD,QAAQ,IAAI;oBACV,eAAe,EAAE,OAAO;iBACzB;gBACD;oBACE,YAAY,EAAE,OAAO,CAAC,cAAc;oBACpC,QAAQ,EAAE;wBACR,YAAY,EAAE,OAAO,CAAC,cAAc;qBACrC;iBACF;aACF;YACD,UAAU,EAAE;gBACV;oBACE,YAAY,EAAE,gBAAgB;oBAC9B,YAAY,EAAE,OAAO,CAAC,cAAc;oBACpC,QAAQ,EAAE;wBACR,YAAY,EAAE,OAAO,CAAC,cAAc;qBACrC;iBACF;gBACD,OAAO,IAAI,IAAA,oDAA0B,EAAC,KAAK,EAAE,UAAU,EAAE,eAAe,CAAC;gBACzE,QAAQ,IAAI,IAAA,uDAA6B,EAAC,KAAK,CAAC;gBAChD,QAAQ,IAAI,EAAE,YAAY,EAAE,oBAAa,cAAc,CAAC,YAAY,CAAE,EAAE;aACzE;SACF,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAtDD,gDAsDC","sourcesContent":["import type { IStyleFunctionOrObject, ITextFieldStyleProps, ITextFieldStyles } from '@fluentui/react';\nimport { FontWeights } from '@fluentui/react';\nimport { getFluent2InputDisabledStyles, getFluent2InputFocusStyles } from './inputStyleHelpers.utils';\n\nexport function getTextFieldStyles(\n  props: ITextFieldStyleProps,\n): IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles> {\n  const { theme, focused, borderless, underlined, hasErrorMessage, disabled } = props;\n  const { effects, semanticColors, palette } = theme;\n\n  const unsetBackgroundColor = { backgroundColor: 'unset' };\n\n  const borderBottomColor = hasErrorMessage ? semanticColors.errorText : palette.neutralPrimary;\n\n  const restBottomBorder = borderless || underlined ? 'unset' : `1px solid ${borderBottomColor}`;\n\n  const styles: Partial<ITextFieldStyles> = {\n    subComponentStyles: {\n      label: {\n        root: {\n          fontWeight: FontWeights.regular,\n        },\n      },\n    },\n    prefix: unsetBackgroundColor,\n    suffix: unsetBackgroundColor,\n    field: [\n      focused && {\n        border: 'unset',\n        ':after': {\n          border: 'unset',\n        },\n      },\n      disabled && {\n        backgroundColor: 'unset',\n      },\n      {\n        borderRadius: effects.roundedCorner4,\n        ':after': {\n          borderRadius: effects.roundedCorner4,\n        },\n      },\n    ],\n    fieldGroup: [\n      {\n        borderBottom: restBottomBorder,\n        borderRadius: effects.roundedCorner4,\n        ':after': {\n          borderRadius: effects.roundedCorner4,\n        },\n      },\n      focused && getFluent2InputFocusStyles(theme, underlined, hasErrorMessage),\n      disabled && getFluent2InputDisabledStyles(theme),\n      disabled && { borderBottom: `1px solid ${semanticColors.disabledText}` },\n    ],\n  };\n\n  return styles;\n}\n"]}