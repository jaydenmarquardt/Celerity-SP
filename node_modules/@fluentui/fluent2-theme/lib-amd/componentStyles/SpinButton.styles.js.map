{"version":3,"file":"SpinButton.styles.js","sourceRoot":"../src/","sources":["componentStyles/SpinButton.styles.ts"],"names":[],"mappings":";;;;IAGA,SAAgB,mBAAmB,CACjC,KAA4B;QAEpB,IAAA,KAAK,GAA0B,KAAK,MAA/B,EAAE,SAAS,GAAe,KAAK,UAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;QACrC,IAAA,cAAc,GAAK,KAAK,eAAV,CAAW;QACjC,IAAM,gCAAgC,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC,iCAAiC;QACzG,IAAI,yBAAyB,GAAG,cAAc,CAAC,WAAW,CAAC;QAC3D,IAAI,2BAA2B,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;QAExG,IAAI,QAAQ,EAAE;YACZ,2BAA2B,GAAG,cAAc,CAAC,cAAc,CAAC;YAC5D,yBAAyB,GAAG,cAAc,CAAC,cAAc,CAAC;SAC3D;QAED,IAAM,MAAM,GAA+B;YACzC,KAAK,EAAE;gBACL,UAAU,EAAE,mBAAW,CAAC,OAAO;aAChC;YACD,KAAK,EAAE;gBACL,eAAe,EAAE,OAAO;aACzB;YACD,iBAAiB,EAAE;gBACjB;oBACE,iBAAiB,EAAE,2BAA2B;oBAC9C,eAAe,EAAE,OAAO;iBACzB;gBACD;oBACE,gEAAgE;oBAChE,wEAAwE;oBACxE,QAAQ,EAAE;wBACR,aAAa,EAAE,MAAM;wBACrB,OAAO,EAAE,IAAI;wBACb,QAAQ,EAAE,UAAU;wBACpB,IAAI,EAAE,CAAC;wBACP,GAAG,EAAE,CAAC;wBACN,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,WAAW,EAAE,KAAK;wBAClB,WAAW,EAAE,OAAO;wBACpB,WAAW,EAAE,yBAAyB;wBACtC,iBAAiB,EAAE,2BAA2B;wBAC9C,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;qBAC3C;iBACF;gBACD,CAAC,QAAQ,IAAI;oBACX;wBACE,UAAU,EAAE;4BACV,QAAQ,EAAE;gCACR,WAAW,EAAE,OAAO;gCACpB,WAAW,EAAE,gCAAgC;gCAC7C,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY;gCACxC,WAAW,EAAE,KAAK;6BACnB;yBACF;qBACF;oBACD,SAAS,IAAI;wBACX;4BACE,sBAAsB,EAAE;gCACtB,WAAW,EAAE,OAAO;gCACpB,WAAW,EAAE,gCAAgC;gCAC7C,iBAAiB,EAAE,2BAA2B;gCAC9C,WAAW,EAAE,KAAK;6BACnB;yBACF;qBACF;iBACF;aACF;SACF,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAtED,kDAsEC","sourcesContent":["import type { ISpinButtonStyleProps, ISpinButtonStyles, IStyleFunctionOrObject } from '@fluentui/react';\nimport { FontWeights } from '@fluentui/react';\n\nexport function getSpinButtonStyles(\n  props: ISpinButtonStyleProps,\n): IStyleFunctionOrObject<ISpinButtonStyleProps, ISpinButtonStyles> {\n  const { theme, isFocused, disabled } = props;\n  const { semanticColors } = theme;\n  const SpinButtonRootBorderColorFocused = semanticColors.disabledBorder; // sorry for the broken semantics\n  let SpinButtonRootBorderColor = semanticColors.inputBorder;\n  let SpinButtonBorderBottomColor = isFocused ? theme.palette.themePrimary : theme.palette.neutralPrimary;\n\n  if (disabled) {\n    SpinButtonBorderBottomColor = semanticColors.disabledBorder;\n    SpinButtonRootBorderColor = semanticColors.disabledBorder;\n  }\n\n  const styles: Partial<ISpinButtonStyles> = {\n    label: {\n      fontWeight: FontWeights.regular,\n    },\n    input: {\n      backgroundColor: 'unset',\n    },\n    spinButtonWrapper: [\n      {\n        borderBottomColor: SpinButtonBorderBottomColor,\n        backgroundColor: 'unset',\n      },\n      {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderBottomColor: SpinButtonBorderBottomColor,\n          borderRadius: theme.effects.roundedCorner4,\n        },\n      },\n      !disabled && [\n        {\n          ':hover :': {\n            ':after': {\n              borderStyle: 'solid',\n              borderColor: SpinButtonRootBorderColorFocused,\n              borderBottom: theme.palette.themePrimary,\n              borderWidth: '1px',\n            },\n          },\n        },\n        isFocused && [\n          {\n            ':hover:after, :after': {\n              borderStyle: 'solid',\n              borderColor: SpinButtonRootBorderColorFocused,\n              borderBottomColor: SpinButtonBorderBottomColor,\n              borderWidth: '1px',\n            },\n          },\n        ],\n      ],\n    ],\n  };\n\n  return styles;\n}\n"]}