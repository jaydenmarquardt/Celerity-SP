var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { PrimaryButton } from 'office-ui-fabric-react/lib/Button';
import * as telemetry from '../../common/telemetry';
import { DialogType } from 'office-ui-fabric-react/lib/Dialog';
import { PanelType } from 'office-ui-fabric-react/lib/Panel';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { setPropertyValue } from '../../helpers/GeneralHelper';
import { IconSelector } from '../../common/iconSelector/IconSelector';
var PropertyFieldIconPickerHost = /** @class */ (function (_super) {
    __extends(PropertyFieldIconPickerHost, _super);
    function PropertyFieldIconPickerHost(props) {
        var _this = _super.call(this, props) || this;
        _this.closePanel = function () {
            _this.setState({
                currentIcon: _this.props.currentIcon,
                isPanelOpen: false
            });
        };
        _this.iconPickerOnClick = function () {
            _this.setState({
                isPanelOpen: true
            });
        };
        _this.iconOnClick = function (iconName) {
            if (_this.props.onChanged) {
                if (typeof _this.props.onChanged !== 'undefined' && _this.props.onChanged !== null) {
                    _this.props.onChange(_this.props.targetProperty, iconName);
                }
            }
            _this.setState({
                currentIcon: iconName
            });
        };
        _this.confirmSelection = function () {
            if (_this.props.onSave) {
                _this.props.onSave(_this.state.currentIcon);
                setPropertyValue(_this.props.properties, _this.props.targetProperty, _this.state.currentIcon);
                _this.props.onPropertyChange(_this.props.targetProperty, _this.props.currentIcon, _this.state.currentIcon);
                if (typeof _this.props.onChange !== 'undefined' && _this.props.onChange !== null) {
                    _this.props.onChange(_this.props.targetProperty, _this.state.currentIcon);
                }
            }
            _this.setState({
                isPanelOpen: false
            });
        };
        telemetry.track('PropertyFieldIconPicker', {
            disabled: props.disabled
        });
        _this.state = {
            currentIcon: _this.props.currentIcon || null,
            isPanelOpen: false
        };
        return _this;
    }
    PropertyFieldIconPickerHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.currentIcon !== this.props.currentIcon) {
            this.setState({
                currentIcon: this.props.currentIcon
            });
        }
    };
    PropertyFieldIconPickerHost.prototype.render = function () {
        var _a = this.props, buttonLabel = _a.buttonLabel, buttonClassName = _a.buttonClassName, disabled = _a.disabled, panelClassName = _a.panelClassName, label = _a.label;
        var renderOption = this.props.renderOption;
        var iconProps = { iconName: this.props.currentIcon };
        renderOption = renderOption === undefined ? 'panel' : renderOption;
        return React.createElement("div", null,
            label && label.length > 0 && React.createElement(Label, null, label),
            React.createElement(PrimaryButton, { text: buttonLabel, onClick: this.iconPickerOnClick, className: buttonClassName, disabled: disabled, iconProps: iconProps, "data-automation-id": "icon-picker-open" }),
            React.createElement(IconSelector, { renderOption: renderOption, currentIcon: this.state.currentIcon, panelClassName: panelClassName, panelType: PanelType.medium, dialogType: DialogType.normal, isOpen: this.state.isPanelOpen, onChange: this.iconOnClick, onDismiss: this.closePanel, onSave: this.confirmSelection }));
    };
    return PropertyFieldIconPickerHost;
}(React.Component));
export default PropertyFieldIconPickerHost;
//# sourceMappingURL=PropertyFieldIconPickerHost.js.map