var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import styles from '../PropertyFieldCollectionDataHost.module.scss';
import { TextField } from 'office-ui-fabric-react/lib/components/TextField';
import { Icon } from 'office-ui-fabric-react/lib/components/Icon';
import { ActionButton } from 'office-ui-fabric-react/lib/Button';
import { IconSelector } from '../../../common/iconSelector/IconSelector';
var CollectionIconField = /** @class */ (function (_super) {
    __extends(CollectionIconField, _super);
    function CollectionIconField(props) {
        var _this = _super.call(this, props) || this;
        _this._onSelectIconClick = function () {
            _this.setState({
                isPanelOpen: true
            });
        };
        _this._onIconChage = function (iconName) { return __awaiter(_this, void 0, void 0, function () {
            var field, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        field = this.props.field;
                        this.setState({
                            isPanelOpen: false
                        });
                        return [4 /*yield*/, this.props.fOnValueChange(field.id, iconName)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.props.fValidation(field, iconName)];
                    case 2:
                        errorMessage = _a.sent();
                        this.setState({
                            errorMessage: errorMessage
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        _this._onPanelDismiss = function () {
            _this.setState({
                isPanelOpen: false
            });
        };
        _this.state = {
            isPanelOpen: false
        };
        return _this;
    }
    CollectionIconField.prototype.render = function () {
        var _this = this;
        var _a = this.props, field = _a.field, item = _a.item, renderMode = _a.renderMode;
        var iconName = item[field.id] ? item[field.id] : '';
        var label = iconName || field.placeholder || field.title;
        return (React.createElement(React.Fragment, null,
            renderMode !== 'picker' &&
                React.createElement("div", { className: "PropertyFieldCollectionData__panel__icon-field ".concat(styles.iconField) },
                    React.createElement(TextField, { placeholder: field.placeholder || field.title, className: styles.collectionDataField, value: iconName, required: field.required, onChange: function (e, value) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.props.fOnValueChange(field.id, value)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }, deferredValidationTime: field.deferredValidationTime || field.deferredValidationTime >= 0 ? field.deferredValidationTime : 200, onGetErrorMessage: function (value) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.props.fValidation(this.props.field, value)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }, disabled: this.props.disableEdit }),
                    React.createElement(Icon, { iconName: item[field.id] ? item[field.id] : "" })),
            renderMode === 'picker' &&
                React.createElement("div", { className: "PropertyFieldCollectionData__panel__icon-field ".concat(styles.collectionDataField, " ").concat(styles.iconPicker) },
                    React.createElement(ActionButton, { required: field.required, disabled: this.props.disableEdit, onClick: this._onSelectIconClick, title: label, ariaLabel: label, styles: {
                            root: {
                                padding: '0px',
                                textAlign: 'left',
                            },
                            icon: {
                                marginLeft: '0px'
                            },
                            label: {
                                whiteSpace: 'nowrap',
                                marginLeft: iconName ? 'inherit' : '0px',
                                display: 'block',
                                overflow: 'hidden',
                                textOverflow: 'ellipsis',
                                maxWidth: '80px'
                            }
                        }, iconProps: {
                            iconName: iconName
                        } }, label),
                    field.required && React.createElement("span", { className: styles.requiredField }, "*"),
                    React.createElement(IconSelector, { currentIcon: iconName, renderOption: 'panel', isOpen: this.state.isPanelOpen, onSave: this._onIconChage, onDismiss: this._onPanelDismiss }))));
    };
    return CollectionIconField;
}(React.Component));
export { CollectionIconField };
//# sourceMappingURL=CollectionIconField.js.map