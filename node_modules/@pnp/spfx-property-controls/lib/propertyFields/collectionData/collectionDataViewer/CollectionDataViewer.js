var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import styles from '../PropertyFieldCollectionDataHost.module.scss';
import { CollectionDataItem } from '../collectionDataItem';
import { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/components/Button';
import { Icon } from 'office-ui-fabric-react/lib/components/Icon';
import * as strings from 'PropertyControlStrings';
import { cloneDeep, sortBy } from '@microsoft/sp-lodash-subset';
var CollectionDataViewer = /** @class */ (function (_super) {
    __extends(CollectionDataViewer, _super);
    function CollectionDataViewer(props) {
        var _this = _super.call(this, props) || this;
        _this.SORT_IDX = "sortIdx";
        /**
         * Add a new item to the collection
         */
        _this.addItem = function (item) {
            _this.setState(function (prevState) {
                var crntItems = __spreadArray(__spreadArray([], prevState.crntItems, true), [item], false);
                crntItems = _this.updateSortProperty(crntItems);
                return {
                    crntItems: crntItems,
                    inCreationItem: null,
                    inCreationItemValid: null
                };
            });
        };
        /**
         * Remove an item from the collection
         */
        _this.updateItem = function (idx, item) {
            _this.setState(function (prevState) {
                var crntItems = prevState.crntItems;
                // Update the item in the array
                crntItems[idx] = item;
                return { crntItems: crntItems };
            });
        };
        /**
         * Remove an item from the collection
         */
        _this.deleteItem = function (idx) {
            _this.setState(function (prevState) {
                var crntItems = prevState.crntItems;
                var validation = prevState.validation;
                crntItems.splice(idx, 1);
                delete validation[idx];
                // Update the sort propety
                crntItems = _this.updateSortProperty(crntItems);
                return {
                    crntItems: sortBy(crntItems, _this.SORT_IDX),
                    validation: validation
                };
            });
        };
        /**
         * Validate every item
         */
        _this.validateItem = function (idx, isValid) {
            _this.setState(function (prevState) {
                var validation = prevState.validation;
                validation[idx] = isValid;
                return {
                    validation: prevState.validation
                };
            });
        };
        /**
         * Currently in creation
         */
        _this.addInCreation = function (item, isValid) {
            _this.setState({
                inCreationItem: item,
                inCreationItemValid: isValid
            });
        };
        /**
         * Add the item and save the form
         */
        _this.addAndSave = function () {
            // Check if the item is not empty
            if (_this.state.inCreationItem) {
                var crntItems = __spreadArray(__spreadArray([], _this.state.crntItems, true), [_this.state.inCreationItem], false);
                crntItems = _this.updateSortProperty(crntItems);
                _this.props.fOnSave(crntItems);
            }
            else {
                _this.onSave();
            }
        };
        /**
         * Update the sort order
         */
        _this.updateSortOrder = function (oldIdx, newIdx) {
            _this.setState(function (prevState) {
                var crntItems = prevState.crntItems;
                var newOrderedItems = cloneDeep(crntItems);
                newOrderedItems = _this.moveItemTo(newOrderedItems, oldIdx, newIdx - 1);
                newOrderedItems = _this.updateSortProperty(newOrderedItems);
                newOrderedItems = sortBy(newOrderedItems, _this.SORT_IDX);
                return {
                    crntItems: newOrderedItems
                };
            });
        };
        /**
         * Save the collection data
         */
        _this.onSave = function () {
            _this.props.fOnSave(_this.state.crntItems);
        };
        /**
         * Cancel
         */
        _this.onCancel = function () {
            _this.props.fOnClose();
        };
        _this.state = {
            crntItems: [],
            inCreationItem: null,
            inCreationItemValid: null,
            validation: {}
        };
        return _this;
    }
    /**
     * componentDidMount lifecycle hook
     */
    CollectionDataViewer.prototype.componentDidMount = function () {
        var _this = this;
        var crntItems = this.props.value ? sortBy(cloneDeep(this.props.value), this.SORT_IDX) : [];
        crntItems = crntItems.map(function (item, idx) {
            if (!item[_this.SORT_IDX]) {
                item[_this.SORT_IDX] = idx + 1;
            }
            return item;
        });
        // Update the sort propety
        crntItems = this.updateSortProperty(crntItems);
        this.setState({
            crntItems: sortBy(crntItems, this.SORT_IDX)
        });
    };
    /**
     * Check if all items are valid
     */
    CollectionDataViewer.prototype.allItemsValid = function () {
        var validation = this.state.validation;
        if (validation) {
            var keys = Object.keys(validation);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (!validation[key]) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * Move an item in the array
     *
     * @param crntItems
     * @param oldIdx
     * @param newIdx
     */
    CollectionDataViewer.prototype.moveItemTo = function (crntItems, oldIdx, newIdx) {
        if (newIdx > -1 && newIdx < crntItems.length) {
            var removedElement = crntItems.splice(oldIdx, 1)[0];
            if (removedElement) {
                crntItems.splice(newIdx, 0, removedElement);
            }
        }
        return crntItems;
    };
    /**
     * Update the sort property
     *
     * @param crntItems
     */
    CollectionDataViewer.prototype.updateSortProperty = function (crntItems) {
        var _this = this;
        // Update the sort order
        return crntItems.map(function (item, itemIdx) {
            item[_this.SORT_IDX] = itemIdx + 1;
            return item;
        });
    };
    /**
     * Default React render
     */
    CollectionDataViewer.prototype.render = function () {
        var _this = this;
        var crntItems = __spreadArray(__spreadArray([], this.state.crntItems, true), [this.state.inCreationItem], false).filter(function (i) { return i; });
        var visibleFields = this.props.fields.filter(function (f) { return !f.isVisible || f.isVisible(f, crntItems); });
        return (React.createElement("div", null,
            React.createElement("div", { className: "PropertyFieldCollectionData__panel__table ".concat(styles.table, " ").concat(this.props.tableClassName || "") },
                React.createElement("div", { className: "PropertyFieldCollectionData__panel__table-head ".concat(styles.tableRow, " ").concat(styles.tableHead) },
                    this.props.enableSorting && (React.createElement("span", { className: "PropertyFieldCollectionData__panel__table-cell ".concat(styles.tableCell) })),
                    visibleFields.map(function (f) { return (React.createElement("span", { key: "dataviewer-".concat(f.id), className: "PropertyFieldCollectionData__panel__table-cell ".concat(styles.tableCell) },
                        f.title,
                        " ",
                        f.required && React.createElement(Icon, { className: styles.required, iconName: "Asterisk" }))); }),
                    React.createElement("span", { className: "PropertyFieldCollectionData__panel__table-cell ".concat(styles.tableCell) }),
                    React.createElement("span", { className: "PropertyFieldCollectionData__panel__table-cell ".concat(styles.tableCell) })),
                (this.state.crntItems && this.state.crntItems.length > 0) && (this.state.crntItems.map(function (item, idx, allItems) { return (React.createElement(CollectionDataItem, { key: item.uniqueId, fields: visibleFields, index: idx, item: item, totalItems: allItems.length, sortingEnabled: _this.props.enableSorting, disableItemDeletion: _this.props.disableItemDeletion, fUpdateItem: _this.updateItem, fDeleteItem: _this.deleteItem, fValidation: _this.validateItem, fOnSorting: _this.updateSortOrder })); })),
                !this.props.disableItemCreation && (React.createElement(CollectionDataItem, { fields: visibleFields, index: null, item: null, sortingEnabled: this.props.enableSorting, totalItems: null, fAddItem: this.addItem, fAddInCreation: this.addInCreation }))),
            (!this.state.crntItems || this.state.crntItems.length === 0) && (React.createElement("p", { className: "PropertyFieldCollectionData__panel__no-collection-data ".concat(styles.noCollectionData) }, strings.CollectionDataEmptyValue)),
            React.createElement("div", { className: "PropertyFieldCollectionData__panel__actions ".concat(styles.panelActions) },
                this.state.inCreationItem && this.state.inCreationItemValid && React.createElement(PrimaryButton, { text: this.props.saveAndAddBtnLabel || strings.CollectionSaveAndAddButtonLabel, onClick: this.addAndSave, disabled: !this.allItemsValid(), className: "PropertyFieldCollectionData__panel__action__add" }),
                !(this.state.inCreationItem && this.state.inCreationItemValid) && React.createElement(PrimaryButton, { text: this.props.saveBtnLabel || strings.SaveButtonLabel, onClick: this.onSave, disabled: !this.allItemsValid(), className: "PropertyFieldCollectionData__panel__action__save" }),
                React.createElement(DefaultButton, { text: this.props.cancelBtnLabel || strings.CancelButtonLabel, onClick: this.onCancel, className: "PropertyFieldCollectionData__panel__action__cancel" }))));
    };
    return CollectionDataViewer;
}(React.Component));
export { CollectionDataViewer };
//# sourceMappingURL=CollectionDataViewer.js.map