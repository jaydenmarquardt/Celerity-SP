var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { DefaultButton, mergeStyles, mergeStyleSets, Panel, PanelType, PrimaryButton, Stack, TextField, } from 'office-ui-fabric-react';
import strings from 'PropertyControlStrings';
import * as telemetry from '../../common/telemetry';
import { MonacoEditor } from './monacoEditorControl';
var DEFAULT_PANEL_WIDTH = "800px";
var PropertyFieldMonacoEditorHost = /** @class */ (function (_super) {
    __extends(PropertyFieldMonacoEditorHost, _super);
    function PropertyFieldMonacoEditorHost(props) {
        var _this = _super.call(this, props) || this;
        _this.showPanel = function (indicator) {
            _this.setState({ showPanel: indicator });
        };
        _this.controlClasses = mergeStyleSets({
            headerTitle: mergeStyles({
                paddingTop: 20,
            }),
            textFieldStyles: mergeStyles({
                paddingBottom: 5,
            }),
        });
        _this._onValueChange = function (newValue, errors) {
            _this.setState({ value: newValue, validationErrors: errors });
        };
        _this.onRenderFooterContent = function () {
            return (React.createElement(Stack, { horizontal: true, horizontalAlign: "start", tokens: { childrenGap: 5 } },
                React.createElement(PrimaryButton, { onClick: function (ev) {
                        ev.preventDefault();
                        _this.props.onPropertyChange(_this.state.value);
                        _this.showPanel(false);
                    } }, strings.MonacoEditorSaveButtonLabel),
                React.createElement(DefaultButton, { onClick: function (ev) {
                        ev.preventDefault();
                        _this.props.onPropertyChange(_this.props.value);
                        _this.showPanel(false);
                    } }, strings.MonacoEditorCancelButtonLabel)));
        };
        telemetry.track("PropertyFieldOrder", {});
        _this.state = {
            value: _this.props.value,
            validationErrors: [],
            showPanel: false,
        };
        return _this;
    }
    PropertyFieldMonacoEditorHost.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.value !== this.props.value) {
            this.setState({ value: this.props.value });
        }
    };
    PropertyFieldMonacoEditorHost.prototype.render = function () {
        var _this = this;
        var panelWidth = this.props.panelWidth;
        var _panelWidth = panelWidth ? "".concat(panelWidth, "px") : DEFAULT_PANEL_WIDTH;
        return (React.createElement(React.Fragment, null,
            React.createElement(TextField, { value: this.props.value, readOnly: true, className: this.controlClasses.textFieldStyles }),
            React.createElement(PrimaryButton, { text: strings.MonacoEditorOpenButtonLabel, onClick: function (ev) {
                    ev.preventDefault();
                    _this.showPanel(true);
                } }),
            React.createElement(Panel, { type: PanelType.custom, customWidth: _panelWidth, isOpen: this.state.showPanel, onDismiss: function () {
                    _this.showPanel(false);
                }, headerText: strings.MonacoEditorPanelTitle, onRenderFooterContent: this.onRenderFooterContent, isFooterAtBottom: true },
                React.createElement("div", { className: this.controlClasses.headerTitle },
                    React.createElement(MonacoEditor, __assign({}, this.props, { onValueChange: this._onValueChange }))))));
    };
    return PropertyFieldMonacoEditorHost;
}(React.Component));
export default PropertyFieldMonacoEditorHost;
//# sourceMappingURL=PropertyFieldMonacoEditorHost.js.map