var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { PropertyPaneFieldType, } from '@microsoft/sp-property-pane';
import PropertyFieldMonacoEditorHost from './PropertyFieldMonacoEditorHost';
var PropertyFieldMonacoEditorBuilder = /** @class */ (function () {
    function PropertyFieldMonacoEditorBuilder(_targetProperty, _properties) {
        this.type = PropertyPaneFieldType.Custom;
        this.targetProperty = _targetProperty;
        this.properties = _properties;
        this.properties.onRender = this._render.bind(this);
        this.properties.onDispose = this._dispose.bind(this);
    }
    PropertyFieldMonacoEditorBuilder.prototype._render = function (elem, context, changeCallback) {
        var props = this.properties;
        var element = React.createElement(PropertyFieldMonacoEditorHost, __assign(__assign({}, props), { onPropertyChange: this._onValueChanged.bind(this) }));
        ReactDOM.render(element, elem);
        if (changeCallback) {
            this._onChangeCallback = changeCallback;
        }
    };
    PropertyFieldMonacoEditorBuilder.prototype._dispose = function (elem) {
        ReactDOM.unmountComponentAtNode(elem);
    };
    PropertyFieldMonacoEditorBuilder.prototype._onValueChanged = function (value, validationErrors) {
        if (this._onChangeCallback) {
            this._onChangeCallback(this.targetProperty, value);
            this.properties.onChange(value);
        }
    };
    return PropertyFieldMonacoEditorBuilder;
}());
export function PropertyFieldMonacoEditor(targetProperty, properties) {
    return new PropertyFieldMonacoEditorBuilder(targetProperty, __assign(__assign({}, properties), { onRender: null, onDispose: null }));
}
//# sourceMappingURL=PropertyFieldMonacoEditor.js.map