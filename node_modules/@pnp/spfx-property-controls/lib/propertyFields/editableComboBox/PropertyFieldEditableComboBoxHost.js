var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { ComboBox } from 'office-ui-fabric-react/lib/ComboBox';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { FontIcon } from 'office-ui-fabric-react/lib/Icon';
import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
import styles from './PropertyFieldEditableComboBoxHost.module.scss';
import * as telemetry from '../../common/telemetry';
/**
 * @class PropertyFieldEditableComboBoxHost
 * @description Core JSX Element for displaying and managing an editable combo box
 */
var PropertyFieldEditableComboBoxHost = /** @class */ (function (_super) {
    __extends(PropertyFieldEditableComboBoxHost, _super);
    function PropertyFieldEditableComboBoxHost(props, state) {
        var _this = _super.call(this, props) || this;
        _this.logStyle = "background: crimson; padding: 5px; border-radius: 5px; color: white";
        _this.box = React.createRef();
        telemetry.track('PropertyFieldEditableComboBox', {
            disabled: props.disabled
        });
        _this.state = {
            options: props.options,
            selectedText: props.selectedText
        };
        return _this;
    }
    /**
     * @function optionChanged
     * @param event
     * @param option
     * @param index
     * @param value
     * @description Handles when the selected option has changed or whether a new option has been added
     */
    PropertyFieldEditableComboBoxHost.prototype.optionChanged = function (event, option, index, value) {
        //Determine if the option was selected or if a new value was added
        var txt;
        var wasAdded = false;
        if (option !== undefined) {
            //An option was selected
            txt = option.text;
            this.setState({ selectedText: txt });
        }
        else {
            //A new option was provided
            txt = value;
            //Add the new category to the list, if it is not undefined and then reload the list
            if (txt !== undefined && txt !== '') {
                //this.log(`${val} is being added to the list of categories...`);
                this.setState({
                    options: __spreadArray(__spreadArray([], this.state.options, true), [{ key: txt, text: txt }], false)
                });
                this.setState({
                    selectedText: txt
                });
                wasAdded = true;
            }
            else if (txt === '') {
                this.setState({ selectedText: txt });
                //this.log(`Selected category state blanked out`);
            }
        }
        //this.log(`${val} was selected!`);
        this.props.onOptionChanged(txt, wasAdded);
    };
    /**
     * @function onKeyDown
     * @param event the keyboard event incoming
     * @description monitors the keystrokes to stop the user from exceeding the `maxFillInLength`
     */
    PropertyFieldEditableComboBoxHost.prototype.onKeyDown = function (event) {
        if (this.props.maxFillInLength !== undefined) {
            if (event.key.toLowerCase() !== 'backspace') {
                var text = event.target.value;
                if (text !== undefined && text !== null) {
                    if (text.length >= this.props.maxFillInLength) {
                        this.log("Max character length hit!!! [".concat(this.props.maxFillInLength.toString(), "] : Stopping new characters."));
                        event.preventDefault();
                    }
                }
            }
        }
    };
    /**
     * @function log
     * @param val the string to write out to the console
     * @description lightweight logging to the console, with just a little custom styling
     */
    PropertyFieldEditableComboBoxHost.prototype.log = function (val) {
        console.log("%c>> ".concat(val), this.logStyle);
    };
    /**
     * @function render
     * @description Renders out the Fluent UI `ComboBox` along with some labeling and tooltip components
     */
    PropertyFieldEditableComboBoxHost.prototype.render = function () {
        var _this = this;
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: styles.catLabelContainer },
                React.createElement(Label, null, this.props.label),
                (this.props.showTooltip ?
                    React.createElement(TooltipHost, { content: this.props.tooltipText, className: styles.tooltip },
                        React.createElement(FontIcon, { iconName: "Info", className: styles.fontIcon }))
                    : null)),
            React.createElement(ComboBox, { componentRef: this.box, onChange: function (event, option, index, value) { return _this.optionChanged(event, option, index, value); }, text: this.state.selectedText, allowFreeform: true, autoComplete: "on", onKeyDown: function (event) { return _this.onKeyDown(event); }, options: this.state.options, disabled: this.props.disabled })));
    };
    return PropertyFieldEditableComboBoxHost;
}(React.Component));
export default PropertyFieldEditableComboBoxHost;
//# sourceMappingURL=PropertyFieldEditableComboBoxHost.js.map