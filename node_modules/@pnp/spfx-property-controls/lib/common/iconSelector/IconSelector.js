import * as React from 'react';
import { Panel, PanelType } from 'office-ui-fabric-react/lib/Panel';
import { IconsList } from '../iconsList/IconsList';
import * as strings from 'PropertyControlStrings';
import { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';
import debounce from 'lodash/debounce';
import styles from './IconSelector.module.scss';
import { FluentIconsService } from '../../services/FluentIconsService';
import { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button';
import { Icon } from 'office-ui-fabric-react/lib/Icon';
import Dialog, { DialogFooter, DialogType } from 'office-ui-fabric-react/lib/Dialog';
import { initializeIcons } from 'office-ui-fabric-react/lib/Icons';
initializeIcons();
var _fluentIconsService = new FluentIconsService();
var _icons = _fluentIconsService.getAll();
export var IconSelector = function (_a) {
    var _b = _a.renderOption, renderOption = _b === void 0 ? 'panel' : _b, currentIcon = _a.currentIcon, panelClassName = _a.panelClassName, _c = _a.panelType, panelType = _c === void 0 ? PanelType.medium : _c, _d = _a.dialogType, dialogType = _d === void 0 ? DialogType.normal : _d, isOpen = _a.isOpen, onChange = _a.onChange, onDismiss = _a.onDismiss, onSave = _a.onSave;
    var _e = React.useState(), selectedIconName = _e[0], setSelectedIconName = _e[1];
    var _f = React.useState(), icons = _f[0], setIcons = _f[1];
    var onSelectedIconChange = React.useCallback(function (iconName) {
        setSelectedIconName(iconName);
        if (onChange) {
            onChange(iconName);
        }
    }, [onChange]);
    var internalOnDismiss = React.useCallback(function () {
        setSelectedIconName(currentIcon);
        if (onDismiss) {
            onDismiss();
        }
    }, [currentIcon, onDismiss]);
    var onSearchAbort = React.useCallback(function () {
        setIcons(_icons);
    }, []);
    var onSearchChange = React.useCallback(function (searchText) {
        var items;
        if (searchText && searchText.trim().length > 2) {
            items = _fluentIconsService.search(searchText);
        }
        else {
            items = _fluentIconsService.getAll();
        }
        setIcons(items);
    }, []);
    var confirmSelection = React.useCallback(function () {
        if (onSave) {
            onSave(selectedIconName);
        }
    }, [selectedIconName]);
    var renderContent = function () {
        return React.createElement("div", null,
            React.createElement(IconsList, { icons: icons, selectedIconName: selectedIconName, onChange: onSelectedIconChange }));
    };
    var renderPanelNav = function (props, defaultRender) {
        return React.createElement("div", { className: styles.navArea },
            React.createElement("h2", { className: styles.headTitle }, strings.SelectIcon),
            React.createElement(SearchBox, { className: styles.searchBox, onAbort: onSearchAbort, "data-automation-id": "icon-picker-search", onSearch: debounce(onSearchChange, 300), onChange: debounce(function (e, value) { return onSearchChange(value); }, 300) }),
            React.createElement("div", { className: styles.closeBtnContainer }, defaultRender(props)));
    };
    var renderPanelFooter = function () {
        return React.createElement("div", { className: styles.footer, "data-automation-id": "icon-picker-footer" },
            React.createElement(PrimaryButton, { text: strings.SaveButtonLabel, onClick: confirmSelection, disabled: !selectedIconName, className: styles.btnSave, "data-automation-id": "icon-picker-save" }),
            React.createElement("div", { className: "".concat(styles.selectionDisplay, " ").concat(selectedIconName ? 'noSelection' : '') },
                React.createElement("span", { className: styles.selectionLabel },
                    strings.SelectedLabel,
                    ":"),
                React.createElement(Icon, { iconName: selectedIconName, className: styles.selectionIcon })),
            React.createElement(DefaultButton, { text: strings.CancelButtonLabel, onClick: internalOnDismiss, className: styles.btnCancel, "data-automation-id": "icon-picker-close" }));
    };
    var renderPanel = function () {
        return React.createElement(Panel, { isOpen: isOpen, onDismiss: internalOnDismiss, type: panelType, "data-automation-id": "icon-picker-panel", closeButtonAriaLabel: strings.CloseButton, className: panelClassName, onRenderNavigation: renderPanelNav, onRenderFooterContent: renderPanelFooter, isFooterAtBottom: true }, renderContent());
    };
    var renderDialog = function () {
        return React.createElement(Dialog, { hidden: !isOpen, onDismiss: internalOnDismiss, isBlocking: true, containerClassName: styles.dialog, dialogContentProps: {
                type: dialogType,
                title: strings.SelectIcon,
                showCloseButton: true,
                className: panelClassName
            } },
            React.createElement(SearchBox, { className: styles.searchBox, onAbort: onSearchAbort, "data-automation-id": "icon-picker-search", onSearch: debounce(onSearchChange, 300), onChange: debounce(function (e, value) { return onSearchChange(value); }, 300) }),
            React.createElement("div", { className: styles.dialogIconsContainer }, renderContent()),
            React.createElement(DialogFooter, null,
                React.createElement("div", { className: styles.dialogFooter },
                    React.createElement(Icon, { iconName: selectedIconName, className: styles.dialogSelectedIcons }),
                    React.createElement(PrimaryButton, { className: styles.save, text: strings.SaveButtonLabel, onClick: confirmSelection, disabled: !selectedIconName, "data-automation-id": "icon-picker-save" }),
                    React.createElement(DefaultButton, { text: strings.CancelButtonLabel, onClick: internalOnDismiss, className: styles.btnCancel, "data-automation-id": "icon-picker-close" }))));
    };
    React.useEffect(function () {
        setIcons(_icons);
    }, []);
    React.useEffect(function () {
        if (isOpen === false) {
            setIcons(_icons);
        }
    }, [isOpen]);
    React.useEffect(function () {
        setSelectedIconName(currentIcon);
    }, [currentIcon]);
    return (React.createElement(React.Fragment, null, renderOption === 'panel' ? renderPanel() : renderDialog()));
};
//# sourceMappingURL=IconSelector.js.map