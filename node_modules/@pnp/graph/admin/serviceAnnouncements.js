import { __decorate } from "tslib";
import { GraphQueryable, _GraphCollection, _GraphInstance, graphGet, graphInvokableFactory, graphPost } from "../graphqueryable.js";
import { defaultPath, getById, getByName } from "../decorators.js";
import { body } from "@pnp/queryable";
/**
 * Tenant Service Announcements
 */
let _ServiceAnnouncements = class _ServiceAnnouncements extends _GraphInstance {
    get healthOverviews() {
        return HealthOverviews(this);
    }
    get issues() {
        return HealthIssues(this);
    }
    get messages() {
        return ServiceMessages(this);
    }
};
_ServiceAnnouncements = __decorate([
    defaultPath("serviceAnnouncement")
], _ServiceAnnouncements);
export { _ServiceAnnouncements };
export const ServiceAnnouncements = graphInvokableFactory(_ServiceAnnouncements);
/**
 * Service Health Report
 */
export class _ServiceHealth extends _GraphInstance {
}
export const ServiceHealth = graphInvokableFactory(_ServiceHealth);
/**
 * Service Health reports
 */
let _HealthOverviews = class _HealthOverviews extends _GraphCollection {
};
_HealthOverviews = __decorate([
    defaultPath("healthOverviews"),
    getByName(ServiceHealth)
], _HealthOverviews);
export { _HealthOverviews };
export const HealthOverviews = graphInvokableFactory(_HealthOverviews);
/**
 * Health Issue
 */
export class _HealthIssue extends _GraphInstance {
}
export const HealthIssue = graphInvokableFactory(_HealthIssue);
/**
 * Health issues
 */
let _HealthIssues = class _HealthIssues extends _GraphCollection {
    /**
     * Get incident report. The operation returns an error if the specified issue doesn't exist for the tenant or if PIR document does not exist for the issue.
     */
    get incidentReport() {
        return graphGet(GraphQueryable(this, "issueReport"));
    }
};
_HealthIssues = __decorate([
    defaultPath("issues"),
    getById(HealthIssue)
], _HealthIssues);
export { _HealthIssues };
export const HealthIssues = graphInvokableFactory(_HealthIssues);
/**
 * Service Announcements Messages
 */
export class _ServiceMessage extends _GraphInstance {
    /**
    * Get message attachment
    */
    get attachments() {
        return ServiceMessageAttachments(this);
    }
}
export const ServiceMessage = graphInvokableFactory(_ServiceMessage);
/**
 * Service Announcements Messages
 */
let _ServiceMessages = class _ServiceMessages extends _GraphCollection {
    /**
     * Archive a list of service messages as read for signed-in user
     *
     * @param messageIds List of message IDs to mark as read.
     */
    archive(messageIds) {
        return graphPost(ServiceMessages(this, "archive"), body({
            messageIds: messageIds,
        }));
    }
    /**
     * Unarchive a list of service messages as read for signed-in user
     *
     * @param messageIds List of message IDs to mark as read.
     */
    unarchive(messageIds) {
        return graphPost(ServiceMessages(this, "unarchive"), body({
            messageIds: messageIds,
        }));
    }
    /**
    * Favorite a list of service messages as read for signed-in user
    *
    * @param messageIds List of message IDs to mark as read.
    */
    favorite(messageIds) {
        return graphPost(ServiceMessages(this, "favorite"), body({
            messageIds: messageIds,
        }));
    }
    /**
    * Unfavorite a list of service messages as read for signed-in user
    *
    * @param messageIds List of message IDs to mark as read.
    */
    unfavorite(messageIds) {
        return graphPost(ServiceMessages(this, "unfavorite"), body({
            messageIds: messageIds,
        }));
    }
    /**
     * Mark a list of service messages as read for signed-in user
     *
     * @param messageIds List of message IDs to mark as read.
     */
    markRead(messageIds) {
        return graphPost(ServiceMessages(this, "markRead"), body({
            messageIds: messageIds,
        }));
    }
    /**
    * Mark a list of service messages as unread for signed-in user
    *
    * @param messageIds List of message IDs to mark as read.
    */
    markUnread(messageIds) {
        return graphPost(ServiceMessages(this, "markUnread"), body({
            messageIds: messageIds,
        }));
    }
};
_ServiceMessages = __decorate([
    defaultPath("messages"),
    getById(ServiceMessage)
], _ServiceMessages);
export { _ServiceMessages };
export const ServiceMessages = graphInvokableFactory(_ServiceMessages);
/**
 * Service Announcements Message
 */
export class _ServiceMessageAttachment extends _GraphInstance {
}
export const ServiceMessageAttachment = graphInvokableFactory(_ServiceMessageAttachment);
/**
 * Service Announcements Message
 */
let _ServiceMessageAttachments = class _ServiceMessageAttachments extends _GraphCollection {
};
_ServiceMessageAttachments = __decorate([
    defaultPath("attachments"),
    getById(ServiceMessageAttachment)
], _ServiceMessageAttachments);
export { _ServiceMessageAttachments };
export const ServiceMessageAttachments = graphInvokableFactory(_ServiceMessageAttachments);
//# sourceMappingURL=serviceAnnouncements.js.map