import { __decorate } from "tslib";
import { defaultPath, getById } from "../decorators.js";
import { body, InjectHeaders } from "@pnp/queryable";
import { combine } from "@pnp/core";
import { graphInvokableFactory, _GraphCollection, _GraphInstance, graphPost, graphGet } from "../graphqueryable.js";
import { DriveItem } from "../files/types.js";
/**
 * Describes a Share object
 */
export class _Share extends _GraphInstance {
    /**
     * Access the driveItem associated with this shared file
     */
    get driveItem() {
        return DriveItem(this, "driveitem");
    }
}
export const Share = graphInvokableFactory(_Share);
/**
 * Describes a collection of Share objects
 *
 */
let _Shares = class _Shares extends _GraphCollection {
    /**
     * Creates a sharing link (id) from a given absolute url to a file
     * @param url Absolute file url such as "https://{tenant}.sharepoint.com/sites/dev/Shared%20Documents/new.pptx"
     * @returns An encoded sharing id which can be used in getById to access a file
     */
    encodeSharingLink(url) {
        return (`u!${Buffer.from(url).toString("base64").replace(/=$/, "").replace("/", "_").replace("+", "-")}`);
    }
    /**
     * Method for using a sharing link.
     * @param share: string - Share Id or Encoded Sharing Url
     * @returns Microsoft Graph - SharingLink
     */
    async useSharingLink(shareLink) {
        const q = Shares(this, shareLink.shareId || shareLink.encodedSharingUrl);
        if (shareLink.redeemSharingLink) {
            q.using(InjectHeaders({
                "Prefer": (shareLink.redeemSharingLink) ? "redeemSharingLink" : "redeemSharingLinkIfNecessary",
            }));
        }
        return graphGet(q);
    }
    async grantSharingLinkAccess(shareLinkAccess) {
        const q = Shares(this, combine(shareLinkAccess.encodedSharingUrl, "permission", "grant"));
        return graphPost(q, body(shareLinkAccess));
    }
};
_Shares = __decorate([
    defaultPath("shares"),
    getById(Share)
], _Shares);
export { _Shares };
export const Shares = graphInvokableFactory(_Shares);
//# sourceMappingURL=types.js.map