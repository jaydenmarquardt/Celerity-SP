import { __decorate } from "tslib";
import { _GraphInstance, _GraphCollection, graphInvokableFactory, GraphQueryable, graphPost } from "../graphqueryable.js";
import { defaultPath, getById, addable, updateable, deleteable, hasDelta } from "../decorators.js";
import { body } from "@pnp/queryable/index.js";
import { MessageRules, Messages } from "./messages.js";
/**
 * Mail Folder or Mail Search Folder
 */
let _MailFolder = class _MailFolder extends _GraphInstance {
    /**
     * Gets the child folders in this mail folder
     *
     */
    get childFolders() {
        return MailFolders(this, "childFolders");
    }
    /**
     * Gets the messages in this mail folder
     *
     */
    get messages() {
        return Messages(this);
    }
    /**
     * Gets the child folders in this mail folder
     *
     */
    get messageRules() {
        return MessageRules(this);
    }
    /**
     * Copy the mail folder
     *
     * @param destinationFolderId The id of the destination folder to copy the message to
     */
    async copy(destinationFolderId) {
        return await graphPost(MailFolder(this, "copy"), body({ destinationId: destinationFolderId }));
    }
    /**
     * Move the mail folder
     *
     * @param destinationFolderId The id of the destination folder to copy the message to
     */
    async move(destinationFolderId) {
        return await graphPost(MailFolder(this, "move"), body({ destinationId: destinationFolderId }));
    }
};
_MailFolder = __decorate([
    updateable(),
    deleteable()
], _MailFolder);
export { _MailFolder };
export const MailFolder = graphInvokableFactory(_MailFolder);
/**
 * Mail Folders or Mail Search Folders
 */
let _MailFolders = class _MailFolders extends _GraphCollection {
    get includeHidden() {
        const q = GraphQueryable(this);
        q.query.set("includeHiddenFolders", "true");
        return q;
    }
};
_MailFolders = __decorate([
    defaultPath("mailFolders"),
    getById(MailFolder),
    addable(),
    hasDelta()
], _MailFolders);
export { _MailFolders };
export const MailFolders = graphInvokableFactory(_MailFolders);
//# sourceMappingURL=folders.js.map