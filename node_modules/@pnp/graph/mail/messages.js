import { __decorate } from "tslib";
import { _GraphInstance, _GraphCollection, graphInvokableFactory, graphPost } from "../graphqueryable.js";
import { defaultPath, getById, addable, updateable, deleteable, hasDelta } from "../decorators.js";
import { body } from "@pnp/queryable/index.js";
import { mailResponse } from "./funcs.js";
/**
 * Message
 */
let _Message = class _Message extends _GraphInstance {
    /**
     * Sends the message
     *
     */
    async send() {
        return await graphPost(Message(this, "send"));
    }
    /**
     * Copy the message
     *
     * @param destinationFolderId The id of the destination folder to copy the message to
     */
    async copy(destinationFolderId) {
        return await graphPost(Message(this, "copy"), body({ destinationId: destinationFolderId }));
    }
    /**
     * Move the message
     *
     * @param destinationFolderId The id of the destination folder to copy the message to
     */
    async move(destinationFolderId) {
        return await graphPost(Message(this, "move"), body({ destinationId: destinationFolderId }));
    }
    /**
     * Create a draft response
     *
     * @param response (optional) The body of the response message
     *   If using JSON, do not provide any payload, you will get an error.
     *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
     * @param timeZone (optional) The time zone to use when creating the draft.
     *   Only use when providing a JSON message.
     */
    async createReply(response, timeZone) {
        return (await mailResponse(this, "createReply", response, timeZone));
    }
    /**
     * Send a message response
     *
     * @param response (optional) The body of the response message
     *   If using JSON provide either comment: string or message: IMessageType.
     *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
     * @param timeZone (optional) The time zone to use when creating the draft.
     *   Only use when providing a JSON message.
     */
    async reply(response, timeZone) {
        return (await mailResponse(this, "reply", response, timeZone));
    }
    /**
     * Create a draft response message to all
     *
     * @param response (optional) The body of the response message
     *   If using JSON, do not provide any payload, you will get an error.
     *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
     * @param timeZone (optional) The time zone to use when creating the draft.
     *   Only use when providing a JSON message.
     */
    async createReplyAll(response, timeZone) {
        return (await mailResponse(this, "createReplyAll", response, timeZone));
    }
    /**
    * Send a message response to all
    *
    * @param response (optional) The body of the response message
    *   If using JSON provide either comment: string or message: IMessageType.
    *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
    * @param timeZone (optional) The time zone to use when creating the draft.
    *   Only use when providing a JSON message.
    */
    async replyAll(response, timeZone) {
        return (await mailResponse(this, "replyAll", response, timeZone));
    }
    /**
     * Create a draft forward message
     *
     * @param forward (optional) The body of the forward message
     *   If using JSON provide either comment: string or message: IMessageType.
     *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
     * @param timeZone (optional) The time zone to use when creating the draft.
     *   Only use when providing a JSON message.
     */
    async createForward(forward, timeZone) {
        return (await mailResponse(this, "createForward", forward, timeZone));
    }
    /**
    * Forward a message
    *
    * @param forward (optional) The body of the forward message
    *   If using JSON provide either comment: string or message: IMessageType.
    *   If using MIME format, provide the MIME content with the applicable Internet message headers, all encoded in base64 format.
    * @param timeZone (optional) The time zone to use when creating the draft.
    *   Only use when providing a JSON message.
    */
    async forward(forward, timeZone) {
        return (await mailResponse(this, "forward", forward, timeZone));
    }
};
_Message = __decorate([
    updateable(),
    deleteable()
], _Message);
export { _Message };
export const Message = graphInvokableFactory(_Message);
/**
 * Messages
 */
let _Messages = class _Messages extends _GraphCollection {
};
_Messages = __decorate([
    defaultPath("messages"),
    getById(Message),
    addable(),
    hasDelta()
], _Messages);
export { _Messages };
export const Messages = graphInvokableFactory(_Messages);
/**
 * Message Rule
 */
let _MessageRule = class _MessageRule extends _GraphInstance {
};
_MessageRule = __decorate([
    updateable(),
    deleteable()
], _MessageRule);
export { _MessageRule };
export const MessageRule = graphInvokableFactory(_MessageRule);
/**
 * Message Rules
 */
let _MessageRules = class _MessageRules extends _GraphCollection {
};
_MessageRules = __decorate([
    defaultPath("messageRules"),
    getById(MessageRule),
    addable()
], _MessageRules);
export { _MessageRules };
export const MessageRules = graphInvokableFactory(_MessageRules);
//# sourceMappingURL=messages.js.map