import { __decorate } from "tslib";
import { _GraphCollection, graphInvokableFactory, _GraphInstance, graphPost } from "../graphqueryable.js";
import { defaultPath } from "../decorators.js";
import { body } from "@pnp/queryable";
/**
 * Presence
 */
let _Presence = class _Presence extends _GraphInstance {
    /**
     * Sets presence information for a user
     *
     * @param presence Presence object to set the state of a user's presence session
     */
    async setPresence(presence) {
        const postBody = { ...presence };
        return graphPost(Presence(this, "setPresence"), body(postBody));
    }
    /**
     * Clear application presence session of a user. If it is the user's only presence session, the user's presence will change to Offline/Offline.
     *
     * @param sessionId Id of the application to clear presence
     */
    async clearPresence(sessionId) {
        const postBody = { sessionId };
        return graphPost(Presence(this, "clearPresence"), body(postBody));
    }
    /**
     * Set the preferred availability and activity status for a user
     *
     * @param presence Presence object to set as preferred availbility and activity status of a user
     */
    async setPreferredPresence(presence) {
        const postBody = { ...presence };
        return graphPost(Presence(this, "setUserPreferredPresence"), body(postBody));
    }
    /**
     * Clears the preferred availability and activity status for a user
     *
     */
    async clearPreferredPresence() {
        return graphPost(Presence(this, "clearUserPreferredPresence"));
    }
    /**
     * Set a presence status message for a user
     *
     */
    async setStatusMessage(message) {
        const postBody = { statusMessage: { ...message } };
        return graphPost(Presence(this, "setStatusMessage"), body(postBody));
    }
};
_Presence = __decorate([
    defaultPath("presence")
], _Presence);
export { _Presence };
export const Presence = graphInvokableFactory(_Presence);
let _Communications = class _Communications extends _GraphCollection {
    /**
     * Retrieve presence information for a group of users
     *
     * @param ids An array of user id's to retrieve presence for.
     */
    async getPresencesByUserId(ids) {
        const postBody = { ids };
        return graphPost(Communications(this, "getPresencesByUserId"), body(postBody));
    }
};
_Communications = __decorate([
    defaultPath("communications")
], _Communications);
export { _Communications };
export const Communications = graphInvokableFactory(_Communications);
//# sourceMappingURL=types.js.map