import { GraphCollection, graphDelete, graphPatch, graphPost } from "./graphqueryable.js";
import { InjectHeaders, body, errorCheck, headers } from "@pnp/queryable";
/**
 * Decorator used to specify the default path for Queryable objects
 *
 * @param path
 */
export function defaultPath(path) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            constructor(...args) {
                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);
            }
        };
    };
}
/**
 * Adds the delete method to the tagged class
 */
export function deleteable() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            delete() {
                return graphDelete(this);
            }
        };
    };
}
/**
 * Adds the delete method to the tagged class
 */
export function deleteableWithETag() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            delete(eTag = "*") {
                return graphDelete(this, headers({
                    "If-Match": eTag,
                }));
            }
        };
    };
}
/**
 * Adds the update method to the tagged class
 */
export function updateable() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            update(props) {
                return graphPatch(this, body(props));
            }
        };
    };
}
/**
 * Adds the update method to the tagged class
 */
export function updateableWithETag() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            update(props, eTag = "*") {
                return graphPatch(this, body(props, headers({
                    "If-Match": eTag,
                })));
            }
        };
    };
}
/**
 * Adds the add method to the tagged class
 */
export function addable() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            add(props) {
                return graphPost(this, body(props));
            }
        };
    };
}
/**
 * Adds the getById method to a collection
 */
export function getById(factory) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            getById(id) {
                return factory(this, id);
            }
        };
    };
}
/**
 * Adds the getByName method to a collection
 */
export function getByName(factory) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            getByName(name) {
                return factory(this, name);
            }
        };
    };
}
export function hasDelta() {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (target) {
        return class extends target {
            delta(properties = {}) {
                var _a;
                const querystring = ((_a = Object.keys(properties)) === null || _a === void 0 ? void 0 : _a.map(key => `${key}=${properties[key]}`).join("&")) || "";
                const path = (querystring.length > 0) ? `delta?${querystring}` : "delta";
                const query = GraphCollection(this, path);
                if (properties === null || properties === void 0 ? void 0 : properties.maxPageSize) {
                    query.using(InjectHeaders({
                        "Prefer": `odata.maxpagesize=${properties.maxPageSize}`,
                    }));
                }
                query.on.parse.replace(errorCheck);
                query.on.parse(async (url, response, result) => {
                    const json = await response.json();
                    const nextLink = json["@odata.nextLink"];
                    const deltaLink = json["@odata.deltaLink"];
                    result = {
                        next: () => (nextLink ? GraphCollection([this, nextLink]) : null),
                        delta: () => (deltaLink ? GraphCollection([query, deltaLink])() : null),
                        values: json.value,
                    };
                    return [url, response, result];
                });
                return query;
            }
        };
    };
}
//# sourceMappingURL=decorators.js.map