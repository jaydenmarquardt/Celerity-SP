import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { GraphQueryable, _GraphCollection, _GraphInstance, graphInvokableFactory, graphPost } from "../graphqueryable.js";
import { defaultPath, deleteable, updateable, getById, addable } from "../decorators.js";
import { calendarView, instances } from "./funcs.js";
/**
 * Calendar
 */
let _Calendar = class _Calendar extends _GraphInstance {
    constructor() {
        super(...arguments);
        this.calendarView = calendarView;
    }
    get calendarPermissions() {
        return CalendarPermissions(this);
    }
    get events() {
        return Events(this);
    }
    /**
     * Get the free/busy availability information for a collection of users,
     * distributions lists, or resources (rooms or equipment) for a specified time period.
     *
     * @param properties The set of properties used to get the schedule
     */
    async getSchedule(properties) {
        return graphPost(Calendar(this, "getSchedule"), body(properties));
    }
};
_Calendar = __decorate([
    deleteable(),
    updateable()
], _Calendar);
export { _Calendar };
export const Calendar = graphInvokableFactory(_Calendar);
/**
 * Calendars
 */
let _Calendars = class _Calendars extends _GraphCollection {
};
_Calendars = __decorate([
    defaultPath("calendars"),
    getById(Calendar),
    addable()
], _Calendars);
export { _Calendars };
export const Calendars = graphInvokableFactory(_Calendars);
/**
 * CalendarView
 */
export class _CalendarView extends _GraphCollection {
    constructor(baseUrl, start, end) {
        super(baseUrl, "calendarView");
        this.query.set("startDateTime", start);
        this.query.set("endDateTime", end);
    }
    async delta(token) {
        return graphPost(GraphQueryable(this, `delta?${this.query}`), body({ token }));
    }
}
export const CalendarView = (baseUrl, start, end) => new _CalendarView(baseUrl, start, end);
/**
 * Event
 */
let _Event = class _Event extends _GraphInstance {
    constructor() {
        super(...arguments);
        this.instances = instances;
    }
    async accept(comment, sendResponse) {
        return graphPost(Event(this, "accept"), body({ comment, sendResponse }));
    }
    async cancel(comment) {
        return graphPost(Event(this, "cancel"), body({ comment }));
    }
    async decline(comment, sendResponse, proposedNewTime) {
        if (proposedNewTime) {
            sendResponse = true;
        }
        return graphPost(Event(this, "decline"), body({ comment, sendResponse, proposedNewTime }));
    }
    async dismissReminder() {
        return graphPost(Event(this, "dismissReminder"));
    }
    async forward(fowardEventInfo) {
        return graphPost(Event(this, "forward"), body(fowardEventInfo));
    }
    async snoozeReminder(reminderTime) {
        return graphPost(Event(this, "snoozeReminder"), body({ newReminderTime: reminderTime }));
    }
    async tentativelyAccept(comment, sendResponse, proposedNewTime) {
        if (proposedNewTime) {
            sendResponse = true;
        }
        return graphPost(Event(this, "tentativelyAccept"), body({ comment, sendResponse, proposedNewTime }));
    }
};
_Event = __decorate([
    deleteable(),
    updateable()
], _Event);
export { _Event };
export const Event = graphInvokableFactory(_Event);
/**
 * Events
 */
let _Events = class _Events extends _GraphCollection {
};
_Events = __decorate([
    defaultPath("events"),
    getById(Event),
    addable()
], _Events);
export { _Events };
export const Events = graphInvokableFactory(_Events);
/**
 * Event
 */
let _CalendarGroup = class _CalendarGroup extends _GraphInstance {
    get calendars() {
        return Calendars(this);
    }
};
_CalendarGroup = __decorate([
    deleteable(),
    updateable()
], _CalendarGroup);
export { _CalendarGroup };
export const CalendarGroup = graphInvokableFactory(_CalendarGroup);
/**
 * CalendarGroups
 */
let _CalendarGroups = class _CalendarGroups extends _GraphCollection {
};
_CalendarGroups = __decorate([
    defaultPath("calendarGroups"),
    getById(CalendarGroup),
    addable()
], _CalendarGroups);
export { _CalendarGroups };
export const CalendarGroups = graphInvokableFactory(_CalendarGroups);
/**
 * CalendarPermission
 */
let _CalendarPermission = class _CalendarPermission extends _GraphInstance {
};
_CalendarPermission = __decorate([
    updateable(),
    deleteable()
], _CalendarPermission);
export { _CalendarPermission };
export const CalendarPermission = graphInvokableFactory(_CalendarPermission);
/**
 * CalendarPermissions
 */
let _CalendarPermissions = class _CalendarPermissions extends _GraphCollection {
};
_CalendarPermissions = __decorate([
    defaultPath("calendarPermissions"),
    getById(CalendarPermission),
    addable()
], _CalendarPermissions);
export { _CalendarPermissions };
export const CalendarPermissions = graphInvokableFactory(_CalendarPermissions);
//# sourceMappingURL=types.js.map