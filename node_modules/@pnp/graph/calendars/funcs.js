import { body } from "@pnp/queryable/index.js";
import { GraphCollection, graphPost } from "../graphqueryable.js";
import { CalendarView } from "./types.js";
/**
 * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range,
 * from the user's default calendar, or from some other calendar of the user's
 *
 * @param this IGraphQueryable instance
 * @param start start time
 * @param end end time
 */
export function calendarView(start, end) {
    return CalendarView(this, start, end);
}
/**
 * Suggest meeting times and locations based on organizer and attendee availability, and time or location constraints specified as parameters.

 * @param this IGraphQueryable instance
 * @param properties The body of the meetingTimeSuggestionsRequest resource that contains the parameters for the operation.
 */
export async function findMeetingTimes(properties) {
    return graphPost(GraphCollection(this, "findMeetingTimes"), body(properties));
}
/**
 * Get the emailAddress objects that represent all the meeting rooms in the user's tenant or in a specific room list.
 *
 * @param this IGraphQueryable instance
 * @param roomList The SMTP address associated with the room list.
 */
export function findRooms(roomList) {
    const query = GraphCollection(this, roomList ? "findRooms(RoomList=@roomList)" : "findRooms");
    if (roomList) {
        query.query.set("@roomList", `'${roomList}'`);
    }
    return query;
}
/**
 * Get the instances (occurrences) of an event for a specified time range.
 * If the event is a seriesMaster type, this returns the occurrences and exceptions of the event in the specified time range.
 *
 * @param this IGraphQueryable instance
 * @param start start time
 * @param end end time
 */
export function instances(start, end) {
    const query = GraphCollection(this, "instances");
    query.query.set("startDateTime", start);
    query.query.set("endDateTime", end);
    return query;
}
/**
 * Get the list of event remindres defined by a time range,
 *
 * @param this IGraphQueryable instance
 * @param start start time
 * @param end end time
 */
export function reminderView(start, end) {
    const query = GraphCollection(this, `reminderView(startDateTime='${start}',endDateTime='${end}')`);
    return query;
}
//# sourceMappingURL=funcs.js.map