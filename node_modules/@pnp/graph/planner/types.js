import { __decorate } from "tslib";
import { _GraphInstance, _GraphCollection, graphInvokableFactory } from "../graphqueryable.js";
import { getById, deleteableWithETag, updateableWithETag, addable } from "../decorators.js";
import { defaultPath } from "../decorators.js";
/**
 * Planner
 */
let _Planner = class _Planner extends _GraphInstance {
    // Should Only be able to get by id, or else error occur
    get plans() {
        return Plans(this);
    }
    // Should Only be able to get by id, or else error occur
    get tasks() {
        return Tasks(this);
    }
    // Should Only be able to get by id, or else error occur
    get buckets() {
        return Buckets(this);
    }
};
_Planner = __decorate([
    defaultPath("planner")
], _Planner);
export { _Planner };
export const Planner = graphInvokableFactory(_Planner);
/**
 * Details
 */
let _PlanDetails = class _PlanDetails extends _GraphInstance {
};
_PlanDetails = __decorate([
    defaultPath("details"),
    updateableWithETag()
], _PlanDetails);
export { _PlanDetails };
export const PlanDetails = graphInvokableFactory(_PlanDetails);
/**
 * Plan
 */
let _Plan = class _Plan extends _GraphInstance {
    get tasks() {
        return Tasks(this);
    }
    get buckets() {
        return Buckets(this);
    }
    get details() {
        return PlanDetails(this);
    }
};
_Plan = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Plan);
export { _Plan };
export const Plan = graphInvokableFactory(_Plan);
let _Plans = class _Plans extends _GraphCollection {
};
_Plans = __decorate([
    defaultPath("plans"),
    getById(Plan),
    addable()
], _Plans);
export { _Plans };
export const Plans = graphInvokableFactory(_Plans);
/**
 * Details
 */
let _TaskDetails = class _TaskDetails extends _GraphInstance {
};
_TaskDetails = __decorate([
    defaultPath("details"),
    updateableWithETag()
], _TaskDetails);
export { _TaskDetails };
export const TaskDetails = graphInvokableFactory(_TaskDetails);
/**
 * AssignedToTaskBoardFormat
 */
let _AssignedToTaskBoardFormat = class _AssignedToTaskBoardFormat extends _GraphInstance {
};
_AssignedToTaskBoardFormat = __decorate([
    defaultPath("assignedToTaskBoardFormat"),
    updateableWithETag()
], _AssignedToTaskBoardFormat);
export { _AssignedToTaskBoardFormat };
export const AssignedToTaskBoardFormat = graphInvokableFactory(_AssignedToTaskBoardFormat);
/**
 * BucketTaskBoardFormat
 */
let _BucketTaskBoardFormat = class _BucketTaskBoardFormat extends _GraphInstance {
};
_BucketTaskBoardFormat = __decorate([
    defaultPath("bucketTaskBoardFormat"),
    updateableWithETag()
], _BucketTaskBoardFormat);
export { _BucketTaskBoardFormat };
export const BucketTaskBoardFormat = graphInvokableFactory(_BucketTaskBoardFormat);
/**
 * ProgressTaskBoardFormat
 */
let _ProgressTaskBoardFormat = class _ProgressTaskBoardFormat extends _GraphInstance {
};
_ProgressTaskBoardFormat = __decorate([
    defaultPath("progressTaskBoardFormat"),
    updateableWithETag()
], _ProgressTaskBoardFormat);
export { _ProgressTaskBoardFormat };
export const ProgressTaskBoardFormat = graphInvokableFactory(_ProgressTaskBoardFormat);
/**
 * Task
 */
let _Task = class _Task extends _GraphInstance {
    get details() {
        return TaskDetails(this);
    }
    get assignedToTaskBoardFormat() {
        return AssignedToTaskBoardFormat(this);
    }
    get bucketTaskBoardFormat() {
        return BucketTaskBoardFormat(this);
    }
    get progressTaskBoardFormat() {
        return ProgressTaskBoardFormat(this);
    }
};
_Task = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Task);
export { _Task };
export const Task = graphInvokableFactory(_Task);
/**
 * Tasks
 */
let _Tasks = class _Tasks extends _GraphCollection {
};
_Tasks = __decorate([
    defaultPath("tasks"),
    getById(Task),
    addable()
], _Tasks);
export { _Tasks };
export const Tasks = graphInvokableFactory(_Tasks);
/**
 * Bucket
 */
let _Bucket = class _Bucket extends _GraphInstance {
    get tasks() {
        return Tasks(this);
    }
};
_Bucket = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Bucket);
export { _Bucket };
export const Bucket = graphInvokableFactory(_Bucket);
/**
 * Buckets
 */
let _Buckets = class _Buckets extends _GraphCollection {
};
_Buckets = __decorate([
    defaultPath("buckets"),
    getById(Bucket),
    addable()
], _Buckets);
export { _Buckets };
export const Buckets = graphInvokableFactory(_Buckets);
//# sourceMappingURL=types.js.map