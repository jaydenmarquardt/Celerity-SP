import { __decorate } from "tslib";
import { _GraphCollection, _GraphInstance, graphInvokableFactory, graphPatch } from "../graphqueryable.js";
import { BlobParse, BufferParse } from "@pnp/queryable";
import { defaultPath } from "../decorators.js";
let _Photo = class _Photo extends _GraphInstance {
    /**
     * Gets the image bytes as a blob (browser)
     */
    getBlob() {
        return Photo(this, "$value").using(BlobParse())();
    }
    /**
     * Gets the image file bytes as a Buffer (node.js)
     */
    getBuffer() {
        return Photo(this, "$value").using(BufferParse())();
    }
    /**
     * Sets the file bytes
     *
     * @param content Image file contents, max 4 MB
     */
    setContent(content) {
        return graphPatch(Photo(this, "$value"), { body: content });
    }
};
_Photo = __decorate([
    defaultPath("photo")
], _Photo);
export { _Photo };
export const Photo = graphInvokableFactory(_Photo);
let _Photos = class _Photos extends _GraphCollection {
    /**
     * Gets the image reference by size. 48x48, 64x64, 96x96, 120x120, 240x240, 360x360, 432x432, 504x504, and 648x648.
     */
    getBySize(size) {
        return Photo(this, `/${size}`);
    }
};
_Photos = __decorate([
    defaultPath("photos")
], _Photos);
export { _Photos };
export const Photos = graphInvokableFactory(_Photos);
//# sourceMappingURL=types.js.map