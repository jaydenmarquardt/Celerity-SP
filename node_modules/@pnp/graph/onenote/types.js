import { __decorate } from "tslib";
import { BlobParse, InjectHeaders, TextParse, body } from "@pnp/queryable";
import { _GraphInstance, _GraphCollection, graphInvokableFactory, GraphQueryable, graphPost, graphGet, graphPatch, } from "../graphqueryable.js";
import { defaultPath, deleteable, getById } from "../decorators.js";
/**
 * Represents a onenote entity
 */
let _OneNote = class _OneNote extends _GraphInstance {
    get notebooks() {
        return Notebooks(this);
    }
    get pages() {
        return Pages(this);
    }
    get resources() {
        return Resources(this);
    }
    get sections() {
        return Sections(this);
    }
    get sectionGroups() {
        return SectionGroups(this);
    }
};
_OneNote = __decorate([
    defaultPath("onenote")
], _OneNote);
export { _OneNote };
export const OneNote = graphInvokableFactory(_OneNote);
/**
 * Describes a notebook instance
 *
 */
export class _Notebook extends _GraphInstance {
    get sections() {
        return Sections(this);
    }
    get sectionGroups() {
        return SectionGroups(this);
    }
    /**
     * Copy notebook
     * @param props of type ICopyProps. groupId (id of group to copy to. Use only when copying to M365 group), renameAs name of the copy.
     */
    async copy(props) {
        return graphPost(GraphQueryable(this, "copyNoteBook"), body(props));
    }
}
export const Notebook = graphInvokableFactory(_Notebook);
/**
 * Describes a collection of Notebook objects
 *
 */
let _Notebooks = class _Notebooks extends _GraphCollection {
    /**
     * Create a new notebook as specified in the request body.
     *
     * @param displayName Notebook display name
     */
    async add(displayName) {
        return graphPost(this, body({ displayName }));
    }
    /**
     * Get a list of recent notebooks for the sign-in user
     * @param includePersonalNotebooks Include notebooks owned by the user. Set to true to include notebooks owned by the user; otherwise, set to false.
     */
    async recent(includePersonalNotebooks = false) {
        return graphGet(GraphQueryable(this, `getRecentNotebooks(includePersonalNotebooks=${includePersonalNotebooks})`));
    }
};
_Notebooks = __decorate([
    defaultPath("notebooks"),
    getById(Notebook)
], _Notebooks);
export { _Notebooks };
export const Notebooks = graphInvokableFactory(_Notebooks);
/**
 * Describes a OneNote sections instance
 */
export class _Section extends _GraphInstance {
    get pages() {
        return Pages(this);
    }
    /**
     * Copy section to notebook
     * @param props of type ICopyProps. groupId (id of group to copy to. Use only when copying to M365 group), id of destination  notebook, renameAs name of the copy.
     */
    async copyToNotebook(props) {
        return graphPost(GraphQueryable(this, "copyToNoteBook"), body(props));
    }
    /**
     * Copy section group
     * @param props of type ICopyProps. groupId (id of group to copy to. Use only when copying to M365 group), id of destination  notebook, renameAs name of the copy.
     */
    async copyToSectionGroup(props) {
        return graphPost(GraphQueryable(this, "copyToNoteBook"), body(props));
    }
}
export const Section = graphInvokableFactory(_Section);
/**
 * Describes a collection of onenote sections objects
 *
 */
let _Sections = class _Sections extends _GraphCollection {
    /**
     * Adds a new section
     *
     * @param displayName New section display name
     */
    async add(displayName) {
        return graphPost(this, body({ displayName }));
    }
};
_Sections = __decorate([
    defaultPath("sections"),
    getById(Section)
], _Sections);
export { _Sections };
export const Sections = graphInvokableFactory(_Sections);
/**
 * Describes a root onenote sections group instance
 */
export class _SectionGroup extends _GraphInstance {
    get sections() {
        return Sections(this);
    }
}
export const SectionGroup = graphInvokableFactory(_SectionGroup);
/**
 * Describes a collection of Sections objects
 *
 */
let _SectionGroups = class _SectionGroups extends _GraphCollection {
    /**
    * Adds a new section group
    * @param displayName New section group display name
    */
    async add(displayName) {
        return graphPost(this, body({ displayName }));
    }
    get sections() {
        return Sections(this);
    }
};
_SectionGroups = __decorate([
    defaultPath("sectiongroups"),
    getById(SectionGroup)
], _SectionGroups);
export { _SectionGroups };
export const SectionGroups = graphInvokableFactory(_SectionGroups);
/**
 * Describes a page instance
 *
 */
let _Page = class _Page extends _GraphInstance {
    /**
     * Copy page to section
     * @param props of type ICopyPageProps. groupId (id of group to copy to. Use only when copying to M365 group), id of destination  notebook
     */
    async copyToSection(props) {
        return graphPost(GraphQueryable(this, "copyToSection"), body(props));
    }
    /**
     * Gets contents of a page
     *
     * @param includeIDs page html body
     */
    async content(includeIDs = false) {
        return Page(this, `content?includeIDs=${includeIDs}`).using(TextParse())();
    }
    /**
     * Copy page to section
     * @param props of type IOnenotePatchContentCommand.
     */
    async update(props) {
        return graphPatch(GraphQueryable(this, "content"), body(props));
    }
};
_Page = __decorate([
    deleteable()
], _Page);
export { _Page };
export const Page = graphInvokableFactory(_Page);
/**
 * Describes a collection of page objects
 *
 */
let _Pages = class _Pages extends _GraphCollection {
    /**
     * Create a new page as specified in the request body.
     *
     * @param html page html body
     */
    async add(html) {
        const q = GraphQueryable(this);
        q.using(InjectHeaders({
            "Content-Type": "text/html",
        }));
        return graphPost(q, { body: html });
    }
};
_Pages = __decorate([
    defaultPath("pages"),
    getById(Page)
], _Pages);
export { _Pages };
export const Pages = graphInvokableFactory(_Pages);
/**
 * Describes a resources
 *
 */
let _Resources = class _Resources extends _GraphInstance {
    /**
     * getById returns a Blob. API does not support getting JSON representation.
     * @param id id of the resource in a OneNote page
     * @returns Blob of the resource from a OneNote page
     */
    getById(id) {
        return GraphQueryable(this, `${id}/content`).using(BlobParse());
    }
};
_Resources = __decorate([
    defaultPath("resources")
], _Resources);
export { _Resources };
export const Resources = graphInvokableFactory(_Resources);
//# sourceMappingURL=types.js.map